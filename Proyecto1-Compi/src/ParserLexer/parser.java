
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.io.File;
import Tree.Arbol;
import Tree.Nodo;
import V2024.Resultado;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\003\005\000\002\003\006\000\002" +
    "\055\002\000\002\046\006\000\002\046\007\000\002\034" +
    "\006\000\002\034\005\000\002\034\006\000\002\056\002" +
    "\000\002\047\006\000\002\047\010\000\002\057\002\000" +
    "\002\004\010\000\002\060\002\000\002\004\007\000\002" +
    "\004\005\000\002\061\002\000\002\045\005\000\002\045" +
    "\005\000\002\050\003\000\002\050\004\000\002\050\006" +
    "\000\002\050\005\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\052\006" +
    "\000\002\053\006\000\002\007\004\000\002\007\006\000" +
    "\002\007\003\000\002\007\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\007" +
    "\000\002\021\011\000\002\021\007\000\002\021\011\000" +
    "\002\021\011\000\002\022\007\000\002\022\007\000\002" +
    "\023\013\000\002\023\013\000\002\023\007\000\002\024" +
    "\012\000\002\024\011\000\002\024\011\000\002\025\004" +
    "\000\002\025\003\000\002\025\005\000\002\026\006\000" +
    "\002\026\006\000\002\027\005\000\002\027\005\000\002" +
    "\042\005\000\002\042\004\000\002\042\007\000\002\042" +
    "\011\000\002\042\006\000\002\043\003\000\002\062\002" +
    "\000\002\044\006\000\002\044\003\000\002\031\003\000" +
    "\002\031\004\000\002\063\002\000\002\064\002\000\002" +
    "\032\007\000\002\032\005\000\002\035\003\000\002\036" +
    "\006\000\002\036\004\000\002\036\006\000\002\033\004" +
    "\000\002\051\005\000\002\051\004\000\002\051\005\000" +
    "\002\065\002\000\002\030\006\000\002\030\003\000\002" +
    "\030\005\000\002\037\004\000\002\037\003\000\002\037" +
    "\004\000\002\054\004\000\002\054\003\000\002\054\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\016\003\012\005\005\006\011\007\017\010" +
    "\006\011\016\001\002\000\004\002\u011f\001\002\000\010" +
    "\003\uffcf\004\uffcf\017\uffcf\001\002\000\010\003\uffcb\004" +
    "\uffcb\017\uffcb\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\020\002" +
    "\000\003\u011e\005\005\006\011\007\017\010\006\011\016" +
    "\001\002\000\010\003\uffce\004\uffce\017\uffce\001\002\000" +
    "\024\003\u0112\004\u0110\005\005\006\011\007\017\010\006" +
    "\011\016\017\u0113\020\027\001\002\000\006\004\021\017" +
    "\020\001\002\000\020\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\001\002\000\020\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002" +
    "\000\010\003\uffcd\004\uffcd\017\uffcd\001\002\000\010\003" +
    "\uffcc\004\uffcc\017\uffcc\001\002\000\004\027\uffef\001\002" +
    "\000\004\027\ufff5\001\002\000\004\027\024\001\002\000" +
    "\020\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\001\002\000\006\003\025\030\026\001\002\000" +
    "\004\030\371\001\002\000\004\020\027\001\002\000\060" +
    "\003\033\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\017\uffec\024\uffec\025\uffec" +
    "\027\uffec\044\uffec\046\uffec\050\uffec\051\uffec\052\uffec\055" +
    "\uffec\056\uffea\060\uffec\061\uffec\001\002\000\020\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\001" +
    "\002\000\004\056\333\001\002\000\056\003\053\005\005" +
    "\006\011\007\017\010\006\011\016\012\075\013\035\014" +
    "\036\015\044\017\043\024\052\025\071\027\060\044\054" +
    "\046\051\050\065\051\042\052\062\055\056\060\074\061" +
    "\063\001\002\000\004\021\034\001\002\000\020\002\uffe8" +
    "\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\001" +
    "\002\000\100\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\016\uffbc\017\uffbc\021\uffbc\023\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\057" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\001\002\000\100\003\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\057\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\001\002\000\100\003\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\057\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\001\002\000\066\003\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\017\uffa3\021\uffa3\024\uffa3\025\uffa3\027\uffa3\044\uffa3\046" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\060\uffa3\061\uffa3\001\002\000\100\003\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\023\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\057\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\004\027\343" +
    "\001\002\000\056\022\102\026\340\027\110\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000\100" +
    "\003\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\016" +
    "\uffba\017\uffba\021\uffba\023\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\057\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\001\002\000" +
    "\066\003\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\021\uffdb\024" +
    "\uffdb\025\uffdb\027\uffdb\044\uffdb\046\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061" +
    "\uffdb\001\002\000\020\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\017\uff84\045\uff84\001\002\000\060\003\230\005" +
    "\005\006\011\007\017\010\006\011\016\012\075\013\035" +
    "\014\036\015\044\017\043\024\052\025\071\027\060\044" +
    "\054\046\051\050\065\051\042\052\062\055\056\056\333" +
    "\060\074\061\063\001\002\000\004\045\331\001\002\000" +
    "\004\027\313\001\002\000\100\003\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\016\uffb9\017\uffb9\021\uffb9\023" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\057\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\001\002\000\070\003\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\021\uffde\024\uffde\025\uffde\027\uffde\044" +
    "\uffde\045\232\046\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\060\uffde\061\uffde\001\002\000" +
    "\024\012\075\013\035\014\036\015\044\017\106\024\052" +
    "\025\071\027\060\044\054\001\002\000\050\031\142\032" +
    "\143\033\124\034\122\035\127\036\135\037\132\040\123" +
    "\041\136\042\137\043\141\044\130\045\311\062\125\063" +
    "\146\064\126\065\121\066\133\067\131\001\002\000\004" +
    "\045\310\001\002\000\066\003\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\017\uffa4\021\uffa4\024\uffa4\025\uffa4\027\uffa4\044\uffa4\046" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\060\uffa4\061\uffa4\001\002\000\026\003\305\012" +
    "\075\013\035\014\036\015\044\017\106\024\052\025\071" +
    "\027\060\044\054\001\002\000\066\003\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\017\uffa2\021\uffa2\024\uffa2\025\uffa2\027\uffa2\044" +
    "\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\060\uffa2\061\uffa2\001\002\000\004\027" +
    "\247\001\002\000\004\027\244\001\002\000\006\003\240" +
    "\017\241\001\002\000\004\027\205\001\002\000\066\003" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf\025" +
    "\uffdf\027\uffdf\044\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\001" +
    "\002\000\004\045\204\001\002\000\066\003\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\017\uffa5\021\uffa5\024\uffa5\025\uffa5\027\uffa5" +
    "\044\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\001\002\000\100" +
    "\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\023\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\057\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000" +
    "\004\045\203\001\002\000\004\045\202\001\002\000\004" +
    "\027\177\001\002\000\100\003\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\057\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\001\002\000\020\005\005\006\011\007\017" +
    "\010\006\011\016\017\101\045\uffd1\001\002\000\020\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\017\uff83\045\uff83" +
    "\001\002\000\004\017\163\001\002\000\004\022\102\001" +
    "\002\000\026\003\155\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\017\uff82\024\uff82\025\uff82\027\uff82\044\uff82\001\002\000" +
    "\022\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\017\uff8c" +
    "\026\104\045\uff8c\001\002\000\024\012\075\013\035\014" +
    "\036\015\044\017\106\024\052\025\071\027\060\044\054" +
    "\001\002\000\064\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\017\uff89\031\142\032\143\033\124\034\122\035\127" +
    "\036\135\037\132\040\123\041\136\042\137\043\141\044" +
    "\130\045\uff89\062\125\063\146\064\126\065\121\066\133" +
    "\067\131\001\002\000\102\003\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\016\uffc6\017\uffc6\021\uffc6\023\uffc6" +
    "\027\110\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\057\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\001\002\000\100\003\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\011\uff7a\016\uff7a\017\uff7a\021" +
    "\uff7a\023\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\057\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\065\uff7a\066\uff7a\067\uff7a\001\002\000\030\003\113\012" +
    "\075\013\035\014\036\015\044\017\106\024\052\025\071" +
    "\027\060\030\111\044\054\001\002\000\100\003\uff78\005" +
    "\uff78\006\uff78\007\uff78\010\uff78\011\uff78\016\uff78\017\uff78" +
    "\021\uff78\023\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\057\uff78\062\uff78\063\uff78\064" +
    "\uff78\065\uff78\066\uff78\067\uff78\001\002\000\054\003\uff74" +
    "\016\uff74\030\uff74\031\142\032\143\033\124\034\122\035" +
    "\127\036\135\037\132\040\123\041\136\042\137\043\141" +
    "\044\130\062\125\063\146\064\126\065\121\066\133\067" +
    "\131\001\002\000\004\030\154\001\002\000\010\003\116" +
    "\016\115\030\117\001\002\000\024\012\uff76\013\uff76\014" +
    "\uff76\015\uff76\017\uff76\024\uff76\025\uff76\027\uff76\044\uff76" +
    "\001\002\000\024\012\075\013\035\014\036\015\044\017" +
    "\106\024\052\025\071\027\060\044\054\001\002\000\100" +
    "\003\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\016" +
    "\uff79\017\uff79\021\uff79\023\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\057\uff79\062\uff79" +
    "\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\001\002\000" +
    "\054\003\uff73\016\uff73\030\uff73\031\142\032\143\033\124" +
    "\034\122\035\127\036\135\037\132\040\123\041\136\042" +
    "\137\043\141\044\130\062\125\063\146\064\126\065\121" +
    "\066\133\067\131\001\002\000\024\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\017\uffb4\024\uffb4\025\uffb4\027\uffb4\044\uffb4" +
    "\001\002\000\024\012\uffab\013\uffab\014\uffab\015\uffab\017" +
    "\uffab\024\uffab\025\uffab\027\uffab\044\uffab\001\002\000\024" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\024\uffa7\025" +
    "\uffa7\027\uffa7\044\uffa7\001\002\000\100\003\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\016\uffaf\017\uffaf\021" +
    "\uffaf\023\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\057\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\001\002\000\024\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\017\uffb7\024\uffb7\025\uffb7\027\uffb7" +
    "\044\uffb7\001\002\000\024\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\017\uffb5\024\uffb5\025\uffb5\027\uffb5\044\uffb5\001\002" +
    "\000\024\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\024" +
    "\uffaa\025\uffaa\027\uffaa\044\uffaa\001\002\000\024\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\017\uffac\024\uffac\025\uffac\027" +
    "\uffac\044\uffac\001\002\000\024\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\017\uffb2\024\uffb2\025\uffb2\027\uffb2\044\uffb2\001" +
    "\002\000\024\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\044\uffa8\001\002\000\024\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\044\uffb3\001\002\000\024\012\075\013\035\014" +
    "\036\015\044\017\106\024\052\025\071\027\060\044\054" +
    "\001\002\000\024\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017" +
    "\uffa9\024\uffa9\025\uffa9\027\uffa9\044\uffa9\001\002\000\024" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\024\uffa6\025" +
    "\uffa6\027\uffa6\044\uffa6\001\002\000\024\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\017\uffae\024\uffae\025\uffae\027\uffae\044" +
    "\uffae\001\002\000\100\003\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\001\002\000\024\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\017\uffad\024\uffad\025\uffad\027\uffad\044\uffad\001\002" +
    "\000\100\003\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\023\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\057\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\001" +
    "\002\000\100\003\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\057" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\001\002\000\024\012\075\013\035\014\036\015\044\017" +
    "\106\024\052\025\071\027\060\044\054\001\002\000\024" +
    "\012\075\013\035\014\036\015\044\017\106\024\052\025" +
    "\071\027\060\044\054\001\002\000\024\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\017\uffb6\024\uffb6\025\uffb6\027\uffb6\044" +
    "\uffb6\001\002\000\100\003\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\030" +
    "\uffc1\031\142\032\143\033\124\034\122\035\127\036\135" +
    "\037\132\040\123\041\136\042\137\043\141\044\130\045" +
    "\uffc1\057\uffc1\062\125\063\146\064\126\065\121\066\133" +
    "\067\131\001\002\000\100\003\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3" +
    "\030\uffc3\031\142\032\143\033\124\034\122\035\127\036" +
    "\135\037\132\040\123\041\136\042\137\043\141\044\130" +
    "\045\uffc3\057\uffc3\062\125\063\146\064\126\065\121\066" +
    "\133\067\131\001\002\000\100\003\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\016\uffc2\017\uffc2\021\uffc2\023" +
    "\uffc2\030\uffc2\031\142\032\143\033\124\034\122\035\127" +
    "\036\135\037\132\040\123\041\136\042\137\043\141\044" +
    "\130\045\uffc2\057\uffc2\062\125\063\146\064\126\065\121" +
    "\066\133\067\131\001\002\000\024\012\075\013\035\014" +
    "\036\015\044\017\106\024\052\025\071\027\060\044\054" +
    "\001\002\000\054\003\uff75\016\uff75\030\uff75\031\142\032" +
    "\143\033\124\034\122\035\127\036\135\037\132\040\123" +
    "\041\136\042\137\043\141\044\130\062\125\063\146\064" +
    "\126\065\121\066\133\067\131\001\002\000\100\003\uff77" +
    "\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\016\uff77\017" +
    "\uff77\021\uff77\023\uff77\030\uff77\031\uff77\032\uff77\033\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\044\uff77\045\uff77\057\uff77\062\uff77\063\uff77" +
    "\064\uff77\065\uff77\066\uff77\067\uff77\001\002\000\004\023" +
    "\162\001\002\000\024\012\075\013\035\014\036\015\044" +
    "\017\106\024\052\025\071\027\060\044\054\001\002\000" +
    "\050\023\uff81\031\142\032\143\033\124\034\122\035\127" +
    "\036\135\037\132\040\123\041\136\042\137\043\141\044" +
    "\130\062\125\063\146\064\126\065\121\066\133\067\131" +
    "\001\002\000\004\023\161\001\002\000\022\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\017\uff80\026\uff80\045\uff80" +
    "\001\002\000\022\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011" +
    "\uff7f\017\uff7f\026\uff7f\045\uff7f\001\002\000\004\022\102" +
    "\001\002\000\022\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\017\uff8d\026\165\045\uff8d\001\002\000\026\012\075" +
    "\013\035\014\036\015\044\017\106\020\167\024\052\025" +
    "\071\027\060\044\054\001\002\000\064\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\017\uff8b\031\142\032\143\033" +
    "\124\034\122\035\127\036\135\037\132\040\123\041\136" +
    "\042\137\043\141\044\130\045\uff8b\062\125\063\146\064" +
    "\126\065\121\066\133\067\131\001\002\000\024\012\075" +
    "\013\035\014\036\015\044\017\106\024\052\025\071\027" +
    "\060\044\054\001\002\000\052\016\uff85\021\uff85\031\142" +
    "\032\143\033\124\034\122\035\127\036\135\037\132\040" +
    "\123\041\136\042\137\043\141\044\130\062\125\063\146" +
    "\064\126\065\121\066\133\067\131\001\002\000\006\016" +
    "\174\021\uff88\001\002\000\004\021\173\001\002\000\020" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\017\uff8a\045" +
    "\uff8a\001\002\000\024\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\017\uff87\024\uff87\025\uff87\027\uff87\044\uff87\001\002\000" +
    "\024\012\075\013\035\014\036\015\044\017\106\024\052" +
    "\025\071\027\060\044\054\001\002\000\052\016\uff86\021" +
    "\uff86\031\142\032\143\033\124\034\122\035\127\036\135" +
    "\037\132\040\123\041\136\042\137\043\141\044\130\062" +
    "\125\063\146\064\126\065\121\066\133\067\131\001\002" +
    "\000\024\012\075\013\035\014\036\015\044\017\106\024" +
    "\052\025\071\027\060\044\054\001\002\000\050\030\201" +
    "\031\142\032\143\033\124\034\122\035\127\036\135\037" +
    "\132\040\123\041\136\042\137\043\141\044\130\062\125" +
    "\063\146\064\126\065\121\066\133\067\131\001\002\000" +
    "\004\045\uffd5\001\002\000\066\003\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\027\uffdc\044\uffdc" +
    "\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\060\uffdc\061\uffdc\001\002\000\066\003\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\044\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd\001\002" +
    "\000\066\003\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\021\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\044\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\060\uffd8" +
    "\061\uffd8\001\002\000\026\003\207\012\075\013\035\014" +
    "\036\015\044\017\106\024\052\025\071\027\060\044\054" +
    "\001\002\000\050\030\236\031\142\032\143\033\124\034" +
    "\122\035\127\036\135\037\132\040\123\041\136\042\137" +
    "\043\141\044\130\062\125\063\146\064\126\065\121\066" +
    "\133\067\131\001\002\000\004\030\210\001\002\000\004" +
    "\020\211\001\002\000\062\003\213\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\017\uffe7\021\uffe7\024\uffe7\025\uffe7\027\uffe7\044\uffe7\046" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7\060\uffe7" +
    "\061\uffe7\001\002\000\066\003\uff9b\005\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\017\uff9b\021\uff9b\024\uff9b\025\uff9b\027\uff9b\044\uff9b\046" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\060\uff9b\061\uff9b\001\002\000\004\021\235\001" +
    "\002\000\062\003\053\005\005\006\011\007\017\010\006" +
    "\011\016\012\075\013\035\014\036\015\044\017\043\021" +
    "\217\024\052\025\071\027\060\044\054\046\051\050\065" +
    "\051\042\052\062\055\056\056\221\060\074\061\063\001" +
    "\002\000\070\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021" +
    "\uffe6\024\uffe6\025\uffe6\027\uffe6\044\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\060\uffe6\061\uffe6\001\002\000\062\003\230\005\005" +
    "\006\011\007\017\010\006\011\016\012\075\013\035\014" +
    "\036\015\044\017\043\021\226\024\052\025\071\027\060" +
    "\044\054\046\051\050\065\051\042\052\062\055\056\056" +
    "\221\060\074\061\063\001\002\000\070\003\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\001\002" +
    "\000\004\045\224\001\002\000\030\003\223\012\075\013" +
    "\035\014\036\015\044\017\106\024\052\025\071\027\060" +
    "\044\054\045\uff6e\001\002\000\050\031\142\032\143\033" +
    "\124\034\122\035\127\036\135\037\132\040\123\041\136" +
    "\042\137\043\141\044\130\045\uff6f\062\125\063\146\064" +
    "\126\065\121\066\133\067\131\001\002\000\004\045\uff6d" +
    "\001\002\000\004\021\225\001\002\000\070\003\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\021\uffe1\024\uffe1\025\uffe1\027" +
    "\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1\001" +
    "\002\000\070\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\021" +
    "\uffe3\024\uffe3\025\uffe3\027\uffe3\044\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\060\uffe3\061\uffe3\001\002\000\004\045\233\001\002" +
    "\000\004\045\232\001\002\000\066\003\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\021\uffe0\024\uffe0\025\uffe0\027\uffe0\044" +
    "\uffe0\046\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\060\uffe0\061\uffe0\001\002\000\066\003" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\044\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\001" +
    "\002\000\004\021\234\001\002\000\070\003\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\021\uffe2\024\uffe2\025\uffe2\027\uffe2" +
    "\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\001\002" +
    "\000\070\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5" +
    "\024\uffe5\025\uffe5\027\uffe5\044\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\001\002\000\004\020\211\001\002\000" +
    "\066\003\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\021\uff9c\024" +
    "\uff9c\025\uff9c\027\uff9c\044\uff9c\046\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\061" +
    "\uff9c\001\002\000\004\045\uffd0\001\002\000\010\022\102" +
    "\026\242\045\uffd3\001\002\000\024\012\075\013\035\014" +
    "\036\015\044\017\106\024\052\025\071\027\060\044\054" +
    "\001\002\000\050\031\142\032\143\033\124\034\122\035" +
    "\127\036\135\037\132\040\123\041\136\042\137\043\141" +
    "\044\130\045\uffd2\062\125\063\146\064\126\065\121\066" +
    "\133\067\131\001\002\000\024\012\075\013\035\014\036" +
    "\015\044\017\106\024\052\025\071\027\060\044\054\001" +
    "\002\000\050\030\246\031\142\032\143\033\124\034\122" +
    "\035\127\036\135\037\132\040\123\041\136\042\137\043" +
    "\141\044\130\062\125\063\146\064\126\065\121\066\133" +
    "\067\131\001\002\000\004\045\uffd4\001\002\000\026\003" +
    "\251\012\075\013\035\014\036\015\044\017\106\024\052" +
    "\025\071\027\060\044\054\001\002\000\050\030\271\031" +
    "\142\032\143\033\124\034\122\035\127\036\135\037\132" +
    "\040\123\041\136\042\137\043\141\044\130\062\125\063" +
    "\146\064\126\065\121\066\133\067\131\001\002\000\004" +
    "\030\252\001\002\000\004\020\253\001\002\000\004\053" +
    "\256\001\002\000\012\003\uff93\021\uff93\053\uff93\054\uff93" +
    "\001\002\000\010\003\265\021\267\053\256\001\002\000" +
    "\026\003\260\012\075\013\035\014\036\015\044\017\106" +
    "\024\052\025\071\027\060\044\054\001\002\000\050\031" +
    "\142\032\143\033\124\034\122\035\127\036\135\037\132" +
    "\040\123\041\136\042\137\043\141\044\130\057\263\062" +
    "\125\063\146\064\126\065\121\066\133\067\131\001\002" +
    "\000\004\057\261\001\002\000\056\003\053\005\005\006" +
    "\011\007\017\010\006\011\016\012\075\013\035\014\036" +
    "\015\044\017\043\024\052\025\071\027\060\044\054\046" +
    "\051\050\065\051\042\052\062\055\056\060\074\061\063" +
    "\001\002\000\064\003\230\005\005\006\011\007\017\010" +
    "\006\011\016\012\075\013\035\014\036\015\044\017\043" +
    "\021\uff90\024\052\025\071\027\060\044\054\046\051\050" +
    "\065\051\042\052\062\053\uff90\054\uff90\055\056\060\074" +
    "\061\063\001\002\000\056\003\053\005\005\006\011\007" +
    "\017\010\006\011\016\012\075\013\035\014\036\015\044" +
    "\017\043\024\052\025\071\027\060\044\054\046\051\050" +
    "\065\051\042\052\062\055\056\060\074\061\063\001\002" +
    "\000\064\003\230\005\005\006\011\007\017\010\006\011" +
    "\016\012\075\013\035\014\036\015\044\017\043\021\uff91" +
    "\024\052\025\071\027\060\044\054\046\051\050\065\051" +
    "\042\052\062\053\uff91\054\uff91\055\056\060\074\061\063" +
    "\001\002\000\004\053\256\001\002\000\012\003\uff94\021" +
    "\uff94\053\uff94\054\uff94\001\002\000\066\003\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\017\uff95\021\uff95\024\uff95\025\uff95\027\uff95" +
    "\044\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\060\uff95\061\uff95\001\002\000\012" +
    "\003\uff92\021\uff92\053\uff92\054\uff92\001\002\000\004\020" +
    "\272\001\002\000\004\053\256\001\002\000\012\003\265" +
    "\021\276\053\256\054\274\001\002\000\006\003\300\057" +
    "\301\001\002\000\004\021\277\001\002\000\066\003\uff96" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\017\uff96\021\uff96\024\uff96\025\uff96" +
    "\027\uff96\044\uff96\046\uff96\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\060\uff96\061\uff96\001\002" +
    "\000\066\003\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\017\uff97\021\uff97" +
    "\024\uff97\025\uff97\027\uff97\044\uff97\046\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\060\uff97" +
    "\061\uff97\001\002\000\056\003\053\005\005\006\011\007" +
    "\017\010\006\011\016\012\075\013\035\014\036\015\044" +
    "\017\043\024\052\025\071\027\060\044\054\046\051\050" +
    "\065\051\042\052\062\055\056\060\074\061\063\001\002" +
    "\000\056\003\053\005\005\006\011\007\017\010\006\011" +
    "\016\012\075\013\035\014\036\015\044\017\043\024\052" +
    "\025\071\027\060\044\054\046\051\050\065\051\042\052" +
    "\062\055\056\060\074\061\063\001\002\000\060\003\230" +
    "\005\005\006\011\007\017\010\006\011\016\012\075\013" +
    "\035\014\036\015\044\017\043\021\uff8f\024\052\025\071" +
    "\027\060\044\054\046\051\050\065\051\042\052\062\055" +
    "\056\060\074\061\063\001\002\000\060\003\230\005\005" +
    "\006\011\007\017\010\006\011\016\012\075\013\035\014" +
    "\036\015\044\017\043\021\uff8e\024\052\025\071\027\060" +
    "\044\054\046\051\050\065\051\042\052\062\055\056\060" +
    "\074\061\063\001\002\000\050\030\307\031\142\032\143" +
    "\033\124\034\122\035\127\036\135\037\132\040\123\041" +
    "\136\042\137\043\141\044\130\062\125\063\146\064\126" +
    "\065\121\066\133\067\131\001\002\000\004\030\306\001" +
    "\002\000\100\003\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\016\uffbe\017\uffbe\021\uffbe\023\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\057" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\001\002\000\100\003\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\016\uffbf\017\uffbf\021\uffbf\023\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\057\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\001\002\000\066\003\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\021\uffd9\024\uffd9\025\uffd9\027\uffd9\044\uffd9\046\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\060\uffd9\061\uffd9\001\002\000\066\003\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\021\uffda\024\uffda\025\uffda\027\uffda" +
    "\044\uffda\046\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\060\uffda\061\uffda\001\002\000\100" +
    "\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\023\uffc0\030\uffc0\031\142\032\143" +
    "\033\124\034\122\035\127\036\135\037\132\040\123\041" +
    "\136\042\uffc0\043\uffc0\044\130\045\uffc0\057\uffc0\062\125" +
    "\063\146\064\126\065\121\066\133\067\131\001\002\000" +
    "\026\003\315\012\075\013\035\014\036\015\044\017\106" +
    "\024\052\025\071\027\060\044\054\001\002\000\050\030" +
    "\322\031\142\032\143\033\124\034\122\035\127\036\135" +
    "\037\132\040\123\041\136\042\137\043\141\044\130\062" +
    "\125\063\146\064\126\065\121\066\133\067\131\001\002" +
    "\000\004\030\316\001\002\000\004\020\211\001\002\000" +
    "\070\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f\024" +
    "\uff9f\025\uff9f\027\uff9f\044\uff9f\046\uff9f\047\320\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060" +
    "\uff9f\061\uff9f\001\002\000\004\020\211\001\002\000\066" +
    "\003\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d\021\uff9d\024\uff9d" +
    "\025\uff9d\027\uff9d\044\uff9d\046\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d" +
    "\001\002\000\006\003\323\020\211\001\002\000\004\047" +
    "\327\001\002\000\070\003\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\017" +
    "\uffa1\021\uffa1\024\uffa1\025\uffa1\027\uffa1\044\uffa1\046\uffa1" +
    "\047\325\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\060\uffa1\061\uffa1\001\002\000\004\020\211" +
    "\001\002\000\066\003\uffa0\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\021\uffa0\024\uffa0\025\uffa0\027\uffa0\044\uffa0\046\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\060\uffa0\061\uffa0\001\002\000\004\020\211\001\002\000" +
    "\066\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\021\uff9e\024" +
    "\uff9e\025\uff9e\027\uff9e\044\uff9e\046\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061" +
    "\uff9e\001\002\000\066\003\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\021\uffd7\024\uffd7\025\uffd7\027\uffd7\044\uffd7\046\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\060\uffd7\061\uffd7\001\002\000\004\045\336\001\002" +
    "\000\030\003\335\012\075\013\035\014\036\015\044\017" +
    "\106\024\052\025\071\027\060\044\054\045\uff71\001\002" +
    "\000\050\031\142\032\143\033\124\034\122\035\127\036" +
    "\135\037\132\040\123\041\136\042\137\043\141\044\130" +
    "\045\uff72\062\125\063\146\064\126\065\121\066\133\067" +
    "\131\001\002\000\004\045\uff70\001\002\000\004\021\337" +
    "\001\002\000\020\002\uffeb\003\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\001\002\000\026\003\342\012\075" +
    "\013\035\014\036\015\044\017\106\024\052\025\071\027" +
    "\060\044\054\001\002\000\050\031\142\032\143\033\124" +
    "\034\122\035\127\036\135\037\132\040\123\041\136\042" +
    "\137\043\141\044\130\045\uffca\062\125\063\146\064\126" +
    "\065\121\066\133\067\131\001\002\000\004\045\uffc9\001" +
    "\002\000\020\003\346\005\005\006\011\007\017\010\006" +
    "\011\016\017\347\001\002\000\004\045\360\001\002\000" +
    "\004\045\352\001\002\000\006\030\350\045\uffc8\001\002" +
    "\000\006\022\102\026\340\001\002\000\004\020\211\001" +
    "\002\000\066\003\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\017\uff98\021" +
    "\uff98\024\uff98\025\uff98\027\uff98\044\uff98\046\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\060" +
    "\uff98\061\uff98\001\002\000\024\012\075\013\035\014\036" +
    "\015\044\017\106\024\052\025\071\027\060\044\054\001" +
    "\002\000\050\031\142\032\143\033\124\034\122\035\127" +
    "\036\135\037\132\040\123\041\136\042\137\043\141\044" +
    "\130\045\354\062\125\063\146\064\126\065\121\066\133" +
    "\067\131\001\002\000\024\012\075\013\035\014\036\015" +
    "\044\017\106\024\052\025\071\027\060\044\054\001\002" +
    "\000\050\030\356\031\142\032\143\033\124\034\122\035" +
    "\127\036\135\037\132\040\123\041\136\042\137\043\141" +
    "\044\130\062\125\063\146\064\126\065\121\066\133\067" +
    "\131\001\002\000\004\020\211\001\002\000\066\003\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\017\uff9a\021\uff9a\024\uff9a\025\uff9a" +
    "\027\uff9a\044\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\001\002" +
    "\000\024\012\075\013\035\014\036\015\044\017\106\024" +
    "\052\025\071\027\060\044\054\001\002\000\050\031\142" +
    "\032\143\033\124\034\122\035\127\036\135\037\132\040" +
    "\123\041\136\042\137\043\141\044\130\045\362\062\125" +
    "\063\146\064\126\065\121\066\133\067\131\001\002\000" +
    "\024\012\075\013\035\014\036\015\044\017\106\024\052" +
    "\025\071\027\060\044\054\001\002\000\050\030\364\031" +
    "\142\032\143\033\124\034\122\035\127\036\135\037\132" +
    "\040\123\041\136\042\137\043\141\044\130\062\125\063" +
    "\146\064\126\065\121\066\133\067\131\001\002\000\004" +
    "\020\211\001\002\000\066\003\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\017\uff99\021\uff99\024\uff99\025\uff99\027\uff99\044\uff99\046" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99" +
    "\056\uff99\060\uff99\061\uff99\001\002\000\004\045\367\001" +
    "\002\000\004\021\370\001\002\000\020\002\uffe9\003\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\001\002\000" +
    "\004\020\027\001\002\000\020\002\ufff6\003\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001\002\000\004\027" +
    "\375\001\002\000\020\002\uffee\003\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\001\002\000\020\003\377\005" +
    "\005\006\011\007\017\010\006\011\016\030\376\001\002" +
    "\000\004\020\027\001\002\000\004\030\u010c\001\002\000" +
    "\004\030\u010a\001\002\000\004\017\u0109\001\002\000\010" +
    "\003\u0104\016\u0103\030\uff7e\001\002\000\014\005\005\006" +
    "\011\007\017\010\006\011\016\001\002\000\014\005\005" +
    "\006\011\007\017\010\006\011\016\001\002\000\004\017" +
    "\u0106\001\002\000\010\003\uff7b\016\uff7b\030\uff7b\001\002" +
    "\000\004\017\u0108\001\002\000\010\003\uff7d\016\uff7d\030" +
    "\uff7d\001\002\000\010\003\uff7c\016\uff7c\030\uff7c\001\002" +
    "\000\004\020\027\001\002\000\020\002\ufff2\003\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\001\002\000\004" +
    "\020\027\001\002\000\020\002\ufff0\003\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\001\002\000\020\002\ufff1" +
    "\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001" +
    "\002\000\020\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\001\002\000\004\027\u011b\001\002\000" +
    "\020\002\uffff\003\u0119\005\005\006\011\007\017\010\006" +
    "\011\016\001\002\000\010\004\u0110\017\u0113\020\027\001" +
    "\002\000\004\027\u0114\001\002\000\014\005\005\006\011" +
    "\007\017\010\006\011\016\001\002\000\004\030\u0116\001" +
    "\002\000\004\020\027\001\002\000\020\002\uffed\003\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\001\002\000" +
    "\020\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\001\002\000\024\003\u0112\004\u0110\005\005\006" +
    "\011\007\017\010\006\011\016\017\u0113\020\027\001\002" +
    "\000\020\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\001\002\000\004\030\u011c\001\002\000\004" +
    "\020\027\001\002\000\020\002\ufff3\003\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\026\002\ufffe" +
    "\003\u0112\004\u0110\005\005\006\011\007\017\010\006\011" +
    "\016\017\u0113\020\027\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\016\002\003\012\012\040\006\041\007\046" +
    "\014\047\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\012\040" +
    "\u0117\046\014\047\013\001\001\000\002\001\001\000\016" +
    "\004\u010e\012\012\040\006\041\u0110\046\014\047\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\372\001" +
    "\001\000\004\055\021\001\001\000\004\003\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\027\001\001\000\006\057\031\060\030\001\001" +
    "\000\002\001\001\000\004\037\365\001\001\000\044\005" +
    "\046\006\065\007\071\010\072\011\054\012\063\013\040" +
    "\020\044\021\067\022\056\023\037\024\060\031\075\033" +
    "\036\042\045\052\066\053\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\102\051\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\230" +
    "\007\071\010\072\011\054\012\063\013\040\020\044\021" +
    "\067\022\056\023\037\024\060\031\075\033\036\037\331" +
    "\042\045\052\066\053\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\311\013\040\033\036\001\001\000\012\014\143\015" +
    "\137\016\144\017\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\303\013\040\033\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\077\042\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\102\001\001\000\004\063\155\001" +
    "\001\000\002\001\001\000\010\011\104\013\040\033\036" +
    "\001\001\000\012\014\143\015\137\016\144\017\133\001" +
    "\001\000\004\051\106\001\001\000\002\001\001\000\012" +
    "\011\111\013\040\030\113\033\036\001\001\000\002\001" +
    "\001\000\012\014\143\015\137\016\144\017\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\151\001" +
    "\001\000\010\011\117\013\040\033\036\001\001\000\002" +
    "\001\001\000\012\014\143\015\137\016\144\017\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\150\013\040\033" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\147\013\040\033\036" +
    "\001\001\000\010\011\146\013\040\033\036\001\001\000" +
    "\002\001\001\000\012\014\143\015\137\016\144\017\133" +
    "\001\001\000\012\014\143\015\137\016\144\017\133\001" +
    "\001\000\012\014\143\015\137\016\144\017\133\001\001" +
    "\000\010\011\152\013\040\033\036\001\001\000\012\014" +
    "\143\015\137\016\144\017\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\156\013\040\033\036\001" +
    "\001\000\014\014\143\015\137\016\144\017\133\064\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\163\001\001\000\002\001\001\000\010" +
    "\011\165\013\040\033\036\001\001\000\012\014\143\015" +
    "\137\016\144\017\133\001\001\000\014\011\167\013\040" +
    "\033\036\043\171\044\170\001\001\000\012\014\143\015" +
    "\137\016\144\017\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\174\001\001\000" +
    "\010\011\175\013\040\033\036\001\001\000\012\014\143" +
    "\015\137\016\144\017\133\001\001\000\010\011\177\013" +
    "\040\033\036\001\001\000\012\014\143\015\137\016\144" +
    "\017\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\205\013\040" +
    "\033\036\001\001\000\012\014\143\015\137\016\144\017" +
    "\133\001\001\000\002\001\001\000\004\045\211\001\001" +
    "\000\004\061\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\005\215\006\065\007\071\010\072\011\054" +
    "\012\063\013\040\020\044\021\067\022\056\023\037\024" +
    "\060\031\075\033\036\042\045\050\214\052\066\053\047" +
    "\054\217\001\001\000\002\001\001\000\044\006\230\007" +
    "\071\010\072\011\054\012\063\013\040\020\044\021\067" +
    "\022\056\023\037\024\060\031\075\033\036\042\045\052" +
    "\066\053\047\054\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\221\013\040\033\036\001\001\000" +
    "\012\014\143\015\137\016\144\017\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\163\001\001\000\010\011" +
    "\242\013\040\033\036\001\001\000\012\014\143\015\137" +
    "\016\144\017\133\001\001\000\010\011\244\013\040\033" +
    "\036\001\001\000\012\014\143\015\137\016\144\017\133" +
    "\001\001\000\002\001\001\000\010\011\247\013\040\033" +
    "\036\001\001\000\012\014\143\015\137\016\144\017\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\254\026\253\001\001\000\002\001\001\000\004\026\265" +
    "\001\001\000\010\011\256\013\040\033\036\001\001\000" +
    "\012\014\143\015\137\016\144\017\133\001\001\000\002" +
    "\001\001\000\044\005\261\006\065\007\071\010\072\011" +
    "\054\012\063\013\040\020\044\021\067\022\056\023\037" +
    "\024\060\031\075\033\036\042\045\052\066\053\047\001" +
    "\001\000\042\006\230\007\071\010\072\011\054\012\063" +
    "\013\040\020\044\021\067\022\056\023\037\024\060\031" +
    "\075\033\036\042\045\052\066\053\047\001\001\000\044" +
    "\005\263\006\065\007\071\010\072\011\054\012\063\013" +
    "\040\020\044\021\067\022\056\023\037\024\060\031\075" +
    "\033\036\042\045\052\066\053\047\001\001\000\042\006" +
    "\230\007\071\010\072\011\054\012\063\013\040\020\044" +
    "\021\067\022\056\023\037\024\060\031\075\033\036\042" +
    "\045\052\066\053\047\001\001\000\004\026\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\272\026\253\001\001\000\006" +
    "\026\265\027\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\302" +
    "\006\065\007\071\010\072\011\054\012\063\013\040\020" +
    "\044\021\067\022\056\023\037\024\060\031\075\033\036" +
    "\042\045\052\066\053\047\001\001\000\044\005\301\006" +
    "\065\007\071\010\072\011\054\012\063\013\040\020\044" +
    "\021\067\022\056\023\037\024\060\031\075\033\036\042" +
    "\045\052\066\053\047\001\001\000\042\006\230\007\071" +
    "\010\072\011\054\012\063\013\040\020\044\021\067\022" +
    "\056\023\037\024\060\031\075\033\036\042\045\052\066" +
    "\053\047\001\001\000\042\006\230\007\071\010\072\011" +
    "\054\012\063\013\040\020\044\021\067\022\056\023\037" +
    "\024\060\031\075\033\036\042\045\052\066\053\047\001" +
    "\001\000\012\014\143\015\137\016\144\017\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\143\015\137" +
    "\016\144\017\133\001\001\000\010\011\313\013\040\033" +
    "\036\001\001\000\012\014\143\015\137\016\144\017\133" +
    "\001\001\000\002\001\001\000\004\045\316\001\001\000" +
    "\002\001\001\000\004\045\320\001\001\000\002\001\001" +
    "\000\004\045\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\325\001\001\000\002\001\001\000\004" +
    "\045\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\333\013\040\033\036\001\001" +
    "\000\012\014\143\015\137\016\144\017\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\340\013\040\033\036\001\001\000\012\014\143\015" +
    "\137\016\144\017\133\001\001\000\002\001\001\000\014" +
    "\007\344\010\343\012\063\031\075\042\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\102\001\001\000\004\045\350\001\001\000\002\001" +
    "\001\000\010\011\352\013\040\033\036\001\001\000\012" +
    "\014\143\015\137\016\144\017\133\001\001\000\010\011" +
    "\354\013\040\033\036\001\001\000\012\014\143\015\137" +
    "\016\144\017\133\001\001\000\004\045\356\001\001\000" +
    "\002\001\001\000\010\011\360\013\040\033\036\001\001" +
    "\000\012\014\143\015\137\016\144\017\133\001\001\000" +
    "\010\011\362\013\040\033\036\001\001\000\012\014\143" +
    "\015\137\016\144\017\133\001\001\000\004\045\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\371\001\001\000\002\001" +
    "\001\000\004\034\373\001\001\000\002\001\001\000\010" +
    "\012\u0100\035\377\036\u0101\001\001\000\004\004\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0106\001\001\000\004\012" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u010a\001\001\000\002\001\001\000\004\004\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\012\040\u0117\046\014\047\013" +
    "\001\001\000\004\004\u010e\001\001\000\002\001\001\000" +
    "\010\012\u0100\035\u0114\036\u0101\001\001\000\002\001\001" +
    "\000\004\004\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u010e\012\012\040\u0119\046\014\047\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u011c\001\001\000\002\001\001\000\014\004\u010e\012\012" +
    "\040\u0119\046\014\047\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private int mainCount = 0;

    private Arbol arbol;

    private int bloqueActual = 0;

    private boolean dataSectionGenerated = false;

    private boolean textSectionGenerated = false;

    StringBuffer codMIPS = new StringBuffer();
    StringBuffer dataSection = new StringBuffer();
    int currentTemp = 1;

   public String newTemp() {
           return "$t" + currentTemp++;
       }

       public void gen(String instruction) {
              System.out.println("Generando instrucción: " + instruction);
              codMIPS.append(instruction).append("\n");
          }

        public void imprimirCodigoMIPS() {
            StringBuilder codigoCompleto = new StringBuilder();
            if (dataSectionGenerated) {
                codigoCompleto.append(dataSection.toString()).append("\n");
            }
            if (textSectionGenerated) {
                codigoCompleto.append(codMIPS.toString());
            }
            System.out.println("\n\nCÓDIGO MIPS:");
            System.out.println(codigoCompleto.toString());
        }

        public void asignarCodigoMIPS(String id, String temp) {
                if (id == null || temp == null) {
                    System.err.println("Error: id o temp no pueden ser nulos");
                    return;
                }
                gen("la $t0, " + id);  // Cargar la dirección de la variable en $t0
                gen("lw $t1, " + temp); // Cargar el valor del temporal en $t1
                gen("sw $t1, 0($t0)");  // Guardar el valor en la dirección de la variable
               // imprimirCodigoMIPS();
       }

        public void declararString(String id, String valor) {
            if (!dataSectionGenerated) {
                dataSection.append(".data\n"); // Asegurarse de que la sección .data se genere al inicio
                dataSectionGenerated = true;
            }
            dataSection.append(id + ": .asciiz \"" + valor + "\"\n");}


        public void usarString(String id, String registro) {
            gen("la " + registro + ", " + id); // Cargar la dirección del string en un registro
        }

       public void textSection() {
           if (!textSectionGenerated) {
                 gen(".text");
                 gen(".globl main");
                 gen("main:");
                 gen("j _verano_");
                 textSectionGenerated = true;
                 textSectionGenerated = true;
           }
         }

    private Map<String, String> variableToRegister = new HashMap<>();

    public String getOrAssignRegister(String variable) {
        if (!variableToRegister.containsKey(variable)) {
            String temp = newTemp(); // Asignar un nuevo registro temporal
            variableToRegister.put(variable, temp);
        }
        return variableToRegister.get(variable);
    }

    public String obtenerValorString(String id) {
        // Buscar el string declarado en .data y devolver su valor
        String data = dataSection.toString();
        for (String line : data.split("\n")) {
            if (line.startsWith(id + ":")) {
                int start = line.indexOf("\"") + 1;
                int end = line.lastIndexOf("\"");
                if (start > 0 && end > start) {
                    return line.substring(start, end);
                }
            }
        }
        return ""; // Retornar vacío si no se encuentra
    }

    public void guardarCodigoMIPS(String archivoSalida) {
        try (FileWriter writer = new FileWriter(archivoSalida)) {
            StringBuilder codigoCompleto = new StringBuilder();
            if (dataSectionGenerated) {
                codigoCompleto.append(dataSection.toString()).append("\n");
            }
            if (textSectionGenerated) {
                codigoCompleto.append(codMIPS.toString());
            }
            // Guardar el contenido del código MIPS generado
            writer.write(codigoCompleto.toString());
            System.out.println("El código MIPS ha sido guardado en el archivo: " + archivoSalida);
        } catch (IOException e) {
            System.err.println("Error escribiendo en el archivo: " + e.getMessage());
        }
    }

    public String getTipo(ArrayList<String> listaTablasSimbolos, String id, int line, int column) {
        if (listaTablasSimbolos == null) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": La tabla de símbolos está vacía o no inicializada.");
            return "null";
        }

        String tipo = "null";

        for (String token : listaTablasSimbolos) {
            // Divide el token en columnas usando "|" como delimitador
            String[] partesToken = token.split("\\|");
            if (partesToken.length < 5) { // Verifica que haya al menos 5 columnas
                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                   ": Formato inválido en token: " + token);
                continue;
            }
            String lexema = partesToken[3].trim(); // Columna "Lexema"
            String tipoEncontrado = partesToken[4].trim(); // Columna "Tipo"

            // Compara el lexema con el id que estamos buscando
            if (id.equals(lexema)) {
                tipo = tipoEncontrado;
                break;
            }
        }

        if (tipo.equals("null")) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": Identificador '" + id + "' no está declarado.");
        }

        return tipo;
    }
    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    public void verificarMain() {
        if (mainCount == 0) {
            System.err.println("Error semántico: No se declaró ninguna función 'main' (_verano_).");
            errorCount++;
        } else if (mainCount > 1) {
            System.err.println("Error semántico: Se declaró más de una función 'main' (_verano_).");
            errorCount++;
        } else {
            System.out.println("Análisis correcto: Se declaró una única función 'main' (_verano_).");
        }
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       | Bloque    |");
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+-----------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        bloqueActual = 1;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s | Bloque %-3d |",
                linea + 1, columna + 1, lexema, tipo, bloqueActual);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= lista_funciones error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= lista_funciones funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_funciones ::= funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_funciones ::= lista_funciones error funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= cabecera_funcion 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= cabecera_main 
            {
              Object RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_main ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_main ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    parser.agregarTablaSimbolos("main", "_verano_");
                    parser.agregarVariable(symbol.left, symbol.right, "_verano_", ((Resultado) t).tipo);

                    // Incrementar el contador de main
                    parser.mainCount++;
                    textSection();
                    // Generar la etiqueta del main
                    parser.gen("\n# Inicio del main (_verano_)\n_verano_:");

                    // Guardar el valor de retorno y marco de pila
                    parser.gen("addi $sp, $sp, -8");  // Reservar espacio para $ra y $fp
                    parser.gen("sw $ra, 4($sp)");    // Guardar $ra en la pila
                    parser.gen("sw $fp, 0($sp)");    // Guardar $fp en la pila
                    parser.gen("move $fp, $sp");    // Actualizar el marco de pila
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera_main ::= tipo MAIN NT$0 declaracion_main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    // Restaurar registros y finalizar el programa
                    parser.gen("\n# Fin del main (_verano_)");
                    parser.gen("move $sp, $fp");
                    parser.gen("lw $ra, 4($sp)");  // Restaurar $ra
                    parser.gen("lw $fp, 0($sp)");  // Restaurar $fp
                    parser.gen("addi $sp, $sp, 8"); // Restaurar el espacio en la pila
                    parser.gen("li $v0, 10");       // Syscall para terminar el programa
                    parser.gen("syscall");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera_main ::= error MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funcion ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_funcion ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                       Symbol symbol = (Symbol) CUP$parser$stack.peek();
                       parser.agregarTablaSimbolos("funcion", id.toString());
                       parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                       textSection();
                       // Generar la etiqueta de la función
                       parser.gen("\n# Inicio de la función " + id.toString() + "\n" + id.toString() + ":");

                       // Guardar el valor de retorno y marco de pila
                       parser.gen("addi $sp, $sp, -8");  // Reservar espacio para $ra y $fp
                       parser.gen("sw $ra, 4($sp)");    // Guardar $ra en la pila
                       parser.gen("sw $fp, 0($sp)");    // Guardar $fp en la pila
                       parser.gen("move $fp, $sp");    // Actualizar el marco de pila
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera_funcion ::= tipo IDENTIFICADOR NT$1 declaracion_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       // Restaurar registros y salir de la función
                       parser.gen("\n# Fin de la función " + id.toString());
                       parser.gen("move $sp, $fp");
                       parser.gen("lw $ra, 4($sp)");  // Restaurar $ra
                       parser.gen("lw $fp, 0($sp)");  // Restaurar $fp
                       parser.gen("addi $sp, $sp, 8"); // Restaurar el espacio en la pila
                       parser.gen("jr $ra");          // Regresar al llamador
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera_funcion ::= error IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= corcheteIzquierdo NT$2 lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque ::= corcheteIzquierdo NT$3 return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;

                        parser.bloqueActual++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloqueEstructura ::= corcheteIzquierdo NT$4 contenido_estructura_control 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloqueEstructura ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenido_estructura_control ::= corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenido_estructura_control ::= lista_sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenido_estructura_control ::= lista_sentencias return_estructura_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenido_estructura_control ::= return_estructura_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_sentencias ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en una sentencia."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= print FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= read FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // print ::= PRINT PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
        int line = symbol.left;
        int column = symbol.right;

        // Obtener el tipo y temporal de la expresión
        String tipo = (e instanceof Resultado)
            ? ((Resultado) e).tipo
            : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), line, column);
        String temp = (e instanceof Resultado) ? ((Resultado) e).temp : null;

        // Validar que el tipo sea compatible con `print`
        if ((!tipo.equals("rodolfo") && !tipo.equals("bromista")) && !tipo.equals("cupido") && !tipo.equals("cometa")) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": Solo puede usar el print con enteros, flotantes, cadenas y caracteres.");
        } else {
            if (temp != null) {
                parser.gen("move $a0, " + temp);
                switch (tipo) {
                    case "rodolfo": // Entero
                        parser.gen("li $v0, 1");
                        break;
                    case "bromista": // Flotante
                        parser.gen("li $v0, 2");
                        break;
                    case "cometa": // Cadena
                        parser.gen("li $v0, 4");
                        break;
                    case "cupido": // Carácter
                        parser.gen("li $v0, 11");
                        break;
                }
                parser.gen("syscall");
            }
        }

        RESULT = new Resultado(tipo, temp);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // read ::= READ PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
        int line = symbol.left;
        int column = symbol.right;

        String tipo = (e instanceof Resultado)
            ? ((Resultado) e).tipo
            : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), line, column);
        String temp = (e instanceof Resultado) ? ((Resultado) e).temp : null;

        if ((!tipo.equals("rodolfo") && !tipo.equals("bromista"))) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": El read solo lee enteros o flotantes.");
        } else {
            String tempRead = parser.newTemp();
            switch (tipo) {
                case "rodolfo":
                    parser.gen("li $v0, 5");
                    break;
                case "bromista":
                    parser.gen("li $v0, 6");
                    break;
            }
            parser.gen("syscall");
            parser.gen("move " + tempRead + ", $v0");

            if (temp != null) {
                parser.asignarCodigoMIPS(temp, tempRead);
            }

            RESULT = new Resultado(tipo, tempRead);
        }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

        String tipoVar = ((Resultado) t).tipo;

        if (tipoVar.equals("cometa")) {
            // Declarar el string en .data
            parser.declararString(id.toString(), " ");
        } else {
            // Asignar la variable a un registro temporal
            String reg = parser.getOrAssignRegister(id.toString());
            parser.gen("li " + reg + ", 0"); // Inicializar el registro con 0
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();

        String tipoVar = ((Resultado) t).tipo;
        String tipoExpresion = ((Resultado) e).tipo;

        if (tipoVar.equals("cometa")) {
            // Usar el identificador del string directamente
            String idString = ((Resultado) e).temp;

            // Declarar el string (si aún no existe) en .data
            parser.declararString(id.toString(), parser.obtenerValorString(idString));

            // Referenciarlo en .text
            parser.gen("la $a0, " + id.toString()); // Cargar la dirección del string
            parser.gen("li $v0, 4");     // Syscall para imprimir cadenas
            parser.gen("syscall");
        } else {
            // Asignar la variable a un registro temporal y asignar el valor
            String reg = parser.getOrAssignRegister(id.toString());
            parser.gen("move " + reg + ", " + ((Resultado) e).temp);
        }

        // Validación semántica de tipos
        int line = symbol.left;
        int column = symbol.right;

        if (!((Resultado) t).tipo.equals(((Resultado) e).tipo)) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": Tipo incompatible en asignación. Variable '" + id +
                               "' es de tipo " + ((Resultado) t).tipo + ", pero se le asignó un valor de tipo " + ((Resultado) e).tipo + ".");
        } else {
            System.out.println("Asignación válida: '" + id + "' de tipo '" + ((Resultado) t).tipo +
                               "' con valor de tipo '" + ((Resultado) e).tipo + "'.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= tipo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new Resultado("rodolfo", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Resultado("cometa", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Resultado("cupido", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Resultado("bromista", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Resultado("trueno", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Obtener el símbolo para extraer línea y columna
                Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                int line = symbol.left;
                int column = symbol.right;

                // Obtener el tipo del identificador
                String tipoIdentificador = parser.getTipo(
                        parser.listaTablasSimbolos.get(parser.currentHash), id.toString(), line, column);

                // Obtener el tipo y temporal de la expresión
                Resultado resultadoExp = (Resultado) exp;
                String tipoExpresion = resultadoExp.tipo;
                String tempExpresion = resultadoExp.temp;
                // Validar tipos
                if (!tipoIdentificador.equals(tipoExpresion)) {
                    System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                       ": Asignación inválida. Variable '" + id +
                                       "' es de tipo " + tipoIdentificador + ", pero se le asignó un valor de tipo " + tipoExpresion + ".");
                } else {
                    System.out.println("Asignación válida: '" + id + "' de tipo '" + tipoIdentificador +
                                       "' con valor de tipo '" + tipoExpresion + "'.");

                    // Generación de código MIPS
                    if (tempExpresion != null) {
                        parser.gen("la $t0, " + id);
                        parser.gen("lw $t1, " + tempExpresion);
                        parser.gen("sw $t1, 0($t0)");
                    } else {
                        System.err.println("Error: El temporal de la expresión es null.");
                    }
                }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion ::= IDENTIFICADOR ASIGNA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= literal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 // Obtener el símbolo directamente desde el stack
                 Symbol symbol = (Symbol) CUP$parser$stack.peek();
                 int line = symbol.left;
                 int column = symbol.right;

                 String tipo = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), line, column);
                 String temp = parser.newTemp();
                parser.gen("lw " + temp + ", " + e);
                 // Asignar el tipo y el temporal al resultado
                 RESULT = new Resultado(tipo, temp);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion operador_unario 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 // Obtener el símbolo correspondiente a `e1` para extraer línea y columna
                 Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
                 int line = symbol.left;
                 int column = symbol.right;

                 // Obtener el tipo y el temporal de la expresión
                 Resultado resultadoE1 = (Resultado) e1;
                 String tipo = resultadoE1.tipo;
                 String tempE1 = resultadoE1.temp;

                 // Validar tipos para operadores unarios
                 if (op.toString().equals("quien") || op.toString().equals("grinch")) {
                     if (!tipo.equals("rodolfo")) {
                         System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                            ": Incremento/Decremento solo aplica a enteros (rodolfo).");
                     }
                 } else if (op.toString().equals("-") && !tipo.equals("rodolfo") && !tipo.equals("bromista")) {
                     System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                        ": Negación solo aplica a enteros o flotantes.");
                 }

                 // Generar el temporal para la operación unaria
                 String tempResultado = parser.newTemp();

                 // Generación de código MIPS para los operadores unarios
                 if (op.toString().equals("-")) { // Negación
                     parser.gen("neg " + tempResultado + ", " + tempE1); // Negar el valor del temporal
                 } else if (op.toString().equals("quien")) { // Incremento
                     parser.gen("addi " + tempResultado + ", " + tempE1 + ", 1"); // Incrementar en 1
                 } else if (op.toString().equals("grinch")) { // Decremento
                     parser.gen("subi " + tempResultado + ", " + tempE1 + ", 1"); // Decrementar en 1
                 }
                 RESULT = new Resultado(tipo, tempResultado);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion operador_binario expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
               Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
               Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);

               int line1 = symbol1.left;
               int column1 = symbol1.right;
               int line2 = symbol2.left;
               int column2 = symbol2.right;

               // Acceder a los tipos de los operandos desde los objetos Resultado
               String tipo1 = ((Resultado) e1).tipo;
               String tipo2 = ((Resultado) e2).tipo;

               // Debug: Verificar los tipos antes de la evaluación
              // System.out.println("DEBUG - e1: " + tipo1  + ", tipo2: " + tipo2);

               // Validar los tipos de los operandos
               if ((!tipo1.equals("rodolfo") && !tipo1.equals("bromista")) ||
                   (!tipo2.equals("rodolfo") && !tipo2.equals("bromista"))) {
                   System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                      ": Operandos deben ser enteros (rodolfo) o flotantes (bromista).");
               } else if (!tipo1.equals(tipo2)) {
                   System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                      ": Tipos incompatibles entre los operandos. Operando 1: " + tipo1 + ", Operando 2: " + tipo2);
               }else {
                   String tipoResultado = tipo1.equals("bromista") ? "bromista" : "rodolfo";

                   String temp1 = ((Resultado) e1).temp;
                   String temp2 = ((Resultado) e2).temp;
                   String tempResultado = parser.newTemp();


                   System.out.println("Expresion1: " + e1);
                   switch (((Resultado) op).tipo) {
                            case "navidad": // Suma
                                  parser.gen("add " + tempResultado + ", " + temp1 + ", " + temp2);  // Suma
                                  break;
                            case "intercambio": // Resta
                                  parser.gen("sub " + tempResultado + ", " + temp1 + ", " + temp2);  // Resta
                                  break;
                           case "nochebuena": // Multiplicación
                                 parser.gen("mul " + tempResultado + ", " + temp1 + ", " + temp2);  // Multiplicación
                                 break;
                           case "reyes": // División
                                 parser.gen("div " + temp1 + ", " + temp2);  // División
                                 parser.gen("mflo " + tempResultado);  // Guardar el resultado en el temporal
                                 break;
                           case "magos": // Módulo
                                 parser.gen("div " + temp1 + ", " + temp2);  // División para obtener el resto
                                 parser.gen("mfhi " + tempResultado);  // El resto se guarda en mfhi
                                 break;
                           case "adviento": // Potencia
                                 //Hay que bucar a que traduce en MIPS
                                 break;
                           default:
                                 System.err.println("Error: Operación binaria no soportada.");
                                  }

                         RESULT = new Resultado(tipoResultado, tempResultado);

                         // Llamar a asignarCodigoMIPS después de todas las operaciones para almacenar el resultado en la variable
                         parser.asignarCodigoMIPS("resultado", tempResultado);

               }
               // Definir el tipo resultante basado en los operandos
               String tipoResultado = tipo1.equals("bromista") ? "bromista" : "rodolfo";

               // Generar un temporal para la operación
               String temp1 = ((Resultado) e1).temp;
               String temp2 = ((Resultado) e2).temp;
               String tempResult = parser.newTemp();

               // Asignar el resultado con el tipo y el temporal generado
               RESULT = new Resultado(tipoResultado, tempResult);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
                Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                int line1 = symbol1.left;
                int column1 = symbol1.right;
                int line2 = symbol2.left;
                int column2 = symbol2.right;
                String operador = ((Resultado) op).tipo;
                // Obtener los tipos desde los objetos Resultado
                if (e1 == null) {
                    e1 = new Resultado("null", null);
                }
                if (e2 == null) {
                    e2 = new Resultado("null", null);
                }
                String tipo1 = ((Resultado) e1).tipo;
                String tipo2 = ((Resultado) e2).tipo;

                // Validar los tipos de los operandos
                if (op.toString().equals("mary") || op.toString().equals("openslae")) {
                    // Para `mary` y `openslae`, los tipos pueden ser enteros, flotantes o booleanos
                    if ((!tipo1.equals("rodolfo") && !tipo1.equals("bromista") && !tipo1.equals("trueno")) ||
                        (!tipo2.equals("rodolfo") && !tipo2.equals("bromista") && !tipo2.equals("trueno"))) {
                        System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                           ": Operadores '" + operador + "' solo admiten enteros (rodolfo), flotantes (bromista) o booleanos (trueno).");
                    } else if (!tipo1.equals(tipo2)) {
                        System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                           ": Tipos incompatibles para operador '" + operador + "'. Operando 1: " + tipo1 + ", Operando 2: " + tipo2);
                    } else {
                    // Asignar el tipo resultante para comparaciones relacionales
                    String temp1 = ((Resultado) e1).temp;
                    String temp2 = ((Resultado) e2).temp;
                    String tempResultado = parser.newTemp();

                    // Generación de código MIPS para la comparación
                    switch (operador) {
                        case "mary": // Igualdad
                            parser.gen("seq " + tempResultado + ", " + temp1 + ", " + temp2);
                            break;
                        case "openslae": // Diferente
                            parser.gen("sne " + tempResultado + ", " + temp1 + ", " + temp2);
                        default:
                            System.err.println("Error: Operador relacional no soportado.");
                    }
                    // Asignar el resultado con el tipo booleano (trueno) y el temporal generado
                    RESULT = new Resultado("trueno", tempResultado);
                    }
                } else {
                    // Validación para otros operadores relacionales
                    if ((!tipo1.equals("rodolfo") && !tipo1.equals("bromista")) ||
                        (!tipo2.equals("rodolfo") && !tipo2.equals("bromista"))) {
                        System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                           ": Operadores '" + operador + "' solo admiten enteros (rodolfo) o flotantes (bromista).");
                    } else if (!tipo1.equals(tipo2)) {
                        System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                           ": Tipos incompatibles entre los operandos. Operando 1: " + tipo1 + ", Operando 2: " + tipo2);
                    } else {
                        // Asignar el tipo resultante para comparaciones relacionales
                    String temp1 = ((Resultado) e1).temp;
                    String temp2 = ((Resultado) e2).temp;
                    String tempResultado = parser.newTemp();

                    // Generación de código MIPS para la comparación
                    switch (operador) {
                        case "snowball": // Menor que
                            parser.gen("slt " + tempResultado + ", " + temp1 + ", " + temp2);
                            break;
                        case "evergreen": // Menor o igual
                            parser.gen("sle " + tempResultado + ", " + temp1 + ", " + temp2);
                            break;
                        case "minstix": // Mayor que
                            parser.gen("sgt " + tempResultado + ", " + temp1 + ", " + temp2);
                            break;
                        case "upatree": // Mayor o igual
                            parser.gen("sge " + tempResultado + ", " + temp1 + ", " + temp2);
                            break;
                        default:
                            System.err.println("Error: Operador relacional no soportado.");
                    }

                    // Asignar el resultado con el tipo booleano (trueno) y el temporal generado
                    RESULT = new Resultado("trueno", tempResultado);
                    }
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
                       Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                       Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                       int line1 = symbol1.left;
                       int column1 = symbol1.right;
                       int line2 = symbol2.left;
                       int column2 = symbol2.right;

                       // Validar que `e1` y `e2` no sean nulos
                       if (e1 == null) {
                           e1 = new Resultado("null", null);
                       }
                       if (e2 == null) {
                           e2 = new Resultado("null", null);
                       }

                       // Obtener los tipos desde los objetos Resultado
                       String tipo1 = ((Resultado) e1).tipo;
                       String tipo2 = ((Resultado) e2).tipo;

                       // Verificar que ambos operandos sean booleanos
                       if (!tipo1.equals("trueno") || !tipo2.equals("trueno")) {
                           System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                              ": Operadores lógicos requieren valores booleanos (trueno).");
                       } else {
                           // Generar código MIPS para operadores lógicos
                           String temp1 = ((Resultado) e1).temp;
                           String temp2 = ((Resultado) e2).temp;
                           String tempResultado = parser.newTemp();

                           switch (((Resultado) op).tipo) {
                               case "melchor": // AND lógico
                                   parser.gen("and " + tempResultado + ", " + temp1 + ", " + temp2);
                                   break;
                               case "gaspar": // OR lógico
                                   parser.gen("or " + tempResultado + ", " + temp1 + ", " + temp2);
                                   break;
                               default:
                                   System.err.println("Error: Operador lógico no soportado.");
                           }

                           // Asignar el resultado con el tipo booleano (trueno) y el temporal generado
                           RESULT = new Resultado("trueno", tempResultado);
                       }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               Symbol symbol = (Symbol) CUP$parser$stack.peek();
               int line = symbol.left;
               int column = symbol.right;

                String temp = parser.newTemp();
                         String tempExpr = ((Resultado) e).temp;
                         String tempResultado = parser.newTemp();

                         parser.gen("not " + temp + ", " + tempExpr);
                         RESULT = new Resultado("trueno", temp);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
        parser.gen("li " + temp + ", " + symbol.value);
        RESULT = new Resultado("rodolfo", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
        parser.gen("li.s " + temp + ", " + symbol.value);
        RESULT = new Resultado("bromista", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Symbol symbol = (Symbol) CUP$parser$stack.peek();
              String id = "_string_" + parser.currentTemp++;  // Generar un identificador único válido

              // Declarar el string en la sección .data con el valor correcto
              parser.declararString(id, symbol.value.toString());

              // Devolver un resultado con el tipo y el identificador del string
              RESULT = new Resultado("cometa", id);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
        parser.gen("li " + temp + ", '" + symbol.value + "'");
        RESULT = new Resultado("cupido", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "trueno");
        parser.gen("li " + temp + ", 1");
        RESULT = new Resultado("trueno", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "trueno");
        parser.gen("li " + temp + ", 0");
        RESULT = new Resultado("trueno", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_binario ::= SUMA 
            {
              Object RESULT =null;
		RESULT = new Resultado("navidad", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_binario ::= RESTA 
            {
              Object RESULT =null;
		RESULT = new Resultado("intercambio", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;
		RESULT = new Resultado("reyes", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT = new Resultado("nochebuena", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_binario ::= MODULO 
            {
              Object RESULT =null;
		RESULT = new Resultado("magos", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT = new Resultado("adviento", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT = new Resultado("quien", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT = new Resultado("grinch", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_unario ::= NEGATIVO 
            {
              Object RESULT =null;
		RESULT = new Resultado("-", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT = new Resultado("melchor", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT = new Resultado("gaspar", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_logico ::= NEGACION 
            {
              Object RESULT =null;
		RESULT = new Resultado("baltazar", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT = new Resultado("snowball", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("evergreen", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT = new Resultado("minstix", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("upatree", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("mary", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT = new Resultado("openslae", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // estructura_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  String etiquetaTrue = "_etiqueta_true_" + parser.currentTemp++;
                  String etiquetaEnd = "_etiqueta_end_" + parser.currentTemp++;

                  parser.gen("bne " + ((Resultado) e).temp + ", $zero, " + etiquetaTrue);
                  parser.gen("j " + etiquetaEnd);

                  parser.gen(etiquetaTrue + ":");
                 if (b != null && b.toString().trim().length() > 0) {
                             parser.gen(b.toString());
                 } else {
                          System.err.println("Error: Bloque vacío en if.");
                  }
                    parser.gen(etiquetaEnd + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b_elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b_elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b_else = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String etiquetaTrue = "_etiqueta_true_" + parser.currentTemp++;
                    String etiquetaElse = "_etiqueta_else_" + parser.currentTemp++;
                    String etiquetaEnd = "_etiqueta_end_" + parser.currentTemp++;

                    // Generar las etiquetas y condición para el if
                    parser.gen("bne " + ((Resultado) e).temp + ", $zero, " + etiquetaTrue);
                    parser.gen("j " + etiquetaElse);

                    // Etiqueta para el bloque if
                    parser.gen(etiquetaTrue + ":");
                    if (b != null && !b.toString().trim().isEmpty()) {
                              parser.gen(b.toString());
                    } else {
                               System.err.println("error: Bloque 'if' vacío.");
                    }
                       parser.gen("j " + etiquetaEnd);

                       // Etiqueta para el bloque else
                       parser.gen(etiquetaElse + ":");
                      if (b_else != null && !b_else.toString().trim().isEmpty()) {
                             parser.gen(b_else.toString());
                       } else {
                              System.err.println("error: Bloque 'else' vacío.");
                       }

                      parser.gen(etiquetaEnd + ":");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE error ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_stmt ::= WHILE PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_stmt ::= FOR PARENTESISAPERTURA declaracion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_stmt ::= FOR PARENTESISAPERTURA asignacion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_stmt ::= FOR PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list default_stmt corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // switch_stmt ::= SWITCH PARENTESISAPERTURA error PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_list ::= case_list error case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_stmt ::= CASE expresion DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_stmt ::= CASE error DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // default_stmt ::= DEFAULT DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // default_stmt ::= DEFAULT error lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         Symbol symbol = (Symbol) CUP$parser$stack.peek();
                         parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

                         // Validación del tipo permitido
                         if (!((Resultado) t).tipo.equals("rodolfo") && !((Resultado) t).tipo.equals("cupido")) {
                             System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                                 ": Solo se permiten variables de tipo 'rodolfo' (int) o 'cupido' (char).");
                         } else {
                             System.out.println("Declaración válida: arreglo '" + id + "' de tipo '" + ((Resultado) t).tipo + "'.");
                         }
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

                    String tipoExpresion = (e instanceof Resultado)
                        ? ((Resultado) e).tipo
                        : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), symbol.left, symbol.right);

                    // Validación de compatibilidad de tipos
                    if (!((Resultado) t).tipo.equals(tipoExpresion)) {
                        System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                           ": Incompatibilidad de tipos. La variable '" + id + "' es de tipo '" + ((Resultado) t).tipo +
                                           "', pero se le asignó una expresión de tipo '" + tipoExpresion + "'.");
                    } else if (!((Resultado) t).tipo.equals("rodolfo") && !((Resultado) t).tipo.equals("cupido")) {
                         System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                             ": Solo se permiten asignaciones a variables de tipo 'rodolfo' (int) o 'cupido' (char).");
                    } else {
                        // Generación de código MIPS para asignación
                        String temp = ((Resultado) e).temp;
                        parser.gen("la $t0, " + id);
                        parser.gen("sw " + temp + ", 0($t0)");
                        System.out.println("Asignación a arreglo válida: '" + id + "'.");
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA corcheteIzquierdo parametrosArreglos corcheteDerecho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                        System.out.println("Declaración y asignación de arreglo inicializado: '" + id + "'.");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        String tipoExpresion = (e instanceof Resultado)
                            ? ((Resultado) e).tipo
                            : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), symbol.left, symbol.right);
                        if (tipoExpresion != null) {
                            String temp = ((Resultado) e).temp;
                            parser.gen("la $t0, " + id);
                            parser.gen("sw " + temp + ", 0($t0)");
                            System.out.println("Asignación directa a arreglo válida: '" + id + "'.");
                        } else {
                            System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                               ": El valor asignado al arreglo no tiene un tipo válido.");
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametrosArreglos ::= parametrosArreglosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$5 ::= 
            {
              Object RESULT =null;

                              // Generar un resultado con el separador de coma para unir parámetros
                              RESULT = new Resultado(",", null);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametrosArreglosAux ::= parametrosArreglosAux COMA NT$5 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              // Validar y asignar el resultado de la expresión
                              if (e instanceof Resultado) {
                                  Resultado resExp = (Resultado) e;
                                  if (resExp.tipo == null) {
                                      System.err.println("Error semantico: La expresión del parámetro no tiene un tipo válido.");
                                  }
                                  RESULT = resExp;
                              } else {
                                  System.err.println("Error semantico: El resultado de la expresión no es válido.");
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametrosArreglosAux ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              // Validar y asignar el resultado de la expresión directamente
                              if (e instanceof Resultado) {
                                  Resultado resExp = (Resultado) e;
                                  if (resExp.tipo == null) {
                                      System.err.println("Error semantico: La expresión del parámetro no tiene un tipo válido.");
                                  }
                                  RESULT = resExp;
                              } else {
                                  System.err.println("Error semantico: El resultado de la expresión no es válido.");
                              }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arreglo ::= declaracionArreglo 
            {
              Object RESULT =null;
		
                RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arreglo ::= arreglo declaracionArreglo 
            {
              Object RESULT =null;
		
                RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$6 ::= 
            {
              Object RESULT =null;

                        RESULT = new Resultado("abreempaque", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        if (e instanceof Resultado) {
                            Resultado resExp = (Resultado) e;
                            if (!"rodolfo".equals(resExp.tipo)) {
                                System.err.println("Error semántico: El índice del arreglo debe ser un entero (rodolfo), pero se encontró '" + resExp.tipo + "'.");
                            }
                            RESULT = resExp;
                        } else {
                            System.err.println("Error semántico: Expresión inválida en el índice del arreglo.");
                            RESULT = new Resultado("null", null);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // acceso_arreglo ::= CORCHETEAPERTURA NT$6 expresion NT$7 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new Resultado("cierraempaque", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // acceso_arreglo ::= CORCHETEAPERTURA error CORCHETECIERRE 
            {
              Object RESULT =null;
		
                        // Manejo de error en el índice del arreglo
                        System.err.println("Error sintáctico: Índice del arreglo inválido.");
                        RESULT = new Resultado("null", null); // Manejo seguro para errores
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_parametros ::= lista_parametros COMA tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lista_parametros ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lista_parametros ::= lista_parametros error tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // llamada_funcion ::= IDENTIFICADOR llamada_funcion_aux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        int line = symbol.left;
        int column = symbol.right;

        // Construir una tabla global combinada
        ArrayList<String> tablaGlobal = new ArrayList<>();
        parser.listaTablasSimbolos.values().forEach(tabla -> {
            if (tabla != null) tablaGlobal.addAll(tabla);
        });

        // Obtener el tipo de la función
        String tipoFuncion = parser.getTipo(tablaGlobal, id.toString(), line, column);

        if (tipoFuncion.equals("null")) {
            // Si no se encuentra la función, asignar un RESULT con tipo "null"
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": La función '" + id + "' no está declarada en ninguna tabla de símbolos.");
            RESULT = new Resultado("null", null);
        } else {
            // Generar un temporal para almacenar el resultado de la función (si no es void)
            String tempResultado = null;
            if (!tipoFuncion.equals("void")) {
                tempResultado = parser.newTemp();
                parser.gen("jal " + id);  // Llamada a la función
                parser.gen("move " + tempResultado + ", $v0");
            } else {
                parser.gen("jal " + id);
            }

            System.out.println("Invocación válida: " + id + " de tipo: " + tipoFuncion);
            RESULT = new Resultado(tipoFuncion, tempResultado);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // llamada_funcion_aux ::= PARENTESISAPERTURA lista_expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // llamada_funcion_aux ::= PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // llamada_funcion_aux ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$8 ::= 
            {
              Object RESULT =null;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_expresiones ::= lista_expresiones COMA NT$8 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lista_expresiones ::= lista_expresiones error expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // return_stmt ::= RETURN expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                int line = symbol.left;
                int column = symbol.right;

                // Obtener el tipo de la función actual usando `currentHash`
                String tipoFuncion = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), parser.currentHash, line, column);

                if (e == null) {
                    // Manejo de RETURN sin expresión
                    if (!tipoFuncion.equals("void")) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": La función requiere un valor de retorno de tipo '" + tipoFuncion + "', pero se encontró 'void'.");
                    } else {
                        System.out.println("Retorno válido: void en función de tipo void.");
                        parser.gen("jr $ra");  // Retornar a la dirección de retorno en MIPS
                        RESULT = new Resultado("void", null);
                    }
                } else {
                    // Manejo de RETURN con expresión
                    Resultado resultadoExpresion = (Resultado) e;
                    String tipoExpresion = resultadoExpresion.tipo;

                    // Comparar los tipos
                    if (!tipoFuncion.equals(tipoExpresion)) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": Tipo de retorno (" + tipoExpresion + ") no coincide con el tipo de la función (" + tipoFuncion + ").");
                    } else {
                        System.out.println("Retorno válido: tipo '" + tipoExpresion + "'.");

                        // Generar código MIPS para mover el valor de retorno a $v0
                        if (resultadoExpresion.temp != null) {
                            parser.gen("move $v0, " + resultadoExpresion.temp);
                        } else {
                            System.err.println("Error: El temporal para el valor de retorno es null.");
                        }
                        parser.gen("jr $ra");  // Retornar a la dirección de retorno en MIPS
                    }

                    RESULT = new Resultado(tipoExpresion, resultadoExpresion.temp);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		
                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    int line = symbol.left;
                    int column = symbol.right;

                    String tipoFuncion = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), parser.currentHash, line, column);

                    if (!tipoFuncion.equals("void")) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": La función requiere un valor de retorno de tipo '" + tipoFuncion + "', pero se encontró 'void'.");
                    } else {
                        System.out.println("Retorno válido en función de tipo void.");
                        parser.gen("jr $ra");
                        RESULT = new Resultado("void", null);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // return_stmt ::= RETURN error 
            {
              Object RESULT =null;
		
                    System.err.println("Error: Retorno inválido.");
                    RESULT = new Resultado("null", null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // return_estructura_stmt ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // return_estructura_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // return_estructura_stmt ::= RETURN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
