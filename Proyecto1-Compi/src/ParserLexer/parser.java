
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.io.File;
import Tree.Arbol;
import Tree.Nodo;
import V2024.Resultado;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\003\005\000\002\003\006\000\002" +
    "\065\002\000\002\046\006\000\002\046\007\000\002\034" +
    "\006\000\002\034\005\000\002\034\006\000\002\066\002" +
    "\000\002\047\006\000\002\047\010\000\002\067\002\000" +
    "\002\004\010\000\002\070\002\000\002\004\007\000\002" +
    "\004\005\000\002\004\003\000\002\071\002\000\002\045" +
    "\005\000\002\045\006\000\002\050\003\000\002\050\004" +
    "\000\002\050\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\006\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\052\006\000\002\053\006\000\002" +
    "\007\004\000\002\007\006\000\002\007\003\000\002\007" +
    "\004\000\002\007\007\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\010\006\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\004\000\002\056\006\000\002\056\007\000\002\056\011" +
    "\000\002\056\011\000\002\055\003\000\002\072\002\000" +
    "\002\055\006\000\002\057\003\000\002\073\002\000\002" +
    "\074\002\000\002\022\011\000\002\022\007\000\002\023" +
    "\005\000\002\060\004\000\002\062\004\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\075\002\000" +
    "\002\076\002\000\002\061\011\000\002\061\004\000\002" +
    "\024\006\000\002\024\005\000\002\024\011\000\002\063" +
    "\007\000\002\064\003\000\002\025\004\000\002\025\003" +
    "\000\002\025\005\000\002\077\002\000\002\026\007\000" +
    "\002\026\006\000\002\100\002\000\002\027\006\000\002" +
    "\042\005\000\002\042\004\000\002\042\007\000\002\042" +
    "\011\000\002\042\006\000\002\043\003\000\002\101\002" +
    "\000\002\044\006\000\002\044\003\000\002\031\003\000" +
    "\002\031\004\000\002\102\002\000\002\103\002\000\002" +
    "\032\007\000\002\032\005\000\002\035\003\000\002\036" +
    "\006\000\002\036\004\000\002\036\006\000\002\033\004" +
    "\000\002\051\005\000\002\051\004\000\002\051\005\000" +
    "\002\104\002\000\002\030\006\000\002\030\003\000\002" +
    "\030\005\000\002\037\004\000\002\037\003\000\002\037" +
    "\004\000\002\054\004\000\002\054\003\000\002\054\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\016\003\012\005\005\006\011\007\015\010" +
    "\006\011\017\001\002\000\004\002\u0137\001\002\000\010" +
    "\003\uffc9\004\uffc9\017\uffc9\001\002\000\010\003\uffc5\004" +
    "\uffc5\017\uffc5\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\020\002" +
    "\000\003\u0136\005\005\006\011\007\015\010\006\011\017" +
    "\001\002\000\010\003\uffc8\004\uffc8\017\uffc8\001\002\000" +
    "\024\003\u012a\004\u0128\005\005\006\011\007\015\010\006" +
    "\011\017\017\u012b\020\027\001\002\000\006\004\021\017" +
    "\020\001\002\000\020\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\001\002\000\010\003\uffc6\004" +
    "\uffc6\017\uffc6\001\002\000\020\002\ufff9\003\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002\000\010\003" +
    "\uffc7\004\uffc7\017\uffc7\001\002\000\004\027\uffef\001\002" +
    "\000\004\027\ufff5\001\002\000\004\027\024\001\002\000" +
    "\020\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\001\002\000\006\003\025\030\026\001\002\000" +
    "\004\030\u0111\001\002\000\006\003\030\020\027\001\002" +
    "\000\114\003\034\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec\024\uffec" +
    "\025\uffec\027\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec\050\uffec" +
    "\051\uffec\052\uffec\055\uffec\056\uffea\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002" +
    "\000\020\002\uffe7\003\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\001\002\000\020\002\ufff7\003\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002\000\004\056" +
    "\375\001\002\000\112\003\065\005\005\006\011\007\015" +
    "\010\006\011\017\012\120\013\036\014\040\015\053\017" +
    "\051\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\046" +
    "\062\050\103\051\050\052\076\055\073\060\117\061\101" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\004\021\035\001\002\000\020\002\uffe8\003\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\001\002\000" +
    "\100\003\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\016\uffb2\017\uffb2\021\uffb2\023\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\057\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002" +
    "\000\004\003\u010d\001\002\000\100\003\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\016\uffb1\017\uffb1\021\uffb1" +
    "\023\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\001\002\000\100\003\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\023\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\001\002\000\122\003\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\017\uff99\021\uff99\024\uff99\025\uff99\027" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\046\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\001" +
    "\002\000\062\003\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\017\uff9c\024\uff9c\025\uff9c\027\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\001" +
    "\002\000\004\053\324\001\002\000\062\003\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\017\uffac\024\uffac\025\uffac\027" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\001\002\000\100\003\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\016\uffc0\017\uffc0\021" +
    "\uffc0\023\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\057\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\001\002\000\004\003\u0103\001" +
    "\002\000\004\027\u0102\001\002\000\056\022\127\026\213" +
    "\027\135\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\001\002\000\062\003\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\017\uff9d\024\uff9d\025\uff9d\027\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\001\002\000\100\003\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\016\uffb0\017\uffb0\021\uffb0\023\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\057\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\001\002\000\122\003\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\017\uffd7\021\uffd7\024\uffd7\025\uffd7\027\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002\000\022\003" +
    "\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\017\uff6a" +
    "\045\uff6a\001\002\000\114\003\254\005\005\006\011\007" +
    "\015\010\006\011\017\012\120\013\036\014\040\015\053" +
    "\017\051\024\064\025\113\027\074\034\071\035\112\036" +
    "\077\037\104\040\052\041\043\042\106\043\111\044\067" +
    "\046\062\050\103\051\050\052\076\055\073\056\375\060" +
    "\117\061\101\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\004\003\373\001\002\000\004\045" +
    "\372\001\002\000\062\003\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\017\uffad\024\uffad\025\uffad\027\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\001\002\000\004\027\357\001\002\000\004\020\233" +
    "\001\002\000\100\003\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\016\uffaf\017\uffaf\021\uffaf\023\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\057\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\001\002\000\124\003\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\021\uffdb\024\uffdb\025\uffdb\027\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\257\046\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\062" +
    "\003\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\024" +
    "\uffa9\025\uffa9\027\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\001\002\000\062" +
    "\003\uffa2\012\120\013\036\014\040\015\053\017\133\024" +
    "\064\025\113\027\074\034\071\035\112\036\077\037\104" +
    "\040\052\041\043\042\106\043\111\044\067\062\061\063" +
    "\045\064\114\065\121\066\066\067\100\001\002\000\050" +
    "\031\153\032\154\033\147\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\150\045\347" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\062\003\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\017\uffa1\024\uffa1\025\uffa1\027\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\001" +
    "\002\000\122\003\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a\021" +
    "\uff9a\024\uff9a\025\uff9a\027\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\046" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\001\002\000\004\045\346\001\002" +
    "\000\062\003\343\012\120\013\036\014\040\015\053\017" +
    "\133\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\062" +
    "\061\063\045\064\114\065\121\066\066\067\100\001\002" +
    "\000\122\003\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\017\uff98\021\uff98" +
    "\024\uff98\025\uff98\027\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\046\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98" +
    "\066\uff98\067\uff98\001\002\000\004\027\315\001\002\000" +
    "\062\003\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f" +
    "\024\uff9f\025\uff9f\027\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\001\002\000" +
    "\062\003\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002\000" +
    "\004\027\312\001\002\000\006\003\305\017\306\001\002" +
    "\000\004\027\274\001\002\000\062\003\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\017\uff9e\024\uff9e\025\uff9e\027\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\001\002\000\122\003\256\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\027\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000" +
    "\062\003\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4" +
    "\024\uffa4\025\uffa4\027\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\001\002\000" +
    "\004\045\273\001\002\000\122\003\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\017\uff9b\021\uff9b\024\uff9b\025\uff9b\027\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\001\002\000\062" +
    "\003\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\017\uffa3\024" +
    "\uffa3\025\uffa3\027\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\001\002\000\062" +
    "\003\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\024" +
    "\uffa0\025\uffa0\027\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\001\002\000\100" +
    "\003\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\016" +
    "\uffae\017\uffae\021\uffae\023\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\057\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\001\002\000" +
    "\062\003\uffab\012\uffab\013\uffab\014\uffab\015\uffab\017\uffab" +
    "\024\uffab\025\uffab\027\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\001\002\000" +
    "\004\045\272\001\002\000\004\045\271\001\002\000\004" +
    "\027\266\001\002\000\100\003\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\057\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\001\002\000\062\003\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\017\uffaa\024\uffaa\025\uffaa\027\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\001\002\000\020\003\211\005\005\006\011" +
    "\007\015\010\006\011\017\017\212\001\002\000\022\003" +
    "\uffcc\005\005\006\011\007\015\010\006\011\017\017\126" +
    "\045\uffcc\001\002\000\022\003\uff69\005\uff69\006\uff69\007" +
    "\uff69\010\uff69\011\uff69\017\uff69\045\uff69\001\002\000\004" +
    "\017\172\001\002\000\004\022\127\001\002\000\062\003" +
    "\164\012\uff68\013\uff68\014\uff68\015\uff68\017\uff68\024\uff68" +
    "\025\uff68\027\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040" +
    "\uff68\041\uff68\042\uff68\043\uff68\044\uff68\062\uff68\063\uff68" +
    "\064\uff68\065\uff68\066\uff68\067\uff68\001\002\000\024\003" +
    "\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\017\uff72" +
    "\026\131\045\uff72\001\002\000\060\012\120\013\036\014" +
    "\040\015\053\017\133\024\064\025\113\027\074\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\067\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\066\003\uff6f\005\uff6f\006\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\017\uff6f\031\153\032\154\033\147" +
    "\034\071\035\112\036\077\037\104\040\052\041\043\042" +
    "\106\043\111\044\150\045\uff6f\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\102\003\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\023\uffbf\027\135\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\057\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000\100" +
    "\003\uff60\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60\016" +
    "\uff60\017\uff60\021\uff60\023\uff60\030\uff60\031\uff60\032\uff60" +
    "\033\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041" +
    "\uff60\042\uff60\043\uff60\044\uff60\045\uff60\057\uff60\062\uff60" +
    "\063\uff60\064\uff60\065\uff60\066\uff60\067\uff60\001\002\000" +
    "\064\003\140\012\120\013\036\014\040\015\053\017\133" +
    "\024\064\025\113\027\074\030\141\034\071\035\112\036" +
    "\077\037\104\040\052\041\043\042\106\043\111\044\067" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\054\003\uff5a\016\uff5a\030\uff5a\031\153\032\154" +
    "\033\147\034\071\035\112\036\077\037\104\040\052\041" +
    "\043\042\106\043\111\044\150\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\010\003\144\016" +
    "\143\030\145\001\002\000\004\030\142\001\002\000\100" +
    "\003\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\016" +
    "\uff5e\017\uff5e\021\uff5e\023\uff5e\030\uff5e\031\uff5e\032\uff5e" +
    "\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041" +
    "\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\057\uff5e\062\uff5e" +
    "\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e\001\002\000" +
    "\100\003\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d" +
    "\016\uff5d\017\uff5d\021\uff5d\023\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\057\uff5d\062" +
    "\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\001\002" +
    "\000\060\012\uff5c\013\uff5c\014\uff5c\015\uff5c\017\uff5c\024" +
    "\uff5c\025\uff5c\027\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\062\uff5c\063" +
    "\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c\001\002\000\060" +
    "\012\120\013\036\014\040\015\053\017\133\024\064\025" +
    "\113\027\074\034\071\035\112\036\077\037\104\040\052" +
    "\041\043\042\106\043\111\044\067\062\061\063\045\064" +
    "\114\065\121\066\066\067\100\001\002\000\100\003\uff5f" +
    "\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\016\uff5f\017" +
    "\uff5f\021\uff5f\023\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f" +
    "\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\057\uff5f\062\uff5f\063\uff5f" +
    "\064\uff5f\065\uff5f\066\uff5f\067\uff5f\001\002\000\054\003" +
    "\uff59\016\uff59\030\uff59\031\153\032\154\033\147\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\150\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\100\003\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\016\uffa5\017\uffa5\021\uffa5\023\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\001\002\000\060\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\017\uffa2\024\uffa2\025\uffa2\027\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\001\002\000\060\012\120\013\036\014\040\015\053" +
    "\017\133\024\064\025\113\027\074\034\071\035\112\036" +
    "\077\037\104\040\052\041\043\042\106\043\111\044\067" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\100\003\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\016\uffbd\017\uffbd\021\uffbd\023\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\057" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd" +
    "\001\002\000\100\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\016\uffa7\017\uffa7\021\uffa7\023\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\057\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\001\002\000\100\003\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\016\uffa6\017\uffa6\021\uffa6\023\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\057\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\001\002\000\060\012\120\013\036\014\040\015" +
    "\053\017\133\024\064\025\113\027\074\034\071\035\112" +
    "\036\077\037\104\040\052\041\043\042\106\043\111\044" +
    "\067\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\060\012\120\013\036\014\040\015\053\017" +
    "\133\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\062" +
    "\061\063\045\064\114\065\121\066\066\067\100\001\002" +
    "\000\100\003\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\016\uffba\017\uffba\021\uffba\023\uffba\030\uffba\031\153" +
    "\032\154\033\147\034\071\035\112\036\077\037\104\040" +
    "\052\041\043\042\106\043\111\044\150\045\uffba\057\uffba" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\100\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\016\uffbc\017\uffbc\021\uffbc\023\uffbc\030\uffbc\031" +
    "\153\032\154\033\147\034\071\035\112\036\077\037\104" +
    "\040\052\041\043\042\106\043\111\044\150\045\uffbc\057" +
    "\uffbc\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\100\003\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb\030\uffbb" +
    "\031\153\032\154\033\147\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\150\045\uffbb" +
    "\057\uffbb\062\061\063\045\064\114\065\121\066\066\067" +
    "\100\001\002\000\060\012\120\013\036\014\040\015\053" +
    "\017\133\024\064\025\113\027\074\034\071\035\112\036" +
    "\077\037\104\040\052\041\043\042\106\043\111\044\067" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\054\003\uff5b\016\uff5b\030\uff5b\031\153\032\154" +
    "\033\147\034\071\035\112\036\077\037\104\040\052\041" +
    "\043\042\106\043\111\044\150\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\004\023\171\001" +
    "\002\000\060\012\120\013\036\014\040\015\053\017\133" +
    "\024\064\025\113\027\074\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\067\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\050\023\uff67\031\153\032\154\033\147\034\071\035\112" +
    "\036\077\037\104\040\052\041\043\042\106\043\111\044" +
    "\150\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\004\023\170\001\002\000\024\003\uff66\005" +
    "\uff66\006\uff66\007\uff66\010\uff66\011\uff66\017\uff66\026\uff66" +
    "\045\uff66\001\002\000\024\003\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\011\uff65\017\uff65\026\uff65\045\uff65\001\002" +
    "\000\004\022\127\001\002\000\024\003\uff73\005\uff73\006" +
    "\uff73\007\uff73\010\uff73\011\uff73\017\uff73\026\174\045\uff73" +
    "\001\002\000\062\012\120\013\036\014\040\015\053\017" +
    "\133\020\176\024\064\025\113\027\074\034\071\035\112" +
    "\036\077\037\104\040\052\041\043\042\106\043\111\044" +
    "\067\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\066\003\uff71\005\uff71\006\uff71\007\uff71\010" +
    "\uff71\011\uff71\017\uff71\031\153\032\154\033\147\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\150\045\uff71\062\061\063\045\064\114\065\121" +
    "\066\066\067\100\001\002\000\060\012\120\013\036\014" +
    "\040\015\053\017\133\024\064\025\113\027\074\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\067\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\052\016\uff6b\021\uff6b\031\153\032" +
    "\154\033\147\034\071\035\112\036\077\037\104\040\052" +
    "\041\043\042\106\043\111\044\150\062\061\063\045\064" +
    "\114\065\121\066\066\067\100\001\002\000\006\016\203" +
    "\021\uff6e\001\002\000\004\021\202\001\002\000\022\003" +
    "\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\017\uff70" +
    "\045\uff70\001\002\000\060\012\uff6d\013\uff6d\014\uff6d\015" +
    "\uff6d\017\uff6d\024\uff6d\025\uff6d\027\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d" +
    "\001\002\000\060\012\120\013\036\014\040\015\053\017" +
    "\133\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\062" +
    "\061\063\045\064\114\065\121\066\066\067\100\001\002" +
    "\000\052\016\uff6c\021\uff6c\031\153\032\154\033\147\034" +
    "\071\035\112\036\077\037\104\040\052\041\043\042\106" +
    "\043\111\044\150\062\061\063\045\064\114\065\121\066" +
    "\066\067\100\001\002\000\060\012\120\013\036\014\040" +
    "\015\053\017\133\024\064\025\113\027\074\034\071\035" +
    "\112\036\077\037\104\040\052\041\043\042\106\043\111" +
    "\044\067\062\061\063\045\064\114\065\121\066\066\067" +
    "\100\001\002\000\006\003\221\045\222\001\002\000\006" +
    "\003\217\045\220\001\002\000\006\003\uffc2\045\uffc2\001" +
    "\002\000\006\022\127\026\213\001\002\000\062\003\215" +
    "\012\120\013\036\014\040\015\053\017\133\024\064\025" +
    "\113\027\074\034\071\035\112\036\077\037\104\040\052" +
    "\041\043\042\106\043\111\044\067\062\061\063\045\064" +
    "\114\065\121\066\066\067\100\001\002\000\052\003\216" +
    "\031\153\032\154\033\147\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\150\045\uffc4" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\006\003\uffc3\045\uffc3\001\002\000\006\003\uffc1" +
    "\045\uffc1\001\002\000\060\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\017\uff86\024\uff86\025\uff86\027\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\001\002\000\060\012\uff88\013\uff88\014\uff88\015\uff88\017" +
    "\uff88\024\uff88\025\uff88\027\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\001\002" +
    "\000\060\012\uff85\013\uff85\014\uff85\015\uff85\017\uff85\024" +
    "\uff85\025\uff85\027\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\062\uff85\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\001\002\000\060" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\017\uff87\024\uff87\025" +
    "\uff87\027\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\062\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\001\002\000\122\003\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\017\uff8a\021\uff8a\024\uff8a\025\uff8a" +
    "\027\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\046\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\001\002\000\052\003\226\031\153\032\154\033\147\034" +
    "\071\035\112\036\077\037\104\040\052\041\043\042\106" +
    "\043\111\044\150\045\225\062\061\063\045\064\114\065" +
    "\121\066\066\067\100\001\002\000\060\012\uff84\013\uff84" +
    "\014\uff84\015\uff84\017\uff84\024\uff84\025\uff84\027\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\001\002\000\122\003\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\uff81\017\uff81\021\uff81\024\uff81\025\uff81\027\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\046\uff81\050\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\067\uff81\001\002\000\060" +
    "\012\120\013\036\014\040\015\053\017\133\024\064\025" +
    "\113\027\074\034\071\035\112\036\077\037\104\040\052" +
    "\041\043\042\106\043\111\044\067\062\061\063\045\064" +
    "\114\065\121\066\066\067\100\001\002\000\050\030\231" +
    "\031\153\032\154\033\147\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\150\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\004\020\uff83\001\002\000\004\020\233\001\002\000\116" +
    "\003\235\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002" +
    "\000\122\003\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\017\uff82\021\uff82" +
    "\024\uff82\025\uff82\027\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\046\uff82" +
    "\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\001\002\000\004\021\264\001\002\000" +
    "\116\003\065\005\005\006\011\007\015\010\006\011\017" +
    "\012\120\013\036\014\040\015\053\017\051\021\241\024" +
    "\064\025\113\027\074\034\071\035\112\036\077\037\104" +
    "\040\052\041\043\042\106\043\111\044\067\046\062\050" +
    "\103\051\050\052\076\055\073\056\243\060\117\061\101" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\126\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\024\uffe5\025\uffe5\027\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\116" +
    "\003\254\005\005\006\011\007\015\010\006\011\017\012" +
    "\120\013\036\014\040\015\053\017\051\021\252\024\064" +
    "\025\113\027\074\034\071\035\112\036\077\037\104\040" +
    "\052\041\043\042\106\043\111\044\067\046\062\050\103" +
    "\051\050\052\076\055\073\056\243\060\117\061\101\062" +
    "\061\063\045\064\114\065\121\066\066\067\100\001\002" +
    "\000\126\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\024\uffe3\025\uffe3\027\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002\000\006\003" +
    "\246\045\247\001\002\000\064\003\245\012\120\013\036" +
    "\014\040\015\053\017\133\024\064\025\113\027\074\034" +
    "\071\035\112\036\077\037\104\040\052\041\043\042\106" +
    "\043\111\044\067\045\uff54\062\061\063\045\064\114\065" +
    "\121\066\066\067\100\001\002\000\052\003\uff55\031\153" +
    "\032\154\033\147\034\071\035\112\036\077\037\104\040" +
    "\052\041\043\042\106\043\111\044\150\045\uff55\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\006\003\uff53\045\uff53\001\002\000\004\021\251\001\002" +
    "\000\004\021\250\001\002\000\126\003\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\001\002\000\126\003\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\024\uffdf\025\uffdf\027\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\126\003\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\024\uffe2\025\uffe2\027\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\006\003" +
    "\260\045\261\001\002\000\124\003\uffda\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\021\uffda\024\uffda\025\uffda\027\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\257\046\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\001\002" +
    "\000\122\003\256\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd" +
    "\024\uffdd\025\uffdd\027\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\001\002\000\122\003\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\021\uffd1\024\uffd1\025\uffd1\027\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000" +
    "\122\003\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\021\uffd2\024" +
    "\uffd2\025\uffd2\027\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\004\021\263\001\002\000\004" +
    "\021\262\001\002\000\126\003\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\024\uffe1\025\uffe1\027\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001" +
    "\002\000\126\003\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020" +
    "\uffde\021\uffde\024\uffde\025\uffde\027\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\060\uffde\061\uffde\062\uffde\063" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\004" +
    "\003\265\001\002\000\126\003\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\060\012\120\013\036\014\040\015\053\017\133" +
    "\024\064\025\113\027\074\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\067\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\050\030\270\031\153\032\154\033\147\034\071\035\112" +
    "\036\077\037\104\040\052\041\043\042\106\043\111\044" +
    "\150\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\004\045\uffd0\001\002\000\122\003\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\017\uffd8\021\uffd8\024\uffd8\025\uffd8\027" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\046\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001" +
    "\002\000\122\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\021" +
    "\uffd9\024\uffd9\025\uffd9\027\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\001\002\000\122\003\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\021\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002" +
    "\000\062\003\275\012\uff8e\013\uff8e\014\uff8e\015\uff8e\017" +
    "\uff8e\024\uff8e\025\uff8e\027\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\001\002" +
    "\000\004\030\303\001\002\000\060\012\120\013\036\014" +
    "\040\015\053\017\133\024\064\025\113\027\074\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\067\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\050\030\uff8d\031\153\032\154\033" +
    "\147\034\071\035\112\036\077\037\104\040\052\041\043" +
    "\042\106\043\111\044\150\062\061\063\045\064\114\065" +
    "\121\066\066\067\100\001\002\000\004\030\301\001\002" +
    "\000\004\020\233\001\002\000\122\003\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\017\uff8c\021\uff8c\024\uff8c\025\uff8c\027\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\001\002\000" +
    "\004\020\233\001\002\000\122\003\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\017\uff8b\021\uff8b\024\uff8b\025\uff8b\027\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\044\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\001\002\000\006" +
    "\003\uffcb\045\uffcb\001\002\000\012\003\uffce\022\127\026" +
    "\307\045\uffce\001\002\000\060\012\120\013\036\014\040" +
    "\015\053\017\133\024\064\025\113\027\074\034\071\035" +
    "\112\036\077\037\104\040\052\041\043\042\106\043\111" +
    "\044\067\062\061\063\045\064\114\065\121\066\066\067" +
    "\100\001\002\000\052\003\311\031\153\032\154\033\147" +
    "\034\071\035\112\036\077\037\104\040\052\041\043\042" +
    "\106\043\111\044\150\045\uffcd\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\006\003\uffca\045" +
    "\uffca\001\002\000\004\017\313\001\002\000\004\030\314" +
    "\001\002\000\004\045\uffcf\001\002\000\062\003\317\012" +
    "\120\013\036\014\040\015\053\017\133\024\064\025\113" +
    "\027\074\034\071\035\112\036\077\037\104\040\052\041" +
    "\043\042\106\043\111\044\067\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\050\030\340\031" +
    "\153\032\154\033\147\034\071\035\112\036\077\037\104" +
    "\040\052\041\043\042\106\043\111\044\150\062\061\063" +
    "\045\064\114\065\121\066\066\067\100\001\002\000\004" +
    "\030\320\001\002\000\004\020\321\001\002\000\004\053" +
    "\324\001\002\000\012\003\uff7a\021\uff7a\053\uff7a\054\uff7a" +
    "\001\002\000\010\003\334\021\336\053\324\001\002\000" +
    "\062\003\326\012\120\013\036\014\040\015\053\017\133" +
    "\024\064\025\113\027\074\034\071\035\112\036\077\037" +
    "\104\040\052\041\043\042\106\043\111\044\067\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\050\031\153\032\154\033\147\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\150\057" +
    "\uff78\062\061\063\045\064\114\065\121\066\066\067\100" +
    "\001\002\000\004\057\327\001\002\000\112\003\065\005" +
    "\005\006\011\007\015\010\006\011\017\012\120\013\036" +
    "\014\040\015\053\017\051\024\064\025\113\027\074\034" +
    "\071\035\112\036\077\037\104\040\052\041\043\042\106" +
    "\043\111\044\067\046\062\050\103\051\050\052\076\055" +
    "\073\060\117\061\101\062\061\063\045\064\114\065\121" +
    "\066\066\067\100\001\002\000\120\003\254\005\005\006" +
    "\011\007\015\010\006\011\017\012\120\013\036\014\040" +
    "\015\053\017\051\021\uff76\024\064\025\113\027\074\034" +
    "\071\035\112\036\077\037\104\040\052\041\043\042\106" +
    "\043\111\044\067\046\062\050\103\051\050\052\076\053" +
    "\uff76\054\uff76\055\073\060\117\061\101\062\061\063\045" +
    "\064\114\065\121\066\066\067\100\001\002\000\004\057" +
    "\332\001\002\000\112\003\065\005\005\006\011\007\015" +
    "\010\006\011\017\012\120\013\036\014\040\015\053\017" +
    "\051\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\046" +
    "\062\050\103\051\050\052\076\055\073\060\117\061\101" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\120\003\254\005\005\006\011\007\015\010\006" +
    "\011\017\012\120\013\036\014\040\015\053\017\051\021" +
    "\uff77\024\064\025\113\027\074\034\071\035\112\036\077" +
    "\037\104\040\052\041\043\042\106\043\111\044\067\046" +
    "\062\050\103\051\050\052\076\053\uff77\054\uff77\055\073" +
    "\060\117\061\101\062\061\063\045\064\114\065\121\066" +
    "\066\067\100\001\002\000\004\053\324\001\002\000\012" +
    "\003\uff7b\021\uff7b\053\uff7b\054\uff7b\001\002\000\122\003" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\017\uff7e\021\uff7e\024\uff7e\025" +
    "\uff7e\027\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\046\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\060\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067" +
    "\uff7e\001\002\000\012\003\uff79\021\uff79\053\uff79\054\uff79" +
    "\001\002\000\004\020\341\001\002\000\004\053\uff7d\001" +
    "\002\000\050\030\345\031\153\032\154\033\147\034\071" +
    "\035\112\036\077\037\104\040\052\041\043\042\106\043" +
    "\111\044\150\062\061\063\045\064\114\065\121\066\066" +
    "\067\100\001\002\000\004\030\344\001\002\000\100\003" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\016\uffb7" +
    "\017\uffb7\021\uffb7\023\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\057\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002\000\100" +
    "\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\023\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\057\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000" +
    "\122\003\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\021\uffd5\024" +
    "\uffd5\025\uffd5\027\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\001\002\000\122\003\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\021\uffd6\024\uffd6\025\uffd6\027\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\001\002\000\100" +
    "\003\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\023\uffb9\030\uffb9\031\153\032\154" +
    "\033\147\034\071\035\112\036\077\037\104\040\052\041" +
    "\043\042\uffb9\043\uffb9\044\150\045\uffb9\057\uffb9\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\124\003\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\017\uff92\021\uff92\024" +
    "\uff92\025\uff92\027\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\046\uff92\047" +
    "\uff91\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\001\002\000\122\003\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\017\uff97\021\uff97\024\uff97\025\uff97\027\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\046\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\056\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\001\002" +
    "\000\004\047\354\001\002\000\004\020\233\001\002\000" +
    "\122\003\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\017\uff90\021\uff90\024" +
    "\uff90\025\uff90\027\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\046\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066" +
    "\uff90\067\uff90\001\002\000\122\003\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\017\uff8f\021\uff8f\024\uff8f\025\uff8f\027\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\001\002\000\062" +
    "\003\361\012\120\013\036\014\040\015\053\017\133\024" +
    "\064\025\113\027\074\034\071\035\112\036\077\037\104" +
    "\040\052\041\043\042\106\043\111\044\067\062\061\063" +
    "\045\064\114\065\121\066\066\067\100\001\002\000\050" +
    "\030\366\031\153\032\154\033\147\034\071\035\112\036" +
    "\077\037\104\040\052\041\043\042\106\043\111\044\150" +
    "\062\061\063\045\064\114\065\121\066\066\067\100\001" +
    "\002\000\004\030\362\001\002\000\004\020\233\001\002" +
    "\000\006\020\uff95\047\364\001\002\000\004\020\233\001" +
    "\002\000\004\020\uff93\001\002\000\006\003\367\020\uff96" +
    "\001\002\000\004\047\370\001\002\000\004\020\233\001" +
    "\002\000\004\020\uff94\001\002\000\122\003\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\017\uffd3\021\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002" +
    "\000\100\003\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\016\uffb4\017\uffb4\021\uffb4\023\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\057\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001" +
    "\002\000\004\045\u0100\001\002\000\064\003\377\012\120" +
    "\013\036\014\040\015\053\017\133\024\064\025\113\027" +
    "\074\034\071\035\112\036\077\037\104\040\052\041\043" +
    "\042\106\043\111\044\067\045\uff57\062\061\063\045\064" +
    "\114\065\121\066\066\067\100\001\002\000\050\031\153" +
    "\032\154\033\147\034\071\035\112\036\077\037\104\040" +
    "\052\041\043\042\106\043\111\044\150\045\uff58\062\061" +
    "\063\045\064\114\065\121\066\066\067\100\001\002\000" +
    "\004\045\uff56\001\002\000\004\021\u0101\001\002\000\020" +
    "\002\uffeb\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\001\002\000\020\003\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\017\uff89\001\002\000\100\003\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\016\uffb5\017\uffb5" +
    "\021\uffb5\023\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\057\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\012\003\334" +
    "\021\u0107\053\324\054\u0105\001\002\000\004\057\u010a\001" +
    "\002\000\004\021\u0107\001\002\000\122\003\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\017\uff7c\021\uff7c\024\uff7c\025\uff7c\027\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\046\uff7c\050\uff7c\051\uff7c\052\uff7c" +
    "\053\uff7c\054\uff7c\055\uff7c\056\uff7c\060\uff7c\061\uff7c\062" +
    "\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\001\002" +
    "\000\122\003\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\017\uff7f\021\uff7f" +
    "\024\uff7f\025\uff7f\027\uff7f\034\uff7f\035\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f" +
    "\066\uff7f\067\uff7f\001\002\000\122\003\uff80\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\017\uff80\021\uff80\024\uff80\025\uff80\027\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\046\uff80\050\uff80\051\uff80\052\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\060\uff80\061\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\001\002\000" +
    "\112\003\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75" +
    "\012\uff75\013\uff75\014\uff75\015\uff75\017\uff75\024\uff75\025" +
    "\uff75\027\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\046\uff75\050\uff75\051" +
    "\uff75\052\uff75\055\uff75\060\uff75\061\uff75\062\uff75\063\uff75" +
    "\064\uff75\065\uff75\066\uff75\067\uff75\001\002\000\112\003" +
    "\065\005\005\006\011\007\015\010\006\011\017\012\120" +
    "\013\036\014\040\015\053\017\051\024\064\025\113\027" +
    "\074\034\071\035\112\036\077\037\104\040\052\041\043" +
    "\042\106\043\111\044\067\046\062\050\103\051\050\052" +
    "\076\055\073\060\117\061\101\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\114\003\254\005" +
    "\005\006\011\007\015\010\006\011\017\012\120\013\036" +
    "\014\040\015\053\017\051\021\uff74\024\064\025\113\027" +
    "\074\034\071\035\112\036\077\037\104\040\052\041\043" +
    "\042\106\043\111\044\067\046\062\050\103\051\050\052" +
    "\076\055\073\060\117\061\101\062\061\063\045\064\114" +
    "\065\121\066\066\067\100\001\002\000\100\003\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\023\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\057\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000\004\045\u010f" +
    "\001\002\000\004\021\u0110\001\002\000\020\002\uffe9\003" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\001\002" +
    "\000\006\003\030\020\027\001\002\000\020\002\ufff6\003" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001\002" +
    "\000\004\027\u0115\001\002\000\020\002\uffee\003\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\001\002\000\020" +
    "\003\u0117\005\005\006\011\007\015\010\006\011\017\030" +
    "\u0116\001\002\000\006\003\030\020\027\001\002\000\004" +
    "\030\u0124\001\002\000\004\030\u0122\001\002\000\004\017" +
    "\u0121\001\002\000\010\003\u011c\016\u011b\030\uff64\001\002" +
    "\000\014\005\005\006\011\007\015\010\006\011\017\001" +
    "\002\000\014\005\005\006\011\007\015\010\006\011\017" +
    "\001\002\000\004\017\u011e\001\002\000\010\003\uff61\016" +
    "\uff61\030\uff61\001\002\000\004\017\u0120\001\002\000\010" +
    "\003\uff63\016\uff63\030\uff63\001\002\000\010\003\uff62\016" +
    "\uff62\030\uff62\001\002\000\006\003\030\020\027\001\002" +
    "\000\020\002\ufff2\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\001\002\000\006\003\030\020\027\001\002" +
    "\000\020\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\001\002\000\020\002\ufff1\003\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000\020\002" +
    "\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\001\002\000\004\027\u0133\001\002\000\020\002\uffff\003" +
    "\u0131\005\005\006\011\007\015\010\006\011\017\001\002" +
    "\000\026\002\uffe7\003\030\004\u0128\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\017\u012b\020\027\001\002\000\004" +
    "\027\u012c\001\002\000\014\005\005\006\011\007\015\010" +
    "\006\011\017\001\002\000\004\030\u012e\001\002\000\006" +
    "\003\030\020\027\001\002\000\020\002\uffed\003\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\001\002\000\020" +
    "\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\001\002\000\024\003\u012a\004\u0128\005\005\006\011" +
    "\007\015\010\006\011\017\017\u012b\020\027\001\002\000" +
    "\020\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\001\002\000\004\030\u0134\001\002\000\006\003" +
    "\030\020\027\001\002\000\020\002\ufff3\003\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\026\002" +
    "\ufffe\003\u012a\004\u0128\005\005\006\011\007\015\010\006" +
    "\011\017\017\u012b\020\027\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\016\002\003\012\012\040\006\041\007\046" +
    "\015\047\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\012\040" +
    "\u012f\046\015\047\013\001\001\000\002\001\001\000\016" +
    "\004\u0126\012\012\040\006\041\u0128\046\015\047\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\u0112\001" +
    "\001\000\004\065\021\001\001\000\004\003\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\030\001\001\000\006\067\032\070\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u010d\001" +
    "\001\000\060\005\055\006\104\007\114\010\115\011\067" +
    "\012\101\013\045\014\046\016\056\017\036\020\053\021" +
    "\107\022\071\023\041\024\074\031\122\033\040\042\054" +
    "\052\106\053\057\056\062\060\121\063\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\u0103\026\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\127\051\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\254\007\114\010\115\011\067\012\101" +
    "\013\045\014\046\016\056\017\036\020\053\021\107\022" +
    "\071\023\041\024\074\031\122\033\040\037\373\042\054" +
    "\052\106\053\057\056\062\060\121\063\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\350\055\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\347" +
    "\013\045\014\046\016\056\017\036\033\040\001\001\000" +
    "\012\014\154\015\151\016\155\017\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\341\013\045\014\046\016\056\017\036\033\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\207\010\206\012" +
    "\101\031\122\042\054\062\205\001\001\000\006\012\124" +
    "\042\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\127\001\001\000\004\102\164\001\001\000\002" +
    "\001\001\000\016\011\131\013\045\014\046\016\056\017" +
    "\036\033\040\001\001\000\012\014\154\015\151\016\155" +
    "\017\150\001\001\000\004\051\133\001\001\000\002\001" +
    "\001\000\020\011\135\013\045\014\046\016\056\017\036" +
    "\030\136\033\040\001\001\000\012\014\154\015\151\016" +
    "\155\017\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\161\001" +
    "\001\000\016\011\145\013\045\014\046\016\056\017\036" +
    "\033\040\001\001\000\002\001\001\000\012\014\154\015" +
    "\151\016\155\017\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\160\013\045\014\046\016\056\017" +
    "\036\033\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\157\013\045\014\046\016" +
    "\056\017\036\033\040\001\001\000\016\011\156\013\045" +
    "\014\046\016\056\017\036\033\040\001\001\000\012\014" +
    "\154\015\151\016\155\017\150\001\001\000\012\014\154" +
    "\015\151\016\155\017\150\001\001\000\012\014\154\015" +
    "\151\016\155\017\150\001\001\000\016\011\162\013\045" +
    "\014\046\016\056\017\036\033\040\001\001\000\012\014" +
    "\154\015\151\016\155\017\150\001\001\000\002\001\001" +
    "\000\016\011\165\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\014\014\154\015\151\016\155\017\150" +
    "\103\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\172\001\001\000\002\001\001" +
    "\000\016\011\174\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\012\014\154\015\151\016\155\017\150" +
    "\001\001\000\022\011\176\013\045\014\046\016\056\017" +
    "\036\033\040\043\200\044\177\001\001\000\012\014\154" +
    "\015\151\016\155\017\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\203\001\001" +
    "\000\016\011\204\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\012\014\154\015\151\016\155\017\150" +
    "\001\001\000\020\011\223\013\045\014\046\016\056\017" +
    "\036\033\040\061\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\127\001\001\000" +
    "\016\011\213\013\045\014\046\016\056\017\036\033\040" +
    "\001\001\000\012\014\154\015\151\016\155\017\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\154\015\151\016\155\017\150" +
    "\001\001\000\004\075\226\001\001\000\002\001\001\000" +
    "\016\011\227\013\045\014\046\016\056\017\036\033\040" +
    "\001\001\000\012\014\154\015\151\016\155\017\150\001" +
    "\001\000\004\076\231\001\001\000\004\045\233\001\001" +
    "\000\004\071\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\005\237\006\104\007\114\010\115\011\067" +
    "\012\101\013\045\014\046\016\056\017\036\020\053\021" +
    "\107\022\071\023\041\024\074\031\122\033\040\042\054" +
    "\050\236\052\106\053\057\054\241\056\062\060\121\063" +
    "\043\001\001\000\002\001\001\000\060\006\254\007\114" +
    "\010\115\011\067\012\101\013\045\014\046\016\056\017" +
    "\036\020\053\021\107\022\071\023\041\024\074\031\122" +
    "\033\040\042\054\052\106\053\057\054\252\056\062\060" +
    "\121\063\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\243\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\012\014\154\015\151\016\155\017\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\266\013\045\014\046" +
    "\016\056\017\036\033\040\001\001\000\012\014\154\015" +
    "\151\016\155\017\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\275\001\001\000\002\001\001\000\016\011\276\013\045" +
    "\014\046\016\056\017\036\033\040\001\001\000\014\014" +
    "\154\015\151\016\155\017\150\074\277\001\001\000\002" +
    "\001\001\000\004\045\301\001\001\000\002\001\001\000" +
    "\004\045\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\172\001\001\000\016\011\307\013\045\014" +
    "\046\016\056\017\036\033\040\001\001\000\012\014\154" +
    "\015\151\016\155\017\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\315\013\045\014\046\016\056\017\036\033\040\001" +
    "\001\000\012\014\154\015\151\016\155\017\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\322\026" +
    "\321\001\001\000\002\001\001\000\004\026\334\001\001" +
    "\000\016\011\324\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\014\014\154\015\151\016\155\017\150" +
    "\077\330\001\001\000\002\001\001\000\060\005\327\006" +
    "\104\007\114\010\115\011\067\012\101\013\045\014\046" +
    "\016\056\017\036\020\053\021\107\022\071\023\041\024" +
    "\074\031\122\033\040\042\054\052\106\053\057\056\062" +
    "\060\121\063\043\001\001\000\056\006\254\007\114\010" +
    "\115\011\067\012\101\013\045\014\046\016\056\017\036" +
    "\020\053\021\107\022\071\023\041\024\074\031\122\033" +
    "\040\042\054\052\106\053\057\056\062\060\121\063\043" +
    "\001\001\000\002\001\001\000\060\005\332\006\104\007" +
    "\114\010\115\011\067\012\101\013\045\014\046\016\056" +
    "\017\036\020\053\021\107\022\071\023\041\024\074\031" +
    "\122\033\040\042\054\052\106\053\057\056\062\060\121" +
    "\063\043\001\001\000\056\006\254\007\114\010\115\011" +
    "\067\012\101\013\045\014\046\016\056\017\036\020\053" +
    "\021\107\022\071\023\041\024\074\031\122\033\040\042" +
    "\054\052\106\053\057\056\062\060\121\063\043\001\001" +
    "\000\004\026\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\154\015\151\016\155\017\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\154\015\151\016" +
    "\155\017\150\001\001\000\004\072\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\355\057\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\357" +
    "\013\045\014\046\016\056\017\036\033\040\001\001\000" +
    "\012\014\154\015\151\016\155\017\150\001\001\000\002" +
    "\001\001\000\004\045\362\001\001\000\002\001\001\000" +
    "\004\045\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\375\013\045\014\046\016\056\017\036\033" +
    "\040\001\001\000\012\014\154\015\151\016\155\017\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\334" +
    "\027\u0105\064\u0107\001\001\000\002\001\001\000\004\064" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\u010a\001\001\000\060\005\u010b\006" +
    "\104\007\114\010\115\011\067\012\101\013\045\014\046" +
    "\016\056\017\036\020\053\021\107\022\071\023\041\024" +
    "\074\031\122\033\040\042\054\052\106\053\057\056\062" +
    "\060\121\063\043\001\001\000\056\006\254\007\114\010" +
    "\115\011\067\012\101\013\045\014\046\016\056\017\036" +
    "\020\053\021\107\022\071\023\041\024\074\031\122\033" +
    "\040\042\054\052\106\053\057\056\062\060\121\063\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0111\001\001\000\002" +
    "\001\001\000\004\034\u0113\001\001\000\002\001\001\000" +
    "\010\012\u0118\035\u0117\036\u0119\001\001\000\004\004\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u011e\001\001\000\004" +
    "\012\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0122\001\001\000\002\001\001\000\004\004\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\012\040\u012f\046\015\047" +
    "\013\001\001\000\004\004\u0126\001\001\000\002\001\001" +
    "\000\010\012\u0118\035\u012c\036\u0119\001\001\000\002\001" +
    "\001\000\004\004\u012e\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\u0126\012\012\040\u0131\046\015\047" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0134\001\001\000\002\001\001\000\014\004\u0126\012" +
    "\012\040\u0131\046\015\047\013\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private int mainCount = 0;

    private Arbol arbol;

    private int bloqueActual = 0;

    private boolean dataSectionGenerated = false;

    private boolean textSectionGenerated = false;

    public String etiquetaTrue;
    public String etiquetaEndIf;
    public String etiquetaEndElse;
    public String etiquetaInicioWhile;
    public String etiquetaEndWhile;
    public String etiquetaInicioFor;
    public String etiquetaEndFor;
    public String iteradorForActual;
    public String tempSwitch;
    public String etiquetaEndSwitch;
    public String etiquetaDefault;
    public int caseNumber = 0;

    private int stackOffset = 0;

    public int getCurrentStackOffset() {
        return stackOffset;
    }

    public void addToStackOffset(int bytes) {
        stackOffset += bytes;
    }

    // Al inicio de cada función, reiniciar el offset
    public void resetStackOffset() {
        stackOffset = 0;
    }

    StringBuffer codMIPS = new StringBuffer();
    StringBuffer dataSection = new StringBuffer();

    private int maxTemp = 9;          // Máximo índice para registros temporales ($t0 - $t9)
    private int currentTemp = 0;      // Contador actual de registros temporales
    private int currentFloatTemp = 0;
    private int frameSize = 0;        // Tamaño actual del marco de pila
    private Map<String, Integer> variableOffset = new HashMap<>();  // Mapa para offsets fijos de variables en la pila

    // Obtener un registro temporal para operaciones intermedias
    public String newTemp() {
        String temp = "$t" + (currentTemp % (maxTemp + 1));
        currentTemp++;
        return temp;
    }

    // Asignar espacio en la pila para una nueva variable
    public void allocateVariable(String variable) {
        if (variableOffset.containsKey(variable)) {
            System.err.println("Error interno: Variable ya está asignada en la pila.");
            errorCount++;
            return;
        }
        frameSize += 4;  // Incrementar el tamaño del marco
        variableOffset.put(variable, -frameSize);  // Asignar un offset fijo en el marco
        gen("addi $sp, $sp, -4");  // Reservar espacio en la pila
    }

    // Obtener la dirección fija en la pila para una variable
    public String getVariableAddress(String variable) {
        Integer offset = variableOffset.get(variable);
        if (offset == null) {
            System.err.println("Error interno: Variable " + variable + " no encontrada en la pila");
            errorCount++;
            return "0($sp)";  // Dirección por defecto en caso de error
        }
        return offset + "($fp)";
    }

    // Cargar variable de la pila a un registro temporal
    public String loadVariable(String variable) {
        String temp = newTemp();
        gen("lw " + temp + ", " + getVariableAddress(variable));
        return temp;
    }

    public String loadVariableFloat(String variable) {
        String temp = newFloatTemp();
        gen("lwc1 " + temp + ", " + getVariableAddress(variable));
        return temp;
    }

    // Guardar valor de un registro en la pila
    public void storeVariable(String variable, String register) {
        if (register == null || !register.startsWith("$")) {
            System.err.println("Error interno: Registro inválido para la variable '" + variable + "'.");
            errorCount++;
            return;
        }
        gen("sw " + register + ", " + getVariableAddress(variable));
    }

    // Guardar valor de un registro flotante en la pila
    public void storeFloatVariable(String variable, String register) {
        if (register == null || !register.startsWith("$")) {
            System.err.println("Error interno: Registro inválido para la variable '" + variable + "'.");
            errorCount++;
            return;
        }
        gen("swc1 " + register + ", " + getVariableAddress(variable));  // `swc1` para flotantes
    }
        // Obtener un registro temporal flotante para operaciones intermedias
        public String newFloatTemp() {
            if (currentFloatTemp < 32) { // Máximo de registros flotantes es $f0 - $f31
                return "$f" + (currentFloatTemp++ % 32);  // Ciclar dentro de los 32 registros flotantes
            } else {
                // Manejo de flotantes en la pila
                frameSize += 4;
                gen("addi $sp, $sp, -4");  // Reservar espacio en la pila
                return "-" + frameSize + "($fp)";
            }
        }

       public void gen(String instruction) {
              System.out.println("Generando instrucción: " + instruction);
              codMIPS.append(instruction).append("\n");
          }

        public String floatToIEEE754(String floatStr) {
            try {
                float value = Float.parseFloat(floatStr); // Convertir a float
                int intBits = Float.floatToIntBits(value); // Convertir a IEEE 754 (bits enteros)
                return "0x" + Integer.toHexString(intBits).toUpperCase(); // Devolver como hexadecimal
            } catch (NumberFormatException e) {
                System.err.println("Error interno: No se pudo convertir " + floatStr + " a IEEE 754");
                errorCount++;
                return "0x0000";
            }
        }


        public void imprimirCodigoMIPS() {
            StringBuilder codigoCompleto = new StringBuilder();
            if (dataSectionGenerated) {
                codigoCompleto.append(dataSection.toString()).append("\n");
            }
            if (textSectionGenerated) {
                codigoCompleto.append(codMIPS.toString());
            }
            System.out.println("\n\nCÓDIGO MIPS:");
            System.out.println(codigoCompleto.toString());
        }

        public void declararString(String id, String valor) {
            if (!dataSectionGenerated) {
                dataSection.append(".data\n"); // Asegurarse de que la sección .data se genere al inicio
                dataSectionGenerated = true;
            }
            dataSection.append(id + ": .asciiz \"" + valor + "\"\n");}

       public void textSection() {
           if (!textSectionGenerated) {
                 gen(".text");
                 gen(".globl main");
                 gen("main:");
                 gen("j _verano_");
                 textSectionGenerated = true;
                 textSectionGenerated = true;
           }
           if (!dataSectionGenerated) {
                dataSection.append(".data\n"); // Asegurarse de que la sección .data se genere al inicio
                dataSectionGenerated = true;
           }
         }

    public String obtenerValorString(String id) {
        // Buscar el string declarado en .data y devolver su valor
        String data = dataSection.toString();
        for (String line : data.split("\n")) {
            if (line.startsWith(id + ":")) {
                int start = line.indexOf("\"") + 1;
                int end = line.lastIndexOf("\"");
                if (start > 0 && end > start) {
                    return line.substring(start, end);
                }
            }
        }
        return ""; // Retornar vacío si no se encuentra
    }

    public void guardarCodigoMIPS(String archivoSalida) {
        try (FileWriter writer = new FileWriter(archivoSalida)) {
            StringBuilder codigoCompleto = new StringBuilder();
            if (dataSectionGenerated) {
                codigoCompleto.append(dataSection.toString()).append("\n");
            }
            if (textSectionGenerated) {
                codigoCompleto.append(codMIPS.toString());
            }
            // Guardar el contenido del código MIPS generado
            writer.write(codigoCompleto.toString());
            System.out.println("El código MIPS ha sido guardado en el archivo: " + archivoSalida);
        } catch (IOException e) {
            System.err.println("Error interno escribiendo en el archivo: " + e.getMessage());
            errorCount++;
        }
    }

    public String getTipo(ArrayList<String> listaTablasSimbolos, String id, int line, int column) {
        if (listaTablasSimbolos == null) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": La tabla de símbolos está vacía o no inicializada.");
                               errorCount++;
            return "null";
        }

        String tipo = "null";

        for (String token : listaTablasSimbolos) {
            // Divide el token en columnas usando "|" como delimitador
            String[] partesToken = token.split("\\|");
            if (partesToken.length < 5) { // Verifica que haya al menos 5 columnas
                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                   ": Formato inválido en token: " + token);
                                   errorCount++;
                continue;
            }
            String lexema = partesToken[3].trim(); // Columna "Lexema"
            String tipoEncontrado = partesToken[4].trim(); // Columna "Tipo"

            // Compara el lexema con el id que estamos buscando
            if (id.equals(lexema)) {
                tipo = tipoEncontrado;
                break;
            }
        }

        if (tipo.equals("null")) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": Identificador '" + id + "' no está declarado.");
                               errorCount++;
        }

        return tipo;
    }
    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
                           errorCount++;
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    public void verificarMain() {
        if (mainCount == 0) {
            System.err.println("Error semántico: No se declaró ninguna función 'main' (_verano_).");
            errorCount++;
        } else if (mainCount > 1) {
            System.err.println("Error semántico: Se declaró más de una función 'main' (_verano_).");
            errorCount++;
        } else {
            System.out.println("Análisis correcto: Se declaró una única función 'main' (_verano_).");
        }
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       | Bloque    |");
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+-----------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        bloqueActual = 1;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error interno: No hay una tabla de símbolos activa");
            errorCount++;
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error interno: La tabla de símbolos '" + currentHash + "' no existe");
            errorCount++;
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s | Bloque %-3d |",
                linea + 1, columna + 1, lexema, tipo, bloqueActual);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= lista_funciones error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= lista_funciones funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_funciones ::= funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_funciones ::= lista_funciones error funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= cabecera_funcion 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= cabecera_main 
            {
              Object RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_main ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_main ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    parser.agregarTablaSimbolos("main", "_verano_");
                    parser.agregarVariable(symbol.left, symbol.right, "_verano_", ((Resultado) t).tipo);

                    // Incrementar el contador de main
                    parser.mainCount++;
                    textSection();
                    // Generar la etiqueta del main
                    parser.gen("\n# Inicio del main (_verano_)\n_verano_:");

                    // Guardar el valor de retorno y marco de pila
                    parser.gen("addi $sp, $sp, -8");  // Reservar espacio para $ra y $fp
                    parser.gen("sw $ra, 4($sp)");    // Guardar $ra en la pila
                    parser.gen("sw $fp, 0($sp)");    // Guardar $fp en la pila
                    parser.gen("move $fp, $sp");    // Actualizar el marco de pila
                    parser.gen("addi $sp, $sp, -4");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera_main ::= tipo MAIN NT$0 declaracion_main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    // Restaurar registros y finalizar el programa
                    parser.gen("\n# Fin del main (_verano_)");
                    parser.gen("move $sp, $fp");
                    parser.gen("lw $ra, 4($sp)");  // Restaurar $ra
                    parser.gen("lw $fp, 0($sp)");  // Restaurar $fp
                    parser.gen("addi $sp, $sp, 8"); // Restaurar el espacio en la pila
                    parser.gen("li $v0, 10");       // Syscall para terminar el programa
                    parser.gen("syscall");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera_main ::= error MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funcion ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_funcion ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                       Symbol symbol = (Symbol) CUP$parser$stack.peek();
                       parser.agregarTablaSimbolos("funcion", id.toString());
                       parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                       textSection();
                       // Generar la etiqueta de la función
                       parser.gen("\n# Inicio de la función " + id.toString() + "\n" + id.toString() + ":");

                       // Guardar el valor de retorno y marco de pila
                       parser.gen("addi $sp, $sp, -8");  // Reservar espacio para $ra y $fp
                       parser.gen("sw $ra, 4($sp)");    // Guardar $ra en la pila
                       parser.gen("sw $fp, 0($sp)");    // Guardar $fp en la pila
                       parser.gen("move $fp, $sp");    // Actualizar el marco de pila
                       parser.gen("addi $sp, $sp, -4");
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera_funcion ::= tipo IDENTIFICADOR NT$1 declaracion_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       // Restaurar registros y salir de la función
                       parser.gen("\n# Fin de la función " + id.toString());
                       parser.gen("move $sp, $fp");
                       parser.gen("lw $ra, 4($sp)");  // Restaurar $ra
                       parser.gen("lw $fp, 0($sp)");  // Restaurar $fp
                       parser.gen("addi $sp, $sp, 8"); // Restaurar el espacio en la pila
                       parser.gen("jr $ra");          // Regresar al llamador
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera_funcion ::= error IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= corcheteIzquierdo NT$2 lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque ::= corcheteIzquierdo NT$3 return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;

                        parser.bloqueActual++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloqueEstructura ::= corcheteIzquierdo NT$4 contenido_estructura_control 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueEstructura ::= corcheteIzquierdo error corcheteDerecho error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenido_estructura_control ::= corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenido_estructura_control ::= lista_sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenido_estructura_control ::= lista_sentencias return_estructura_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contenido_estructura_control ::= return_estructura_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contenido_estructura_control ::= return_estructura_stmt error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contenido_estructura_control ::= lista_sentencias return_estructura_stmt error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido_estructura_control",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_sentencias ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en una sentencia."); errorCount++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_sentencias ::= lista_sentencias error 
            {
              Object RESULT =null;
		
                              System.err.println("Error sintáctico: Falta el fin expresion al final de una sentencia.");
                              errorCount++;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= print FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= read FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= sentencia error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // print ::= PRINT PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
            int line = symbol.left;
            int column = symbol.right;

            String tipo = (e instanceof Resultado)
                ? ((Resultado) e).tipo
                : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), line, column);
            String temp = (e instanceof Resultado) ? ((Resultado) e).temp : null;
            if ((!tipo.equals("rodolfo") && !tipo.equals("bromista")) && !tipo.equals("cupido") && !tipo.equals("cometa")) {
                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                   ": Solo puede usar el print con enteros, flotantes, cadenas y caracteres. Valor recibido: '" + tipo + "'.");
                                   errorCount++;
            } else {
                if (temp != null) {
                    if (parser.variableOffset.containsKey(temp)) {
                        if (tipo.equals("bromista")) {
                            temp = parser.loadVariableFloat(temp); // Cargar flotante
                        } else {
                            temp = parser.loadVariable(temp); // Cargar variable desde la pila
                        }
                    }

                    if (tipo.equals("cometa")) {
                        parser.gen("la $a0, " + temp);
                        parser.gen("li $v0, 4");
                    } else if (tipo.equals("bromista")) {
                        parser.gen("li $v0, 2");
                        parser.gen("mov.s $f12, " + temp);
                    } else {
                        parser.gen("move $a0, " + temp);

                        switch (tipo) {
                            case "rodolfo":
                                parser.gen("li $v0, 1");
                                break;
                            case "cupido":
                                parser.gen("li $v0, 11");
                                break;
                        }
                    }
                    parser.gen("syscall");
                    parser.gen("li $a0, 10");  // Código ASCII de '\n'
                    parser.gen("li $v0, 11");
                    parser.gen("syscall");
                }
            }

            RESULT = new Resultado(tipo, temp);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // read ::= READ PARENTESISAPERTURA IDENTIFICADOR PARENTESISCIERRE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
            int line = symbol.left;
            int column = symbol.right;

            String tipo = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), id.toString(), line, column);

            if ((!tipo.equals("rodolfo") && !tipo.equals("bromista"))) {
                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                   ": El read solo lee enteros o flotantes.");
                                   errorCount++;
            } else {
                String tempReg = parser.newTemp();

                switch (tipo) {
                    case "rodolfo":
                        parser.gen("li $v0, 5");
                        parser.gen("syscall");
                        parser.gen("move " + tempReg + ", $v0");
                        break;
                    case "bromista":
                        parser.gen("li $v0, 6");
                        parser.gen("syscall");
                        parser.gen("mfc1 " + tempReg + ", $f0");
                        break;
                }

                // Guardar el valor leído en la pila
                parser.storeVariable(id.toString(), tempReg);
                RESULT = new Resultado(tipo, id.toString());
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

                String tipoVar = ((Resultado) t).tipo;

                if (tipoVar.equals("cometa")) {
                    parser.declararString(id.toString(), " ");
                } else {
                    // Solo asignamos espacio si la variable no ha sido declarada antes
                    if (!parser.variableOffset.containsKey(id.toString())) {
                        parser.allocateVariable(id.toString());
                    }

                    // Usar un temporal para inicializar el valor en la pila
                    String temp = parser.newTemp();
                    parser.gen("li " + temp + ", 0");  // Inicializar en 0
                    parser.storeVariable(id.toString(), temp);  // Guardar en la pila
                }
                RESULT = new Resultado(tipoVar, id.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
            int line = symbol.left;
            int column = symbol.right;

            String tipoVar = ((Resultado) t).tipo;
            String tempExpresion = (e == null) ? null : ((Resultado) e).temp;

            if (tipoVar.equals("cometa")) {
                // Usar el identificador del string directamente
                String idString = ((Resultado) e).temp;

                // Declarar el string (si aún no existe) en .data
                parser.declararString(id.toString(), parser.obtenerValorString(idString));

                // Referenciarlo en .text
                parser.gen("la $a0, " + id.toString()); // Cargar la dirección del string
                parser.gen("li $v0, 4"); // Syscall para imprimir cadenas
                //parser.gen("syscall");
            } else if (tipoVar.equals("bromista")) {
                // Si la variable no ha sido asignada, reservar espacio en la pila
                if (!parser.variableOffset.containsKey(id.toString())) {
                    parser.allocateVariable(id.toString());
                }

                // Validar que el temporal correcto se almacene
                if (tempExpresion != null && tempExpresion.startsWith("$")) {
                    parser.storeFloatVariable(id.toString(), tempExpresion); // Usar método de flotantes
                } else {
                    System.err.println("Error interno: Registro temporal inválido para la asignación de '" + id + "'.");
                    errorCount++;
                }
            } else {
                // Si la variable no ha sido asignada, reservar espacio en la pila
                if (!parser.variableOffset.containsKey(id.toString())) {
                    parser.allocateVariable(id.toString());
                }

                // Validar que el temporal correcto se almacene
                if (tempExpresion != null && tempExpresion.startsWith("$")) {
                    parser.storeVariable(id.toString(), tempExpresion);
                } else {
                    System.err.println("Error interno: Registro temporal inválido para la asignación de '" + id + "'.");
                    errorCount++;
                }
            }
            RESULT = new Resultado(tipoVar, id.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion ::= tipo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion error 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new Resultado("rodolfo", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Resultado("cometa", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Resultado("cupido", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Resultado("bromista", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Resultado("trueno", null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                String tipoIdentificador = parser.getTipo(
                parser.listaTablasSimbolos.get(parser.currentHash), id.toString(), symbol.left, symbol.right);
                int line = symbol.left;
                int column = symbol.right;
                String temp;

                if (tipoIdentificador != null) {
                        if (exp == null) {
                            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                               ": Se ha intentado asignar un valor nulo a la variable '" + id + "'.");
                                               errorCount++;
                            temp = null;
                        } else {
                             temp = ((Resultado) exp).temp;
                        }
                    if (tipoIdentificador.equals("cometa")) {
                        // Si es un string, almacenar directamente en .data
                        parser.declararString(id.toString(), parser.obtenerValorString(temp));
                    } else if (parser.variableOffset.containsKey(id.toString())) {
                        // Si es una variable en la pila, almacenarla
                        if (temp != null && temp.startsWith("$")) {
                            parser.storeVariable(id.toString(), temp);
                        } else {
                            System.err.println("Error interno: Registro temporal inválido para la asignación de '" + id + "'.");
                            errorCount++;
                        }
                    } else {
                        System.err.println("Error interno: Variable '" + id + "' no tiene espacio reservado en la pila.");
                        errorCount++;
                    }
                }
                RESULT = new Resultado(tipoIdentificador, id.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= IDENTIFICADOR ASIGNA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= IDENTIFICADOR ASIGNA expresion error 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  System.err.println("Error sintáctico: Falta ';' después de la asignación.");
                  errorCount++;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= literal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                String tipo = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash),
                                               e.toString(), symbol.left, symbol.right);
                int line = symbol.left;
                int column = symbol.right;

                 if (tipo != null) {
                     if (tipo.equals("cometa")) {
                         System.out.println("[DEBUG] Cargando string desde .data");
                         String temp = e.toString(); // La variable es una etiqueta en .data
                         RESULT = new Resultado(tipo, temp);
                     } else if (parser.variableOffset.containsKey(e.toString())) {
                          System.out.println("[DEBUG] Variable '" + e + "' encontrada en la pila.");

                          String temp;
                          if (tipo.equals("bromista")) {
                                System.out.println("[DEBUG] Cargando flotante con loadVariableFloat()");
                                temp = parser.loadVariableFloat(e.toString()); // Cargar flotante correctamente
                          } else {
                                System.out.println("[DEBUG] Cargando entero o carácter con loadVariable()");
                                temp = parser.loadVariable(e.toString()); // Cargar variable estándar
                           }
                            RESULT = new Resultado(tipo, temp);
                    } else {
                        System.err.println("Error interno: Variable '" + e + "' no tiene espacio en la pila.");
                        errorCount++;
                        RESULT = new Resultado("error", null);
                    }
                } else {
                    System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                       ": Variable '" + e + "' no ha sido declarada.");
                                       errorCount++;
                    RESULT = new Resultado("error", null);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion operador_unario 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Obtener el símbolo correspondiente a `e1` para extraer línea y columna
                Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
                int line = symbol.left;
                int column = symbol.right;

                // Obtener el tipo y el temporal de la expresión
                Resultado resultadoE1 = (Resultado) e1;
                String tipo = resultadoE1.tipo;
                String tempE1 = resultadoE1.temp;

                // **Acceder al tipo de operador correctamente**
                String operador = ((Resultado) op).tipo.trim();

                // **Flag para indicar si hay error**
                boolean error = false;

                // Validar tipos para operadores unarios
                if (operador.equals("quien") || operador.equals("grinch")) {
                    if (!tipo.equals("rodolfo")) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": Incremento/Decremento solo aplica a enteros (rodolfo).");
                                           errorCount++;
                        error = true;
                    }
                } else if (operador.equals("-") && !tipo.equals("rodolfo") && !tipo.equals("bromista")) {
                    System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                       ": Negación solo aplica a enteros o flotantes.");
                                       errorCount++;
                    error = true;
                }

                // Si hubo error, asignamos un resultado de error y no ejecutamos más código
                if (error) {
                    RESULT = new Resultado("error", null);
                } else {
                    boolean esFlotante = tipo.equals("bromista");
                    String tempResultado = esFlotante ? parser.newFloatTemp() : parser.newTemp();

                    if (esFlotante) {
                        switch (operador) {
                            case "-": // Negación de flotantes
                                parser.gen("neg.s " + tempResultado + ", " + tempE1);
                                break;
                            default:
                                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                   ": Operación unaria " + operador + " flotante no soportada.");
                                                   errorCount++;
                        }
                    } else {
                        switch (operador) {
                            case "-": // Negación de enteros
                                parser.gen("neg " + tempResultado + ", " + tempE1);
                                break;
                            case "quien": // Incremento para enteros
                                parser.gen("addi " + tempResultado + ", " + tempE1 + ", 1");
                                break;
                            case "grinch": // Decremento para enteros
                                parser.gen("addi " + tempResultado + ", " + tempE1 + ", -1");
                                break;
                            default:
                                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                                                   ": Operación unaria " + operador + " no soportada.");
                                                                                   errorCount++;
                        }
                    }

                    // Solo asignar resultado si no hubo errores
                    RESULT = new Resultado(tipo, tempResultado);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion operador_binario expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
                Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);

                int line1 = symbol1.left;
                int column1 = symbol1.right;
                int line2 = symbol2.left;
                int column2 = symbol2.right;

                // Acceder a los tipos de los operandos desde los objetos Resultado
                if (e1 == null || e2 == null) {
                    System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                       ": Uno o ambos operandos de la operación binaria son nulos.");
                                       errorCount++;
                    RESULT = new Resultado("error", null);
                } else {

                    String tipo1 = ((Resultado) e1).tipo;
                    String tipo2 = ((Resultado) e2).tipo;

                    // Validar los tipos de los operandos
                    if ((!tipo1.equals("rodolfo") && !tipo1.equals("bromista")) ||
                              (!tipo2.equals("rodolfo") && !tipo2.equals("bromista"))) {
                               System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                                  ": Operandos deben ser enteros (rodolfo) o flotantes (bromista).");
                                                                  errorCount++;
                    } else if (!tipo1.equals(tipo2)) {
                               System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                                  ": Tipos incompatibles entre los operandos. Operando 1: " + tipo1 + ", Operando 2: " + tipo2);
                                                                  errorCount++;
                    }else {
                              boolean esFlotante = tipo1.equals("bromista"); // Determinar si es flotante
                              String tipoResultado = esFlotante ? "bromista" : "rodolfo";

                               String temp1 = ((Resultado) e1).temp;
                               String temp2 = ((Resultado) e2).temp;
                               String tempResultado;

                    if (esFlotante) {
                        String tempResultadoF = parser.newFloatTemp();  // Nuevo temporal flotante

                        switch (((Resultado) op).tipo) {
                            case "navidad": // Suma
                                parser.gen("add.s " + tempResultadoF + ", " + temp1 + ", " + temp2);
                                break;
                            case "intercambio": // Resta
                                parser.gen("sub.s " + tempResultadoF + ", " + temp1 + ", " + temp2);
                                break;
                            case "nochebuena": // Multiplicación
                                parser.gen("mul.s " + tempResultadoF + ", " + temp1 + ", " + temp2);
                                break;
                            case "reyes": // División
                                parser.gen("div.s " + tempResultadoF + ", " + temp1 + ", " + temp2);
                                break;
                            case "magos": // MODULO flotante: a % b = a - (trunc(a / b) * b)
                                 String tempDiv = parser.newFloatTemp();
                                 String tempTrunc = parser.newFloatTemp();
                                 String tempMul = parser.newFloatTemp();   // Almacena (a / b) * b
                                 parser.gen("div.s " + tempDiv + ", " + temp1 + ", " + temp2);  //a / b
                                 parser.gen("floor.w.s " + tempTrunc + ", " + tempDiv);
                                 parser.gen("cvt.s.w " + tempTrunc + ", " + tempTrunc);
                                 parser.gen("mul.s " + tempMul + ", " + tempTrunc + ", " + temp2);
                                 parser.gen("sub.s " + tempResultadoF + ", " + temp1 + ", " + tempMul);
                                 break;
                             case "adviento": // Potencia flotante: a^b (solo para exponentes enteros positivos es decir .0)
                                 String tempCounter = parser.newFloatTemp();
                                 String tempOne = parser.newFloatTemp();
                                 String tempMinusOne = parser.newFloatTemp();
                                 String labelPowLoop = "pow_loop_" + parser.currentTemp++;
                                 String labelPowEnd = "pow_end_" + parser.currentTemp++;
                                 parser.gen("li.s " + tempResultadoF + ", 1.0");
                                 parser.gen("li.s " + tempOne + ", 0.0");
                                 parser.gen("c.eq.s " + temp2 + ", " + tempOne);
                                 parser.gen("bc1t " + labelPowEnd);
                                 parser.gen("mov.s " + tempCounter + ", " + temp2);
                                 parser.gen("li.s " + tempMinusOne + ", 1.0");
                                  // Bucle de multiplicación: resultado *= base mientras b > 0
                                  parser.gen(labelPowLoop + ":");
                                  parser.gen("mul.s " + tempResultadoF + ", " + tempResultadoF + ", " + temp1);
                                  parser.gen("sub.s " + tempCounter + ", " + tempCounter + ", " + tempMinusOne); // Decrementar exponente
                                  parser.gen("c.le.s " + tempCounter + ", " + tempOne); // Verificar si exponente llegó a 0
                                  parser.gen("bc1t " + labelPowEnd); // Salir si exponente <= 0
                                  parser.gen("b " + labelPowLoop); // Volver a multiplicar
                                  parser.gen(labelPowEnd + ":");
                                  break;
                            default:
                                System.err.println("Error: Operación flotante no soportada.");
                                errorCount++;
                        }
                        // **Manejar almacenamiento en la pila**
                        if (!tempResultadoF.startsWith("$")) {
                            // Si no es un registro flotante válido, usar la pila
                            parser.storeVariable(tempResultadoF, tempResultadoF);
                        }

                        tempResultado = tempResultadoF;
                    } else {
                        tempResultado = parser.newTemp();  // Usar registros $tX para enteros
                        switch (((Resultado) op).tipo) {
                            case "navidad":
                                parser.gen("add " + tempResultado + ", " + temp1 + ", " + temp2);
                                break;
                            case "intercambio":
                                parser.gen("sub " + tempResultado + ", " + temp1 + ", " + temp2);
                                break;
                            case "nochebuena":
                                parser.gen("mul " + tempResultado + ", " + temp1 + ", " + temp2);
                                break;
                            case "reyes":
                                parser.gen("div " + temp1 + ", " + temp2);
                                parser.gen("mflo " + tempResultado);
                                break;
                            case "magos":
                                parser.gen("div " + temp1 + ", " + temp2);
                                parser.gen("mfhi " + tempResultado);
                                break;
                             case "adviento": // POTENCIA: a^b
                                 String tempCounter = parser.newTemp();  // Contador de lasiteraciones (b)
                                 String tempOne = parser.newTemp();
                                 parser.gen("li " + tempOne + ", 1");
                                 parser.gen("move " + tempResultado + ", " + tempOne); // Inicializar resultado en 1
                                 String labelPowEnd = "pow_end_" + parser.currentTemp++;
                                 parser.gen("beqz " + temp2 + ", " + labelPowEnd);
                                 // Bucle de multiplicación: resultado *= base
                                 String labelPowLoop = "pow_loop_" + parser.currentTemp++;
                                 parser.gen("move " + tempCounter + ", " + temp2);
                                 parser.gen(labelPowLoop + ":");
                                 parser.gen("mul " + tempResultado + ", " + tempResultado + ", " + temp1);
                                 parser.gen("addi " + tempCounter + ", " + tempCounter + ", -1"); // Decrementar exponente
                                 parser.gen("bgtz " + tempCounter + ", " + labelPowLoop); // Repetir si exponente es mayor a 0
                                 parser.gen(labelPowEnd + ":");  // Etiqueta de fin
                                 parser.gen("move " + tempResultado + ", " + tempResultado);
                                 break;
                            default:
                                System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                   ": Operación flotante no soportada.");
                                                   errorCount++;

                        }
                    }
                        // Asignar el resultado con el tipo y el temporal generado
                        RESULT = new Resultado(tipoResultado, tempResultado);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
                    Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                    Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                    int line1 = symbol1.left;
                    int column1 = symbol1.right;
                    int line2 = symbol2.left;
                    int column2 = symbol2.right;
                    String operador = ((Resultado) op).tipo;
                    // Obtener los tipos desde los objetos Resultado
                    if (e1 == null) {
                           e1 = new Resultado("null", null);
                    }
                    if (e2 == null) {
                            e2 = new Resultado("null", null);
                     }
                    String tipo1 = ((Resultado) e1).tipo;
                    String tipo2 = ((Resultado) e2).tipo;

                    // Validar los tipos de los operandos
                    if (op.toString().equals("mary") || op.toString().equals("openslae")) {
                                // Para `mary` y `openslae`, los tipos pueden ser enteros, flotantes o booleanos
                                if ((!tipo1.equals("rodolfo") && !tipo1.equals("bromista") && !tipo1.equals("trueno")) ||
                                    (!tipo2.equals("rodolfo") && !tipo2.equals("bromista") && !tipo2.equals("trueno"))) {
                                    System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                       ": Operadores '" + operador + "' solo admiten enteros (rodolfo), flotantes (bromista) o booleanos (trueno).");
                                                       errorCount++;
                                } else if (!tipo1.equals(tipo2)) {
                                    System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                       ": Tipos incompatibles para operador '" + operador + "'. Operando 1: " + tipo1 + ", Operando 2: " + tipo2);
                                                       errorCount++;
                                } else {
                                // Asignar el tipo resultante para comparaciones relacionales
                                String temp1 = ((Resultado) e1).temp;
                                String temp2 = ((Resultado) e2).temp;
                                String tempResultado = parser.newTemp();

                                // Generación de código MIPS para la comparación
                                switch (operador) {
                                    case "mary": // Igualdad
                                        parser.gen("seq " + tempResultado + ", " + temp1 + ", " + temp2);
                                        break;
                                    case "openslae": // Diferente
                                        parser.gen("sne " + tempResultado + ", " + temp1 + ", " + temp2);
                                    default:
                                        System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                           ": Operador relacional no soportado.");
                                                           errorCount++;

                                }
                                // Asignar el resultado con el tipo booleano (trueno) y el temporal generado
                                RESULT = new Resultado("trueno", tempResultado);
                                }
                            } else {
                                          // Identificar si la comparación es entre flotantes o enteros
                                          boolean esFlotante = tipo1.equals("bromista");

                                          // Obtener los temporales de los operandos
                                          String temp1 = ((Resultado) e1).temp;
                                          String temp2 = ((Resultado) e2).temp;
                                          String tempResultado = parser.newTemp(); // Para almacenar el resultado booleano (1 o 0)

                              if (esFlotante) {
                                  String tempResultadoF = parser.newFloatTemp(); // Crear un nuevo registro flotante
                                  String labelTrue = "label_true_";
                                  String labelEnd = "label_end_";
                                  switch (operador) {
                                      case "snowball": // Menor que
                                          parser.gen("c.lt.s " + temp1 + ", " + temp2);
                                          break;
                                      case "evergreen": // Menor o igual
                                          parser.gen("c.le.s " + temp1 + ", " + temp2);
                                          break;
                                      case "minstix": // Mayor que
                                          parser.gen("c.lt.s " + temp2 + ", " + temp1);
                                          break;
                                      case "upatree": // Mayor o igual
                                          parser.gen("c.le.s " + temp2 + ", " + temp1);
                                          break;
                                      case "mary": // Igualdad
                                          parser.gen("c.eq.s " + temp1 + ", " + temp2);
                                          break;
                                      case "openslae": // Diferente
                                          parser.gen("c.eq.s " + temp1 + ", " + temp2);
                                          parser.gen("bc1t " + labelTrue);
                                          parser.gen("li.s $f0, 1.0"); // Son diferentes, asignar 1.0
                                          parser.gen("mov.s " + tempResultadoF + ", $f0");
                                          parser.gen("b " + labelEnd);
                                          parser.gen(labelTrue + ":");
                                          parser.gen("li.s $f0, 0.0"); // Son iguales, asignar 0.0
                                          parser.gen("mov.s " + tempResultadoF + ", $f0");
                                          parser.gen(labelEnd + ":");
                                          break;
                                      default:
                                          System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                             ": Operador relacional no soportado.");
                                                             errorCount++;
                                  }
                                  if (!operador.equals("openslae")) {
                                      parser.gen("li.s $f0, 0.0"); // Inicializar en 0.0
                                      parser.gen("mov.s " + tempResultadoF + ", $f0");
                                      parser.gen("bc1f " + labelTrue); // Si la comparación es falsa, saltar
                                      parser.gen("li.s $f0, 1.0"); // Si es verdadera, asignar 1.0
                                      parser.gen("mov.s " + tempResultadoF + ", $f0");
                                      parser.gen(labelTrue + ":");
                                  }
                                  tempResultado = tempResultadoF;
                              }
                         else {
                              // Generación de código MIPS para comparaciones de enteros
                             switch (operador) {
                             case "snowball": // Menor que
                                          parser.gen("slt " + tempResultado + ", " + temp1 + ", " + temp2);
                                         break;
                            case "evergreen": // Menor o igual
                                        parser.gen("sle " + tempResultado + ", " + temp1 + ", " + temp2);
                                        break;
                             case "minstix": // Mayor que
                                        parser.gen("sgt " + tempResultado + ", " + temp1 + ", " + temp2);
                                        break;
                             case "upatree": // Mayor o igual
                                        parser.gen("sge " + tempResultado + ", " + temp1 + ", " + temp2);
                                        break;
                             case "mary": // Igualdad
                                          parser.gen("seq " + tempResultado + ", " + temp1 + ", " + temp2);
                                         break;
                             case "openslae": // Diferente
                                    parser.gen("sne " + tempResultado + ", " + temp1 + ", " + temp2);
                                    break;
                              default:
                                    System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                       ": Operador relacional no soportado.");
                                                       errorCount++;
                          }
                      }

                        RESULT = new Resultado("trueno", tempResultado);
                }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       // Obtener los símbolos correspondientes a `e1` y `e2` para extraer línea y columna
                       Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                       Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                       int line1 = symbol1.left;
                       int column1 = symbol1.right;
                       int line2 = symbol2.left;
                       int column2 = symbol2.right;

                       // Validar que `e1` y `e2` no sean nulos
                       if (e1 == null) {
                           e1 = new Resultado("null", null);
                       }
                       if (e2 == null) {
                           e2 = new Resultado("null", null);
                       }

                       // Obtener los tipos desde los objetos Resultado
                       String tipo1 = ((Resultado) e1).tipo;
                       String tipo2 = ((Resultado) e2).tipo;

                       // Verificar que ambos operandos sean booleanos
                       if (!tipo1.equals("trueno") || !tipo2.equals("trueno")) {
                           System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                              ": Operadores lógicos requieren valores booleanos (trueno).");
                                              errorCount++;
                       } else {
                           // Generar código MIPS para operadores lógicos
                           String temp1 = ((Resultado) e1).temp;
                           String temp2 = ((Resultado) e2).temp;
                           String tempResultado = parser.newTemp();

                           switch (((Resultado) op).tipo) {
                               case "melchor": // AND lógico
                                   parser.gen("and " + tempResultado + ", " + temp1 + ", " + temp2);
                                   break;
                               case "gaspar": // OR lógico
                                   parser.gen("or " + tempResultado + ", " + temp1 + ", " + temp2);
                                   break;
                               default:
                                   System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                       ": Operador logico no soportado.");
                                                       errorCount++;
                           }

                           // Asignar el resultado con el tipo booleano (trueno) y el temporal generado
                           RESULT = new Resultado("trueno", tempResultado);
                       }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Symbol symbol = (Symbol) CUP$parser$stack.peek();
              int line = symbol.left;
              int column = symbol.right;
              // Obtener el tipo y el temporal de la expresión
              Resultado resultadoE = (Resultado) e;
              String tipo = resultadoE.tipo;
              String tempE = resultadoE.temp;
              boolean esFlotante = tipo.equals("bromista");
              String tempResultado = esFlotante ? parser.newFloatTemp() : parser.newTemp();
              if (esFlotante) {
                    parser.gen("li.s $f1, 0.0");
                    parser.gen("li.s $f2, 1.0");
                    parser.gen("c.eq.s " + tempE + ", $f1");  // Comparar tempE con 0.0 (para !x)
                    parser.gen("movt.s " + tempResultado + ", $f2");
                    parser.gen("movf.s " + tempResultado + ", $f1");
              } else {
                    parser.gen("seq " + tempResultado + ", " + tempE + ", $zero");
              }
                 RESULT = new Resultado(tipo, tempResultado);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= operador_relacional error 
            {
              Object RESULT =null;
		
          Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
          Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
          int line1 = symbol1.left;
          int column1 = symbol1.right;
          int line2 = symbol2.left;
          int column2 = symbol2.right;
          System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                                                  ": No pueden haber dos operandos seguidos.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= operador_binario error 
            {
              Object RESULT =null;
		
                     Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                     Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                     int line1 = symbol1.left;
                     int column1 = symbol1.right;
                     int line2 = symbol2.left;
                     int column2 = symbol2.right;
                     System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                                                                 ": No pueden haber dos operandos seguidos.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= operador_logico error 
            {
              Object RESULT =null;
		
                                 Symbol symbol1 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 3);
                                 Symbol symbol2 = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                                 int line1 = symbol1.left;
                                 int column1 = symbol1.right;
                                 int line2 = symbol2.left;
                                 int column2 = symbol2.right;
                                 System.err.println("Error semántico en línea " + (line1 + 1) + ", columna " + (column1 + 1) +
                                                                                                             ": No pueden haber dos operandos seguidos.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
        parser.gen("li " + temp + ", " + symbol.value);
        RESULT = new Resultado("rodolfo", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           Symbol symbol = (Symbol) CUP$parser$stack.peek();
           String tempInt = parser.newTemp();
           String tempFloat = parser.newFloatTemp(); // Registro flotante

           parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
           String ieee754Hex = parser.floatToIEEE754(symbol.value.toString());
           parser.gen("li " + tempInt + ", " + ieee754Hex); // Cargar valor IEEE 754 en un registro entero
           parser.gen("mtc1 " + tempInt + ", " + tempFloat); // Moverlo a un registro flotante
           RESULT = new Resultado("bromista", tempFloat);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Symbol symbol = (Symbol) CUP$parser$stack.peek();
              String id = "_string_" + parser.currentTemp++;  // Generar un identificador único válido

              // Declarar el string en la sección .data con el valor correcto
              parser.declararString(id, symbol.value.toString());

              // Devolver un resultado con el tipo y el identificador del string
              RESULT = new Resultado("cometa", id);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
        parser.gen("li " + temp + ", '" + symbol.value + "'");
        RESULT = new Resultado("cupido", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "trueno");
        parser.gen("li " + temp + ", 1");
        RESULT = new Resultado("trueno", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        String temp = parser.newTemp();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "trueno");
        parser.gen("li " + temp + ", 0");
        RESULT = new Resultado("trueno", temp);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_binario ::= SUMA 
            {
              Object RESULT =null;
		RESULT = new Resultado("navidad", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_binario ::= RESTA 
            {
              Object RESULT =null;
		RESULT = new Resultado("intercambio", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;
		RESULT = new Resultado("reyes", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT = new Resultado("nochebuena", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_binario ::= MODULO 
            {
              Object RESULT =null;
		RESULT = new Resultado("magos", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT = new Resultado("adviento", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT = new Resultado("quien", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT = new Resultado("grinch", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador_unario ::= NEGATIVO 
            {
              Object RESULT =null;
		RESULT = new Resultado("-", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT = new Resultado("melchor", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT = new Resultado("gaspar", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operador_logico ::= NEGACION 
            {
              Object RESULT =null;
		RESULT = new Resultado("baltazar", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT = new Resultado("snowball", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("evergreen", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT = new Resultado("minstix", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("upatree", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT = new Resultado("mary", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT = new Resultado("openslae", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructura_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_stmt ::= if_stmt_cabecera if_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_stmt_cabecera ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (e == null) {
                Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
                int line = symbol.left;
                int column = symbol.right;

                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                   ": Se ha intentado utilizar una expresión con valor nulo en el if.");
                errorCount++;
            } else {

                  parser.etiquetaTrue = "_etiqueta_true_" + parser.currentTemp++;
                  parser.etiquetaEndIf = "_etiqueta_end_if" + parser.currentTemp++;
                  parser.etiquetaEndElse = "_etiqueta_end_else" + parser.currentTemp++;

                  parser.gen("bne " + ((Resultado) e).temp + ", $zero, " + etiquetaTrue);
                  parser.gen("j " + etiquetaEndIf);

                  parser.gen(etiquetaTrue + ":");
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_cabecera",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_stmt_cabecera ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_cabecera",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_stmt_cabecera ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE error ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_cabecera",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_stmt_cabecera ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_cabecera",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_stmt_aux ::= bloqueEstructura 
            {
              Object RESULT =null;
		
                    parser.gen(parser.etiquetaEndIf + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$5 ::= 
            {
              Object RESULT =null;

                    parser.gen("j " + etiquetaEndElse);
                    parser.gen(parser.etiquetaEndIf + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt_aux ::= bloqueEstructura NT$5 ELSE if_else_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_else_stmt ::= bloqueEstructura 
            {
              Object RESULT =null;
		
                   parser.gen(parser.etiquetaEndElse + ":");
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$6 ::= 
            {
              Object RESULT =null;

                   parser.etiquetaInicioWhile = "_while_start_" + parser.currentTemp++;
                   parser.etiquetaEndWhile = "_while_end_" + parser.currentTemp++;

                   // Generar la etiqueta de inicio del bucle
                   parser.gen(parser.etiquetaInicioWhile + ":");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    if (e == null) {
                        Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                        int line = symbol.left;
                        int column = symbol.right;

                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": Se ha intentado utilizar una expresión con valor nulo.");
                        errorCount++;
                    }
                    else {
                   // Generar la condición del bucle
                   parser.gen("beq " + ((Resultado) e).temp + ", $zero, " + parser.etiquetaEndWhile);
                   }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_stmt ::= WHILE PARENTESISAPERTURA NT$6 expresion NT$7 PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                   // Generar el código del cuerpo del bucle
                   parser.gen("j " + parser.etiquetaInicioWhile); // Volver al inicio
                   parser.gen(parser.etiquetaEndWhile + ":");    // Etiqueta de salida
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_stmt ::= WHILE PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_stmt ::= for_stmt_cabecera for_camino for_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_stmt_cabecera ::= FOR PARENTESISAPERTURA 
            {
              Object RESULT =null;
		
                   // Generar etiquetas para el inicio y fin del bucle
                   parser.etiquetaInicioFor = "_for_start_" + parser.currentTemp++;
                   parser.etiquetaEndFor = "_for_end_" + parser.currentTemp++;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt_cabecera",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_camino ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   // Guardar el nombre de la variable del iterador
                   parser.iteradorForActual = ((Resultado) e).temp;

                   // Generar la etiqueta de inicio del bucle
                   parser.gen(parser.etiquetaInicioFor + ":");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_camino",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_camino ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   // Guardar el nombre de la variable del iterador
                   parser.iteradorForActual = ((Resultado) e).temp;

                   // Generar la etiqueta de inicio del bucle
                   parser.gen(parser.etiquetaInicioFor + ":");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_camino",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_camino ::= declaracion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_camino",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_camino ::= asignacion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_camino",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                   if (e == null) {
                       Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 1);
                       int line = symbol.left;
                       int column = symbol.right;
                       System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                          ": Se ha intentado utilizar una expresión con valor nulo en el for.");
                       errorCount++;
                   } else {
                       // Evaluar la condición del bucle
                       parser.gen("beq " + ((Resultado) e).temp + ", $zero, " + parser.etiquetaEndFor);
                   }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                   // Se ejecutará después de `bloqueEstructura`
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_stmt_aux ::= expresion FIN_EXPRESION NT$8 expresion PARENTESISCIERRE NT$9 bloqueEstructura 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.gen("# Aplicando actualización del for");

                        if (parser.iteradorForActual != null) {

                            String tempUpdate = ((Resultado) e2).temp;

                            // Si tempUpdate es $t0, usamos $t1. Si no, dejamos $t0.
                            String registroCarga = tempUpdate.equals("$t0") ? "$t1" : "$t0";

                            String direccionIterador = parser.getVariableAddress(parser.iteradorForActual);

                            // Cargar el valor actual del iterador desde la pila en el registro correcto
                            parser.gen("lw " + registroCarga + ", " + direccionIterador);

                            if (tempUpdate != null) {  // Verificar que tempUpdate no sea nulo
                                if (tempUpdate.startsWith("addi") || tempUpdate.startsWith("subi")) {
                                    // Si la actualización ya es una instrucción válida, la usamos directamente
                                    parser.gen(tempUpdate.replaceFirst("\\$t\\d+", registroCarga));
                                } else {
                                    // Si solo es un registro temporal, debemos generar la asignación explícita
                                    parser.gen("move " + registroCarga + ", " + tempUpdate);
                                }

                                // Guardar el nuevo valor del iterador en la pila
                                parser.gen("sw " + registroCarga + ", " + direccionIterador);
                            } else {
                            // Obtener línea y columna para el mensaje de error
                            Symbol symbol = (Symbol) CUP$parser$stack.peek();
                            int line = symbol.left;
                            int column = symbol.right;

                            // Lanzar error semántico si tempUpdate es nulo
                            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                               ": Expresión de actualización inválida en el for.");
                                               errorCount++;
                        }
                    }


                   parser.gen("j " + parser.etiquetaInicioFor);
                   parser.gen(parser.etiquetaEndFor + ":");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_stmt_aux ::= expresion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // switch_stmt ::= switch_cabecera case_list default_stmt switch_cierre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // switch_stmt ::= switch_cabecera case_list switch_cierre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // switch_stmt ::= SWITCH PARENTESISAPERTURA error PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // switch_cabecera ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   // Crear etiqueta global para salir del switch
                   parser.etiquetaEndSwitch = "_switch_end_" + parser.currentTemp++;
                   parser.etiquetaDefault = "_default_" + parser.currentTemp++;

                   // Guardar el valor de la expresión del switch
                   parser.tempSwitch = ((Resultado) e).temp;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_cabecera",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // switch_cierre ::= corcheteDerecho 
            {
              Object RESULT =null;
		
                   // Generar la etiqueta de salida del switch
                   parser.gen(parser.etiquetaEndSwitch + ":");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_cierre",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_list ::= case_list error case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                // Crear etiquetas
                String etiquetaCase = "_case_" + parser.caseNumber;
                String etiquetaSiguienteCase = "_case_next_" + parser.caseNumber;
                parser.caseNumber++;

                // Comparar la expresión del switch con el valor del case
                parser.gen("beq " + parser.tempSwitch + ", " + ((Resultado) e).temp + ", " + etiquetaCase);
                parser.gen("j " + etiquetaSiguienteCase);  // Saltar al siguiente case

                // Definir la etiqueta del case
                parser.gen(etiquetaCase + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_stmt ::= CASE expresion NT$10 DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                // Al final de la ejecución del case, saltar al final del switch
                parser.gen("j " + parser.etiquetaEndSwitch);

                // Solo generar etiqueta _case_next_ si hay más cases después
                if (parser.caseNumber > 0) {
                    parser.gen("_case_next_" + (parser.caseNumber - 1) + ":");
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_stmt ::= CASE error DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$11 ::= 
            {
              Object RESULT =null;

                   // Generar la etiqueta para el default solo si no existe aún
                   if (!parser.etiquetaDefault.equals("_default_")) {
                       parser.gen(parser.etiquetaDefault + ":");
                   }

                   // El default no debe hacer un salto al final aquí, ya que ejecuta directamente su código
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // default_stmt ::= DEFAULT DOS_PUNTOS NT$11 lista_sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Symbol symbol = (Symbol) CUP$parser$stack.peek();
                         parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

                         // Validación del tipo permitido
                         if (!((Resultado) t).tipo.equals("rodolfo") && !((Resultado) t).tipo.equals("cupido")) {
                             System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                                 ": Solo se permiten variables de tipo 'rodolfo' (int) o 'cupido' (char).");
                                                 errorCount++;
                         } else {
                             System.out.println("Declaración válida: arreglo '" + id + "' de tipo '" + ((Resultado) t).tipo + "'.");
                         }
                         String tempIndice = ((Resultado) a).temp;
                         String tempSize = parser.newTemp();
                         String tempBase = parser.newTemp();
                         String tempRegistro = parser.newTemp();

                         parser.gen("mul " + tempSize + ", " + tempIndice + ", 4");
                         parser.gen("li $v0, 9");
                         parser.gen("move $a0, " + tempSize);
                         parser.gen("syscall");

                         parser.gen("move " + tempBase + ", $v0");
                         parser.gen("li " + tempRegistro + ", 3");
                         parser.gen("sw " + tempRegistro + ", 0(" + tempBase + ")");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);

                    String tipoExpresion = (e instanceof Resultado)
                        ? ((Resultado) e).tipo
                        : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), symbol.left, symbol.right);

                    // Validación de compatibilidad de tipos
                    if (!((Resultado) t).tipo.equals(tipoExpresion)) {
                        System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                           ": Incompatibilidad de tipos. La variable '" + id + "' es de tipo '" + ((Resultado) t).tipo +
                                           "', pero se le asignó una expresión de tipo '" + tipoExpresion + "'.");
                                           errorCount++;
                    } else if (!((Resultado) t).tipo.equals("rodolfo") && !((Resultado) t).tipo.equals("cupido")) {
                         System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                             ": Solo se permiten asignaciones a variables de tipo 'rodolfo' (int) o 'cupido' (char).");
                                             errorCount++;
                    } else {
                        // Generación de código MIPS para asignación
                        String temp = ((Resultado) e).temp;
                        parser.gen("la $t0, " + id);
                        parser.gen("sw " + temp + ", 0($t0)");
                        System.out.println("Asignación a arreglo válida: '" + id + "'.");
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA corcheteIzquierdo parametrosArreglos corcheteDerecho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                        System.out.println("Declaración y asignación de arreglo inicializado: '" + id + "'.");

                         String tempIndice = ((Resultado) a).temp;
                         String tempSize = parser.newTemp();
                         String tempBase = parser.newTemp();
                         String tempRegistro = parser.newTemp();

                         parser.gen("li " + tempSize + ", " + tempIndice + ", 4");
                         parser.gen("li $v0, 9");
                         parser.gen("move $a0, " + tempSize);
                         parser.gen("syscall");
                         parser.gen("move " + tempBase + ", $v0");
                         parser.gen("li " + tempRegistro + ", 3");
                         parser.gen("sw " + tempRegistro + ", 0(" + tempBase + ")");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        String tipoExpresion = (e instanceof Resultado)
                            ? ((Resultado) e).tipo
                            : parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), e.toString(), symbol.left, symbol.right);
                        if (tipoExpresion != null) {
                            String temp = ((Resultado) e).temp;
                            parser.gen("la $t0, " + id);
                            parser.gen("sw " + temp + ", 0($t0)");
                            System.out.println("Asignación directa a arreglo válida: '" + id + "'.");
                        } else {
                            System.err.println("Error semántico en línea " + (symbol.left + 1) + ", columna " + (symbol.right + 1) +
                                               ": El valor asignado al arreglo no tiene un tipo válido.");
                                               errorCount++;
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parametrosArreglos ::= parametrosArreglosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$12 ::= 
            {
              Object RESULT =null;

                              // Generar un resultado con el separador de coma para unir parámetros
                              RESULT = new Resultado(",", null);
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametrosArreglosAux ::= parametrosArreglosAux COMA NT$12 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              int line = symbol.left;
                              int column = symbol.right;
                              // Validar y asignar el resultado de la expresión
                                if (e instanceof Resultado) {
                                    Resultado resExp = (Resultado) e;
                                    if (resExp.tipo == null) {
                                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                           ": La expresión del parámetro no tiene un tipo válido.");
                                                           errorCount++;
                                    }
                                    RESULT = resExp;
                                } else {
                                    System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                       ": El resultado de la expresión no es válido.");
                                                       errorCount++;
                                }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametrosArreglosAux ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              int line = symbol.left;
                              int column = symbol.right;
                              // Validar y asignar el resultado de la expresión directamente
                                if (e instanceof Resultado) {
                                    Resultado resExp = (Resultado) e;
                                    if (resExp.tipo == null) {
                                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                           ": La expresión del parámetro no tiene un tipo válido.");
                                                           errorCount++;
                                    }
                                    RESULT = resExp;
                                } else {
                                    System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                       ": El resultado de la expresión no es válido.");
                                                       errorCount++;
                                }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arreglo ::= declaracionArreglo 
            {
              Object RESULT =null;
		
                RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arreglo ::= arreglo declaracionArreglo 
            {
              Object RESULT =null;
		
                RESULT = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$13 ::= 
            {
              Object RESULT =null;

                        RESULT = new Resultado("abreempaque", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        int line = symbol.left;
                        int column = symbol.right;

                        if (e instanceof Resultado) {
                            Resultado resExp = (Resultado) e;
                            if (!"rodolfo".equals(resExp.tipo)) {
                                System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                                   ": El índice del arreglo debe ser un entero (rodolfo), pero se encontró '" + resExp.tipo + "'.");
                                                   errorCount++;
                            }
                            RESULT = resExp;
                        } else {
                            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                               ": Expresión inválida en el índice del arreglo.");
                                               errorCount++;
                            RESULT = new Resultado("null", null);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // acceso_arreglo ::= CORCHETEAPERTURA NT$13 expresion NT$14 CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new Resultado("cierraempaque", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // acceso_arreglo ::= CORCHETEAPERTURA error CORCHETECIERRE 
            {
              Object RESULT =null;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.elementAt(CUP$parser$stack.size() - 2);
                        int line = symbol.left;
                        int column = symbol.right;

                        // Mensaje de error detallado
                        System.err.println("Error sintáctico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": Índice del arreglo inválido.");
                                           errorCount++;

                        // Devolver un resultado seguro para evitar fallos posteriores
                        RESULT = new Resultado("null", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // lista_parametros ::= lista_parametros COMA tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lista_parametros ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), ((Resultado) t).tipo);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_parametros ::= lista_parametros error tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // llamada_funcion ::= IDENTIFICADOR llamada_funcion_aux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        int line = symbol.left;
        int column = symbol.right;

        // Construir una tabla global combinada
        ArrayList<String> tablaGlobal = new ArrayList<>();
        parser.listaTablasSimbolos.values().forEach(tabla -> {
            if (tabla != null) tablaGlobal.addAll(tabla);
        });

        // Obtener el tipo de la función
        String tipoFuncion = parser.getTipo(tablaGlobal, id.toString(), line, column);

        if (tipoFuncion.equals("null")) {
            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                               ": La función '" + id + "' no está declarada en ninguna tabla de símbolos.");
                               errorCount++;
            RESULT = new Resultado("null", null);
        } else {
            String tempResultado = null;
                if (!tipoFuncion.equals("void")) {
                    tempResultado = parser.newTemp();

                    // Primero guardar el espacio actual del stack
                    parser.gen("# Guardando registros temporales");
                    parser.gen("move $s7, $sp");  // Usar $s7 como temporal para guardar $sp actual

                    // Ajustar stack y guardar registros
                    parser.gen("addi $sp, $sp, -40");  // Espacio exacto para los 10 registros
                    parser.gen("sw $t0, 36($sp)");
                    parser.gen("sw $t1, 32($sp)");
                    parser.gen("sw $t2, 28($sp)");
                    parser.gen("sw $t3, 24($sp)");
                    parser.gen("sw $t4, 20($sp)");
                    parser.gen("sw $t5, 16($sp)");
                    parser.gen("sw $t6, 12($sp)");
                    parser.gen("sw $t7, 8($sp)");
                    parser.gen("sw $t8, 4($sp)");
                    parser.gen("sw $t9, 0($sp)");

                    // Llamada a función
                    parser.gen("jal " + id);

                    // Restaurar usando el $sp guardado
                    parser.gen("# Restaurando registros temporales");
                    parser.gen("lw $t0, 36($sp)");
                    parser.gen("lw $t1, 32($sp)");
                    parser.gen("lw $t2, 28($sp)");
                    parser.gen("lw $t3, 24($sp)");
                    parser.gen("lw $t4, 20($sp)");
                    parser.gen("lw $t5, 16($sp)");
                    parser.gen("lw $t6, 12($sp)");
                    parser.gen("lw $t7, 8($sp)");
                    parser.gen("lw $t8, 4($sp)");
                    parser.gen("lw $t9, 0($sp)");

                    // Restaurar stack pointer
                    parser.gen("move $sp, $s7");

                    parser.gen("move " + tempResultado + ", $v0");
                } else {
                    parser.gen("jal " + id);
                }

            System.out.println("Invocación válida: " + id + " de tipo: " + tipoFuncion);
            RESULT = new Resultado(tipoFuncion, tempResultado);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // llamada_funcion_aux ::= PARENTESISAPERTURA lista_expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // llamada_funcion_aux ::= PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // llamada_funcion_aux ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_aux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$15 ::= 
            {
              Object RESULT =null;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lista_expresiones ::= lista_expresiones COMA NT$15 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // lista_expresiones ::= lista_expresiones error expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // return_stmt ::= RETURN expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Symbol symbol = (Symbol) CUP$parser$stack.peek();
                int line = symbol.left;
                int column = symbol.right;

                String tipoFuncion = parser.getTipo(parser.listaTablasSimbolos.get(parser.currentHash), parser.currentHash, line, column);

                if (e == null) {
                    if (!tipoFuncion.equals("void")) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": La función requiere un valor de retorno de tipo '" + tipoFuncion + "', pero se encontró 'void'.");
                                           errorCount++;
                    } else {
                        System.out.println("Retorno válido: void en función de tipo void.");
                        // Limpiar el stack frame antes de retornar
                        parser.gen("move $sp, $fp");         // Restaurar stack pointer
                        parser.gen("lw $ra, 4($sp)");        // Restaurar $ra
                        parser.gen("lw $fp, 0($sp)");        // Restaurar $fp
                        parser.gen("addi $sp, $sp, 8");      // Ajustar stack pointer
                        parser.gen("jr $ra");                // Retornar
                        RESULT = new Resultado("void", null);
                    }
                } else {
                    Resultado resultadoExpresion = (Resultado) e;
                    String tipoExpresion = resultadoExpresion.tipo;

                    if (!tipoFuncion.equals(tipoExpresion)) {
                        System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                           ": Tipo de retorno (" + tipoExpresion + ") no coincide con el tipo de la función (" + tipoFuncion + ").");
                                           errorCount++;
                    } else {
                        System.out.println("Retorno válido: tipo '" + tipoExpresion + "'.");

                        if (resultadoExpresion.temp != null) {
                            parser.gen("move $v0, " + resultadoExpresion.temp);
                            // Limpiar el stack frame antes de retornar
                            parser.gen("move $sp, $fp");     // Restaurar stack pointer
                            parser.gen("lw $ra, 4($sp)");    // Restaurar $ra
                            parser.gen("lw $fp, 0($sp)");    // Restaurar $fp
                            parser.gen("addi $sp, $sp, 8");  // Ajustar stack pointer
                            parser.gen("jr $ra");            // Retornar
                        } else {
                            System.err.println("Error semántico en línea " + (line + 1) + ", columna " + (column + 1) +
                                               ": El temporal para el valor de retorno es null.");
                                               errorCount++;
                        }
                    }

                    RESULT = new Resultado(tipoExpresion, resultadoExpresion.temp);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		
                // Para return sin expresión
                parser.gen("move $sp, $fp");     // Restaurar stack pointer
                parser.gen("lw $ra, 4($sp)");    // Restaurar $ra
                parser.gen("lw $fp, 0($sp)");    // Restaurar $fp
                parser.gen("addi $sp, $sp, 8");  // Ajustar stack pointer
                parser.gen("jr $ra");            // Retornar
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // return_stmt ::= RETURN error 
            {
              Object RESULT =null;
		
                    Symbol symbol = (Symbol) CUP$parser$stack.peek();
                    int line = symbol.left;
                    int column = symbol.right;

                    System.err.println("Error sintáctico en línea " + (line + 1) + ", columna " + (column + 1) +
                                       ": Retorno inválido. Asegúrese de que la expresión de retorno sea válida.");
                                       errorCount++;
                    RESULT = new Resultado("null", null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // return_estructura_stmt ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // return_estructura_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // return_estructura_stmt ::= RETURN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
