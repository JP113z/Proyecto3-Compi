
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\003\007\000\002\003\010\000\002" +
    "\003\007\000\002\034\007\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\004\007\000\002\004\006" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\007\000\002\006" +
    "\007\000\002\006\004\000\002\007\004\000\002\007\006" +
    "\000\002\007\003\000\002\007\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\010\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\045\002\000\002\011\006\000\002" +
    "\011\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\007\000\002\021\011\000\002\021\007\000\002\021\011" +
    "\000\002\021\011\000\002\022\007\000\002\022\007\000" +
    "\002\023\013\000\002\023\013\000\002\023\007\000\002" +
    "\024\012\000\002\024\011\000\002\024\011\000\002\025" +
    "\004\000\002\025\003\000\002\025\005\000\002\026\006" +
    "\000\002\026\006\000\002\027\005\000\002\027\005\000" +
    "\002\042\005\000\002\042\004\000\002\042\007\000\002" +
    "\042\011\000\002\042\006\000\002\043\003\000\002\046" +
    "\002\000\002\044\006\000\002\044\003\000\002\031\003" +
    "\000\002\031\004\000\002\047\002\000\002\032\006\000" +
    "\002\032\005\000\002\035\003\000\002\050\002\000\002" +
    "\036\007\000\002\036\004\000\002\036\006\000\002\033" +
    "\006\000\002\033\005\000\002\033\006\000\002\051\002" +
    "\000\002\030\006\000\002\030\003\000\002\030\005\000" +
    "\002\037\004\000\002\037\003\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\016\003\013\005\005\006\012\007\016\010" +
    "\006\011\017\001\002\000\004\002\u0105\001\002\000\010" +
    "\003\uffdf\004\uffdf\017\uffdf\001\002\000\010\003\uffdb\004" +
    "\uffdb\017\uffdb\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\020\002" +
    "\000\003\u0104\005\005\006\012\007\016\010\006\011\017" +
    "\001\002\000\020\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\001\002\000\010\003\uffde\004\uffde" +
    "\017\uffde\001\002\000\024\003\370\004\366\005\005\006" +
    "\012\007\016\010\006\011\017\017\371\020\025\001\002" +
    "\000\006\004\021\017\020\001\002\000\020\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002" +
    "\000\010\003\uffdc\004\uffdc\017\uffdc\001\002\000\010\003" +
    "\uffdd\004\uffdd\017\uffdd\001\002\000\004\027\342\001\002" +
    "\000\004\027\022\001\002\000\006\003\023\030\024\001" +
    "\002\000\004\030\340\001\002\000\004\020\025\001\002" +
    "\000\060\003\046\005\005\006\012\007\016\010\006\011" +
    "\017\012\067\013\027\014\030\015\036\017\035\024\045" +
    "\025\063\027\053\044\047\046\043\050\060\051\034\052" +
    "\055\055\051\056\044\060\066\061\057\001\002\000\020" +
    "\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\001\002\000\100\003\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\057\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\001\002\000\100\003\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\057\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\001\002\000\100\003\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\016\uffd6\017\uffd6\021\uffd6\023" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\001\002\000\066\003\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\017\uffb3\021\uffb3\024\uffb3\025\uffb3\027\uffb3\044" +
    "\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\060\uffb3\061\uffb3\001\002\000\100\003" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\023\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\057\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\004" +
    "\027\315\001\002\000\056\022\075\026\312\027\103\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002" +
    "\000\100\003\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\016\uffca\017\uffca\021\uffca\023\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\057\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001" +
    "\002\000\066\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\021" +
    "\uffe9\024\uffe9\025\uffe9\027\uffe9\044\uffe9\046\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\060" +
    "\uffe9\061\uffe9\001\002\000\020\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\017\uff94\045\uff94\001\002\000\004\045" +
    "\310\001\002\000\060\003\230\005\005\006\012\007\016" +
    "\010\006\011\017\012\067\013\027\014\030\015\036\017" +
    "\035\024\045\025\063\027\053\044\047\046\043\050\060" +
    "\051\034\052\055\055\051\056\044\060\066\061\057\001" +
    "\002\000\004\027\267\001\002\000\030\003\266\012\067" +
    "\013\027\014\030\015\036\017\102\024\045\025\063\027" +
    "\053\044\047\045\uff82\001\002\000\100\003\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\016\uffc9\017\uffc9\021" +
    "\uffc9\023\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\001\002\000\006\021\264\045" +
    "\231\001\002\000\024\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\050\031\135\032\136\033\117\034\115\035\122\036\130" +
    "\037\125\040\116\041\131\042\132\043\134\044\123\045" +
    "\262\062\121\063\141\064\120\065\114\066\126\067\124" +
    "\001\002\000\004\045\261\001\002\000\066\003\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\017\uffb4\021\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\044\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4\001\002\000" +
    "\026\003\255\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\044\uffd0\001\002\000\066\003" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\017\uffb2\021\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\044\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\001" +
    "\002\000\004\027\214\001\002\000\006\003\210\017\211" +
    "\001\002\000\004\027\204\001\002\000\004\027\175\001" +
    "\002\000\066\003\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec\021" +
    "\uffec\024\uffec\025\uffec\027\uffec\044\uffec\046\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060" +
    "\uffec\061\uffec\001\002\000\066\003\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\017\uffb5\021\uffb5\024\uffb5\025\uffb5\027\uffb5\044\uffb5" +
    "\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\060\uffb5\061\uffb5\001\002\000\100\003\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\023\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\057\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\004\045" +
    "\174\001\002\000\004\045\173\001\002\000\004\027\167" +
    "\001\002\000\100\003\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\016\uffcd\017\uffcd\021\uffcd\023\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\057\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\001\002\000\020\005\005\006\012\007\016\010\006" +
    "\011\017\017\072\045\uffe1\001\002\000\020\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\017\uff93\045\uff93\001\002" +
    "\000\004\022\075\001\002\000\004\017\074\001\002\000" +
    "\004\022\075\001\002\000\026\003\160\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\017\uff92\024\uff92\025\uff92\027\uff92\044" +
    "\uff92\001\002\000\022\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\017\uff9d\026\077\045\uff9d\001\002\000\026\012" +
    "\067\013\027\014\030\015\036\017\102\020\101\024\045" +
    "\025\063\027\053\044\047\001\002\000\064\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\017\uff9b\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\045\uff9b\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\024\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\102\003\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\023\uffd7\027\103\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\057\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002\000\030\003\106" +
    "\012\067\013\027\014\030\015\036\017\102\024\045\025" +
    "\063\027\053\030\104\044\047\001\002\000\100\003\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\016\uff89\017" +
    "\uff89\021\uff89\023\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\057\uff89\062\uff89\063\uff89" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\001\002\000\054\003" +
    "\uff85\016\uff85\030\uff85\031\135\032\136\033\117\034\115" +
    "\035\122\036\130\037\125\040\116\041\131\042\132\043" +
    "\134\044\123\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\004\030\147\001\002\000\010\003" +
    "\111\016\110\030\112\001\002\000\024\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\017\uff87\024\uff87\025\uff87\027\uff87\044" +
    "\uff87\001\002\000\024\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\100\003\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\016\uff8a\017\uff8a\021\uff8a\023\uff8a\030\uff8a\031\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\057\uff8a\062" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\001\002" +
    "\000\054\003\uff84\016\uff84\030\uff84\031\135\032\136\033" +
    "\117\034\115\035\122\036\130\037\125\040\116\041\131" +
    "\042\132\043\134\044\123\062\121\063\141\064\120\065" +
    "\114\066\126\067\124\001\002\000\024\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\017\uffc4\024\uffc4\025\uffc4\027\uffc4\044" +
    "\uffc4\001\002\000\024\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\024\uffbb\025\uffbb\027\uffbb\044\uffbb\001\002\000" +
    "\024\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\024\uffb7" +
    "\025\uffb7\027\uffb7\044\uffb7\001\002\000\100\003\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\023\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\057\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000\024\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\017\uffc5\024\uffc5\025\uffc5\027" +
    "\uffc5\044\uffc5\001\002\000\024\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\024\uffc7\025\uffc7\027\uffc7\044\uffc7\001" +
    "\002\000\024\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\024\uffba\025\uffba\027\uffba\044\uffba\001\002\000\024\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\044\uffbc\001\002\000\024\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\017\uffc2\024\uffc2\025\uffc2\027\uffc2\044\uffc2" +
    "\001\002\000\024\012\uffb8\013\uffb8\014\uffb8\015\uffb8\017" +
    "\uffb8\024\uffb8\025\uffb8\027\uffb8\044\uffb8\001\002\000\024" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\024\uffc3\025" +
    "\uffc3\027\uffc3\044\uffc3\001\002\000\024\012\067\013\027" +
    "\014\030\015\036\017\102\024\045\025\063\027\053\044" +
    "\047\001\002\000\024\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\024\uffb9\025\uffb9\027\uffb9\044\uffb9\001\002\000" +
    "\024\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\024\uffb6" +
    "\025\uffb6\027\uffb6\044\uffb6\001\002\000\024\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\024\uffbe\025\uffbe\027\uffbe" +
    "\044\uffbe\001\002\000\100\003\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\016\uffd5\017\uffd5\021\uffd5\023\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\057\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\001\002\000\024\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\017\uffbd\024\uffbd\025\uffbd\027\uffbd\044\uffbd\001" +
    "\002\000\100\003\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\057" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\001\002\000\100\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\016\uffc0\017\uffc0\021\uffc0\023\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\001\002\000\024\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\024\012\067\013\027\014\030\015\036\017\102\024\045" +
    "\025\063\027\053\044\047\001\002\000\024\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\024\uffc6\025\uffc6\027\uffc6" +
    "\044\uffc6\001\002\000\100\003\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\016\uffd2\017\uffd2\021\uffd2\023\uffd2" +
    "\030\uffd2\031\135\032\136\033\117\034\115\035\122\036" +
    "\130\037\125\040\116\041\131\042\132\043\134\044\123" +
    "\045\uffd2\057\uffd2\062\121\063\141\064\120\065\114\066" +
    "\126\067\124\001\002\000\100\003\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\016\uffd4\017\uffd4\021\uffd4\023" +
    "\uffd4\030\uffd4\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\045\uffd4\057\uffd4\062\121\063\141\064\120\065\114" +
    "\066\126\067\124\001\002\000\100\003\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\016\uffd3\017\uffd3\021\uffd3" +
    "\023\uffd3\030\uffd3\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\045\uffd3\057\uffd3\062\121\063\141\064\120\065" +
    "\114\066\126\067\124\001\002\000\024\012\067\013\027" +
    "\014\030\015\036\017\102\024\045\025\063\027\053\044" +
    "\047\001\002\000\054\003\uff86\016\uff86\030\uff86\031\135" +
    "\032\136\033\117\034\115\035\122\036\130\037\125\040" +
    "\116\041\131\042\132\043\134\044\123\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\100\003" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\016\uff88" +
    "\017\uff88\021\uff88\023\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\057\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\001\002\000\052" +
    "\016\uff95\021\uff95\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\062\121\063\141\064\120\065\114\066\126\067" +
    "\124\001\002\000\006\016\154\021\uff98\001\002\000\004" +
    "\021\153\001\002\000\020\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\017\uff9a\045\uff9a\001\002\000\024\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\017\uff97\024\uff97\025\uff97\027" +
    "\uff97\044\uff97\001\002\000\024\012\067\013\027\014\030" +
    "\015\036\017\102\024\045\025\063\027\053\044\047\001" +
    "\002\000\052\016\uff96\021\uff96\031\135\032\136\033\117" +
    "\034\115\035\122\036\130\037\125\040\116\041\131\042" +
    "\132\043\134\044\123\062\121\063\141\064\120\065\114" +
    "\066\126\067\124\001\002\000\024\012\067\013\027\014" +
    "\030\015\036\017\102\024\045\025\063\027\053\044\047" +
    "\001\002\000\004\023\161\001\002\000\022\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\017\uff90\026\uff90\045\uff90" +
    "\001\002\000\050\023\163\031\135\032\136\033\117\034" +
    "\115\035\122\036\130\037\125\040\116\041\131\042\132" +
    "\043\134\044\123\062\121\063\141\064\120\065\114\066" +
    "\126\067\124\001\002\000\022\005\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\017\uff91\026\uff91\045\uff91\001\002\000" +
    "\022\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\017\uff9c" +
    "\026\165\045\uff9c\001\002\000\024\012\067\013\027\014" +
    "\030\015\036\017\102\024\045\025\063\027\053\044\047" +
    "\001\002\000\064\005\uff99\006\uff99\007\uff99\010\uff99\011" +
    "\uff99\017\uff99\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\045\uff99\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\024\012\067\013\027\014\030\015" +
    "\036\017\102\024\045\025\063\027\053\044\047\001\002" +
    "\000\050\030\171\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\062\121\063\141\064\120\065\114\066\126\067" +
    "\124\001\002\000\004\045\172\001\002\000\066\003\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\024\uffe6\025\uffe6" +
    "\027\uffe6\044\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\001\002" +
    "\000\066\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\021\uffea" +
    "\024\uffea\025\uffea\027\uffea\044\uffea\046\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060\uffea" +
    "\061\uffea\001\002\000\066\003\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\021\uffeb\024\uffeb\025\uffeb\027\uffeb\044\uffeb\046" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\060\uffeb\061\uffeb\001\002\000\026\003\177\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\050\030\202\031\135\032" +
    "\136\033\117\034\115\035\122\036\130\037\125\040\116" +
    "\041\131\042\132\043\134\044\123\062\121\063\141\064" +
    "\120\065\114\066\126\067\124\001\002\000\004\030\200" +
    "\001\002\000\004\020\025\001\002\000\066\003\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\017\uffab\021\uffab\024\uffab\025\uffab\027" +
    "\uffab\044\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\060\uffab\061\uffab\001\002\000" +
    "\004\020\025\001\002\000\066\003\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\017\uffac\021\uffac\024\uffac\025\uffac\027\uffac\044\uffac" +
    "\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\060\uffac\061\uffac\001\002\000\004\017\205" +
    "\001\002\000\004\030\206\001\002\000\004\045\207\001" +
    "\002\000\066\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\021" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\044\uffe5\046\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060" +
    "\uffe5\061\uffe5\001\002\000\004\045\uffe0\001\002\000\010" +
    "\022\075\026\212\045\uffe3\001\002\000\024\012\067\013" +
    "\027\014\030\015\036\017\102\024\045\025\063\027\053" +
    "\044\047\001\002\000\050\031\135\032\136\033\117\034" +
    "\115\035\122\036\130\037\125\040\116\041\131\042\132" +
    "\043\134\044\123\045\uffe2\062\121\063\141\064\120\065" +
    "\114\066\126\067\124\001\002\000\026\003\216\012\067" +
    "\013\027\014\030\015\036\017\102\024\045\025\063\027" +
    "\053\044\047\001\002\000\050\030\241\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\062\121\063\141\064\120" +
    "\065\114\066\126\067\124\001\002\000\004\030\217\001" +
    "\002\000\004\020\220\001\002\000\004\053\223\001\002" +
    "\000\012\003\uffa3\021\uffa3\053\uffa3\054\uffa3\001\002\000" +
    "\010\003\235\021\237\053\223\001\002\000\026\003\225" +
    "\012\067\013\027\014\030\015\036\017\102\024\045\025" +
    "\063\027\053\044\047\001\002\000\050\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\057\233\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\004\057" +
    "\226\001\002\000\056\003\230\005\005\006\012\007\016" +
    "\010\006\011\017\012\067\013\027\014\030\015\036\017" +
    "\035\024\045\025\063\027\053\044\047\046\043\050\060" +
    "\051\034\052\055\055\051\060\066\061\057\001\002\000" +
    "\064\003\230\005\005\006\012\007\016\010\006\011\017" +
    "\012\067\013\027\014\030\015\036\017\035\021\uffa0\024" +
    "\045\025\063\027\053\044\047\046\043\050\060\051\034" +
    "\052\055\053\uffa0\054\uffa0\055\051\060\066\061\057\001" +
    "\002\000\004\045\231\001\002\000\066\003\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\044\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\001\002\000\066" +
    "\003\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\021\uffed\024\uffed" +
    "\025\uffed\027\uffed\044\uffed\046\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\060\uffed\061\uffed" +
    "\001\002\000\056\003\230\005\005\006\012\007\016\010" +
    "\006\011\017\012\067\013\027\014\030\015\036\017\035" +
    "\024\045\025\063\027\053\044\047\046\043\050\060\051" +
    "\034\052\055\055\051\060\066\061\057\001\002\000\064" +
    "\003\230\005\005\006\012\007\016\010\006\011\017\012" +
    "\067\013\027\014\030\015\036\017\035\021\uffa1\024\045" +
    "\025\063\027\053\044\047\046\043\050\060\051\034\052" +
    "\055\053\uffa1\054\uffa1\055\051\060\066\061\057\001\002" +
    "\000\004\053\223\001\002\000\012\003\uffa4\021\uffa4\053" +
    "\uffa4\054\uffa4\001\002\000\066\003\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\017\uffa5\021\uffa5\024\uffa5\025\uffa5\027\uffa5\044\uffa5" +
    "\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\060\uffa5\061\uffa5\001\002\000\012\003\uffa2" +
    "\021\uffa2\053\uffa2\054\uffa2\001\002\000\004\020\242\001" +
    "\002\000\004\053\223\001\002\000\012\003\235\021\246" +
    "\053\223\054\244\001\002\000\006\003\250\057\251\001" +
    "\002\000\004\021\247\001\002\000\066\003\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\017\uffa6\021\uffa6\024\uffa6\025\uffa6\027\uffa6" +
    "\044\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\060\uffa6\061\uffa6\001\002\000\066" +
    "\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\021\uffa7\024\uffa7" +
    "\025\uffa7\027\uffa7\044\uffa7\046\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7" +
    "\001\002\000\056\003\230\005\005\006\012\007\016\010" +
    "\006\011\017\012\067\013\027\014\030\015\036\017\035" +
    "\024\045\025\063\027\053\044\047\046\043\050\060\051" +
    "\034\052\055\055\051\060\066\061\057\001\002\000\056" +
    "\003\230\005\005\006\012\007\016\010\006\011\017\012" +
    "\067\013\027\014\030\015\036\017\035\024\045\025\063" +
    "\027\053\044\047\046\043\050\060\051\034\052\055\055" +
    "\051\060\066\061\057\001\002\000\060\003\230\005\005" +
    "\006\012\007\016\010\006\011\017\012\067\013\027\014" +
    "\030\015\036\017\035\021\uff9f\024\045\025\063\027\053" +
    "\044\047\046\043\050\060\051\034\052\055\055\051\060" +
    "\066\061\057\001\002\000\060\003\230\005\005\006\012" +
    "\007\016\010\006\011\017\012\067\013\027\014\030\015" +
    "\036\017\035\021\uff9e\024\045\025\063\027\053\044\047" +
    "\046\043\050\060\051\034\052\055\055\051\060\066\061" +
    "\057\001\002\000\024\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\004\030\256\001\002\000\100\003\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\016\uffce\017\uffce\021\uffce\023" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\057\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\001\002\000\050\030\260\031\135\032" +
    "\136\033\117\034\115\035\122\036\130\037\125\040\116" +
    "\041\131\042\132\043\134\044\123\062\121\063\141\064" +
    "\120\065\114\066\126\067\124\001\002\000\100\003\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\016\uffcf\017" +
    "\uffcf\021\uffcf\023\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\057\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000\066\003" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7\024\uffe7\025" +
    "\uffe7\027\uffe7\044\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\001" +
    "\002\000\066\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\021" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\044\uffe8\046\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\060" +
    "\uffe8\061\uffe8\001\002\000\100\003\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\016\uffd1\017\uffd1\021\uffd1\023" +
    "\uffd1\030\uffd1\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\uffd1\043\uffd1\044" +
    "\123\045\uffd1\057\uffd1\062\121\063\141\064\120\065\114" +
    "\066\126\067\124\001\002\000\072\002\uffee\003\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\021\uffee\024\uffee\025\uffee\027" +
    "\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee\001" +
    "\002\000\050\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\045\uff83\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\004\045\uff81\001\002\000\026\003" +
    "\271\012\067\013\027\014\030\015\036\017\102\024\045" +
    "\025\063\027\053\044\047\001\002\000\050\030\276\031" +
    "\135\032\136\033\117\034\115\035\122\036\130\037\125" +
    "\040\116\041\131\042\132\043\134\044\123\062\121\063" +
    "\141\064\120\065\114\066\126\067\124\001\002\000\004" +
    "\030\272\001\002\000\004\020\025\001\002\000\070\003" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\017\uffaf\021\uffaf\024\uffaf\025" +
    "\uffaf\027\uffaf\044\uffaf\046\uffaf\047\274\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061" +
    "\uffaf\001\002\000\004\020\025\001\002\000\066\003\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\017\uffad\021\uffad\024\uffad\025\uffad" +
    "\027\uffad\044\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\060\uffad\061\uffad\001\002" +
    "\000\006\003\277\020\025\001\002\000\004\047\303\001" +
    "\002\000\070\003\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\021" +
    "\uffb1\024\uffb1\025\uffb1\027\uffb1\044\uffb1\046\uffb1\047\301" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\001\002\000\004\020\025\001\002" +
    "\000\066\003\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\021\uffb0" +
    "\024\uffb0\025\uffb0\027\uffb0\044\uffb0\046\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0" +
    "\061\uffb0\001\002\000\004\020\025\001\002\000\066\003" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\017\uffae\021\uffae\024\uffae\025" +
    "\uffae\027\uffae\044\uffae\046\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\001" +
    "\002\000\004\045\306\001\002\000\004\021\307\001\002" +
    "\000\072\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\024\ufff0\025\ufff0\027\ufff0\044\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\060\ufff0\061\ufff0\001\002\000\004\021\311\001" +
    "\002\000\072\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\021\uffef\024\uffef\025\uffef\027\uffef\044\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\060\uffef\061\uffef\001\002\000\026\003\314" +
    "\012\067\013\027\014\030\015\036\017\102\024\045\025" +
    "\063\027\053\044\047\001\002\000\050\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\045\uffda\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\004\045" +
    "\uffd9\001\002\000\020\003\320\005\005\006\012\007\016" +
    "\010\006\011\017\017\321\001\002\000\004\045\332\001" +
    "\002\000\004\045\324\001\002\000\004\030\322\001\002" +
    "\000\006\022\075\026\312\001\002\000\004\020\025\001" +
    "\002\000\066\003\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8\021" +
    "\uffa8\024\uffa8\025\uffa8\027\uffa8\044\uffa8\046\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\060" +
    "\uffa8\061\uffa8\001\002\000\024\012\067\013\027\014\030" +
    "\015\036\017\102\024\045\025\063\027\053\044\047\001" +
    "\002\000\050\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\045\326\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\024\012\067\013\027\014\030\015" +
    "\036\017\102\024\045\025\063\027\053\044\047\001\002" +
    "\000\050\030\330\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\062\121\063\141\064\120\065\114\066\126\067" +
    "\124\001\002\000\004\020\025\001\002\000\066\003\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\017\uffaa\021\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\044\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa\001\002" +
    "\000\024\012\067\013\027\014\030\015\036\017\102\024" +
    "\045\025\063\027\053\044\047\001\002\000\050\031\135" +
    "\032\136\033\117\034\115\035\122\036\130\037\125\040" +
    "\116\041\131\042\132\043\134\044\123\045\334\062\121" +
    "\063\141\064\120\065\114\066\126\067\124\001\002\000" +
    "\024\012\067\013\027\014\030\015\036\017\102\024\045" +
    "\025\063\027\053\044\047\001\002\000\050\030\336\031" +
    "\135\032\136\033\117\034\115\035\122\036\130\037\125" +
    "\040\116\041\131\042\132\043\134\044\123\062\121\063" +
    "\141\064\120\065\114\066\126\067\124\001\002\000\004" +
    "\020\025\001\002\000\066\003\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\021\uffa9\024\uffa9\025\uffa9\027\uffa9\044\uffa9\046" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\060\uffa9\061\uffa9\001\002\000\004\020\025\001" +
    "\002\000\020\002\ufff6\003\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\001\002\000\020\003\344\005\005\006" +
    "\012\007\016\010\006\011\017\030\343\001\002\000\004" +
    "\020\025\001\002\000\004\030\362\001\002\000\004\030" +
    "\360\001\002\000\004\017\357\001\002\000\010\003\351" +
    "\016\350\030\uff8f\001\002\000\014\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\001\002\000\014\005\005\006\012" +
    "\007\016\010\006\011\017\001\002\000\004\017\353\001" +
    "\002\000\010\003\uff8b\016\uff8b\030\uff8b\001\002\000\014" +
    "\005\005\006\012\007\016\010\006\011\017\001\002\000" +
    "\004\017\356\001\002\000\010\003\uff8d\016\uff8d\030\uff8d" +
    "\001\002\000\010\003\uff8c\016\uff8c\030\uff8c\001\002\000" +
    "\004\020\025\001\002\000\020\002\ufff3\003\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\004\020" +
    "\025\001\002\000\020\002\ufff2\003\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\001\002\000\020\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002" +
    "\000\020\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\001\002\000\004\027\u0101\001\002\000\020" +
    "\002\uffff\003\377\005\005\006\012\007\016\010\006\011" +
    "\017\001\002\000\010\004\366\017\371\020\025\001\002" +
    "\000\004\027\372\001\002\000\014\005\005\006\012\007" +
    "\016\010\006\011\017\001\002\000\004\030\374\001\002" +
    "\000\004\020\025\001\002\000\020\002\ufff1\003\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000\020" +
    "\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\001\002\000\024\003\370\004\366\005\005\006\012" +
    "\007\016\010\006\011\017\017\371\020\025\001\002\000" +
    "\020\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\001\002\000\004\030\u0102\001\002\000\004\020" +
    "\025\001\002\000\020\002\ufff5\003\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\001\002\000\026\002\ufffe\003" +
    "\370\004\366\005\005\006\012\007\016\010\006\011\017" +
    "\017\371\020\025\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\016\002\003\003\014\012\013\034\010\040" +
    "\006\041\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\014\012" +
    "\013\034\010\040\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\014\004\364\012\013\034\010\040" +
    "\006\041\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\025\001\001\000\042\005\041\006\060\007\063\010" +
    "\064\011\047\012\055\013\032\020\036\021\061\022\051" +
    "\023\031\024\053\031\067\033\030\037\040\042\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\231\007\063\010\064\011\047\012\055\013\032" +
    "\020\036\021\061\022\051\023\031\024\053\031\067\033" +
    "\030\037\304\042\037\001\001\000\002\001\001\000\010" +
    "\011\264\013\032\033\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\262\013\032\033\030\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\072" +
    "\042\070\001\001\000\002\001\001\000\004\032\163\001" +
    "\001\000\002\001\001\000\004\032\075\001\001\000\004" +
    "\047\156\001\001\000\002\001\001\000\010\011\077\013" +
    "\032\033\030\001\001\000\012\014\136\015\132\016\137" +
    "\017\126\001\001\000\014\011\147\013\032\033\030\043" +
    "\151\044\150\001\001\000\002\001\001\000\012\011\104" +
    "\013\032\030\106\033\030\001\001\000\002\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\144\001\001\000" +
    "\010\011\112\013\032\033\030\001\001\000\002\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\143\013\032\033\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\142\013\032\033\030\001\001" +
    "\000\010\011\141\013\032\033\030\001\001\000\002\001" +
    "\001\000\012\014\136\015\132\016\137\017\126\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\010" +
    "\011\145\013\032\033\030\001\001\000\012\014\136\015" +
    "\132\016\137\017\126\001\001\000\002\001\001\000\012" +
    "\014\136\015\132\016\137\017\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\154" +
    "\001\001\000\010\011\155\013\032\033\030\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\010" +
    "\011\161\013\032\033\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\165\013\032\033\030\001\001\000\012\014\136\015\132" +
    "\016\137\017\126\001\001\000\010\011\167\013\032\033" +
    "\030\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\175\013\032\033\030" +
    "\001\001\000\012\014\136\015\132\016\137\017\126\001" +
    "\001\000\002\001\001\000\004\004\200\001\001\000\002" +
    "\001\001\000\004\004\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\075\001\001\000" +
    "\010\011\212\013\032\033\030\001\001\000\012\014\136" +
    "\015\132\016\137\017\126\001\001\000\010\011\214\013" +
    "\032\033\030\001\001\000\012\014\136\015\132\016\137" +
    "\017\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\221\026\220\001\001\000\002\001\001\000\004" +
    "\026\235\001\001\000\010\011\223\013\032\033\030\001" +
    "\001\000\012\014\136\015\132\016\137\017\126\001\001" +
    "\000\002\001\001\000\040\005\226\006\060\007\063\010" +
    "\064\011\047\012\055\013\032\020\036\021\061\022\051" +
    "\023\031\024\053\031\067\033\030\042\037\001\001\000" +
    "\036\006\231\007\063\010\064\011\047\012\055\013\032" +
    "\020\036\021\061\022\051\023\031\024\053\031\067\033" +
    "\030\042\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\233\006\060\007\063\010" +
    "\064\011\047\012\055\013\032\020\036\021\061\022\051" +
    "\023\031\024\053\031\067\033\030\042\037\001\001\000" +
    "\036\006\231\007\063\010\064\011\047\012\055\013\032" +
    "\020\036\021\061\022\051\023\031\024\053\031\067\033" +
    "\030\042\037\001\001\000\004\026\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\242\026\220\001\001\000\006\026\235" +
    "\027\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\252\006\060" +
    "\007\063\010\064\011\047\012\055\013\032\020\036\021" +
    "\061\022\051\023\031\024\053\031\067\033\030\042\037" +
    "\001\001\000\040\005\251\006\060\007\063\010\064\011" +
    "\047\012\055\013\032\020\036\021\061\022\051\023\031" +
    "\024\053\031\067\033\030\042\037\001\001\000\036\006" +
    "\231\007\063\010\064\011\047\012\055\013\032\020\036" +
    "\021\061\022\051\023\031\024\053\031\067\033\030\042" +
    "\037\001\001\000\036\006\231\007\063\010\064\011\047" +
    "\012\055\013\032\020\036\021\061\022\051\023\031\024" +
    "\053\031\067\033\030\042\037\001\001\000\010\011\256" +
    "\013\032\033\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\136\015\132\016\137\017\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\002" +
    "\001\001\000\012\014\136\015\132\016\137\017\126\001" +
    "\001\000\002\001\001\000\010\011\267\013\032\033\030" +
    "\001\001\000\012\014\136\015\132\016\137\017\126\001" +
    "\001\000\002\001\001\000\004\004\272\001\001\000\002" +
    "\001\001\000\004\004\274\001\001\000\002\001\001\000" +
    "\004\004\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\301\001\001\000\002\001\001\000\004\004" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\312\013\032\033\030\001\001\000\012" +
    "\014\136\015\132\016\137\017\126\001\001\000\002\001" +
    "\001\000\014\007\316\010\315\012\055\031\067\042\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\163\001\001\000\004\004\322\001\001" +
    "\000\002\001\001\000\010\011\324\013\032\033\030\001" +
    "\001\000\012\014\136\015\132\016\137\017\126\001\001" +
    "\000\010\011\326\013\032\033\030\001\001\000\012\014" +
    "\136\015\132\016\137\017\126\001\001\000\004\004\330" +
    "\001\001\000\002\001\001\000\010\011\332\013\032\033" +
    "\030\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\010\011\334\013\032\033\030\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\004" +
    "\004\336\001\001\000\002\001\001\000\004\004\340\001" +
    "\001\000\002\001\001\000\010\012\345\035\344\036\346" +
    "\001\001\000\004\004\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\353\001\001\000\004\012\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\360\001\001\000\002\001\001\000\004\004\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\014\012\013\034\010\040\375" +
    "\001\001\000\004\004\364\001\001\000\002\001\001\000" +
    "\010\012\345\035\372\036\346\001\001\000\002\001\001" +
    "\000\004\004\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\014\004\364\012\013\034\010\040\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u0102\001\001\000\002\001\001\000\014\003\014\004\364" +
    "\012\013\034\010\040\377\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;


    /**public String getTipo(ArrayList<String> listaTablasSimbolos, String id) {
                    String tipo = "null";
                    for (String token : listaTablasSimbolos) {
                        String[] partesToken = token.split(":");
                        if (id.equals(partesToken[0])) {
                            tipo = partesToken[1];
                            break;
                        }
                    }
                    if (tipo.equals("null")) {
                        System.err.println("Error semántico: Variable " + id + " no declarada.");
                    }
                    System.out.println("tipo: " + tipo);
                    return tipo;
                }*/

    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= lista_funciones error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= lista_funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_funciones ::= lista_funciones error funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= declaracion_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_main ::= tipo MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_main ::= tipo MAIN PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_main ::= error MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funcion ::= error IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= corcheteIzquierdo lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= corcheteIzquierdo return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= PRINT PARENTESISAPERTURA expresion PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= READ PARENTESISAPERTURA IDENTIFICADOR PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= tipo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("INTEGER");
       // parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= STRING 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("STRING");
     //   parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cometa";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= CHAR 
            {
              Object RESULT =null;
		
      //  Nodo tipoNode = parser.crearNodo("CHAR");
       // parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cupido";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("FLOAT");
      //  parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= BOOL 
            {
              Object RESULT =null;
		
      //  Nodo tipoNode = parser.crearNodo("BOOL");
     //   parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "trueno";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= IDENTIFICADOR ASIGNA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion operador_unario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion operador_binario expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$0 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= PARENTESISAPERTURA NT$0 expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_binario ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_binario ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_binario ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_unario ::= NEGATIVO 
            {
              Object RESULT =null;
		RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_logico ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE error ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // while_stmt ::= WHILE PARENTESISAPERTURA expresion PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // while_stmt ::= WHILE PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_stmt ::= FOR PARENTESISAPERTURA declaracion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_stmt ::= FOR PARENTESISAPERTURA asignacion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_stmt ::= FOR PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list default_stmt corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_stmt ::= SWITCH PARENTESISAPERTURA error PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_list ::= case_list error case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmt ::= CASE expresion DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmt ::= CASE error DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // default_stmt ::= DEFAULT DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // default_stmt ::= DEFAULT error lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA corcheteIzquierdo parametrosArreglos corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametrosArreglos ::= parametrosArreglosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$1 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametrosArreglosAux ::= parametrosArreglosAux COMA NT$1 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametrosArreglosAux ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arreglo ::= declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arreglo ::= arreglo declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // acceso_arreglo ::= CORCHETEAPERTURA NT$2 expresion CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // acceso_arreglo ::= CORCHETEAPERTURA error CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_parametros ::= lista_parametros COMA NT$3 tipo IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_parametros ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_parametros ::= lista_parametros error tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA lista_expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista_expresiones ::= lista_expresiones COMA NT$4 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_expresiones ::= lista_expresiones error expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // return_stmt ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // return_stmt ::= RETURN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
