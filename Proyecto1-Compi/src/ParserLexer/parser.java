
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\002\004\000\002\073\002\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\054\003\000\002\054\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\057" +
    "\003\000\002\057\003\000\002\061\003\000\002\062\003" +
    "\000\002\007\003\000\002\007\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\067\005\000\002" +
    "\067\004\000\002\067\005\000\002\065\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\063\004\000\002" +
    "\063\003\000\002\064\006\000\002\064\006\000\002\064" +
    "\006\000\002\064\004\000\002\064\005\000\002\064\006" +
    "\000\002\012\003\000\002\012\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\004\000\002\074\002" +
    "\000\002\015\006\000\002\051\004\000\002\051\004\000" +
    "\002\051\003\000\002\016\006\000\002\016\005\000\002" +
    "\016\006\000\002\016\006\000\002\053\005\000\002\053" +
    "\005\000\002\075\002\000\002\021\005\000\002\076\002" +
    "\000\002\021\006\000\002\021\003\000\002\020\004\000" +
    "\002\020\006\000\002\055\006\000\002\055\006\000\002" +
    "\055\006\000\002\055\006\000\002\077\002\000\002\022" +
    "\010\000\002\100\002\000\002\023\007\000\002\024\003" +
    "\000\002\024\004\000\002\025\003\000\002\027\004\000" +
    "\002\027\005\000\002\026\003\000\002\101\002\000\002" +
    "\026\006\000\002\102\002\000\002\030\006\000\002\030" +
    "\006\000\002\103\002\000\002\030\007\000\002\030\006" +
    "\000\002\031\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\004\000\002\060" +
    "\007\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\005\000\002\033\004\000\002\033\005\000\002" +
    "\033\004\000\002\033\007\000\002\034\003\000\002\034" +
    "\003\000\002\035\004\000\002\104\002\000\002\035\005" +
    "\000\002\035\004\000\002\036\005\000\002\036\005\000" +
    "\002\036\007\000\002\066\003\000\002\066\003\000\002" +
    "\066\004\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\105\002\000\002\066\006\000\002\037\003\000" +
    "\002\037\004\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\004\000\002\041" +
    "\011\000\002\041\011\000\002\041\012\000\002\041\007" +
    "\000\002\041\007\000\002\041\010\000\002\042\017\000" +
    "\002\042\015\000\002\042\015\000\002\052\011\000\002" +
    "\052\015\000\002\052\015\000\002\052\014\000\002\043" +
    "\011\000\002\043\012\000\002\043\012\000\002\043\013" +
    "\000\002\044\003\000\002\044\004\000\002\044\004\000" +
    "\002\045\007\000\002\045\007\000\002\056\006\000\002" +
    "\046\004\000\002\017\005\000\002\017\004\000\002\047" +
    "\007\000\002\047\007\000\002\047\006\000\002\047\004" +
    "\000\002\047\006\000\002\050\007\000\002\050\007\000" +
    "\002\050\006\000\002\070\005\000\002\071\004\000\002" +
    "\071\005\000\002\072\003\000\002\072\005\000\002\072" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\006\003\004\016\005\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\000\020\000\021\000\022\000" +
    "\023\000\024\000\025\000\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\020\003\017\020\012" +
    "\021\016\022\022\023\023\024\013\025\021\001\002\000" +
    "\006\003\uffc8\011\uffc8\001\002\000\004\025\ufffd\001\002" +
    "\000\004\025\ufff9\001\002\000\022\002\uffca\003\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\001\002" +
    "\000\004\025\026\001\002\000\004\025\ufffc\001\002\000" +
    "\006\003\uffc4\011\uffc4\001\002\000\022\002\uffff\003\017" +
    "\020\012\021\016\022\022\023\023\024\013\025\021\001" +
    "\002\000\004\003\024\001\002\000\004\025\ufffb\001\002" +
    "\000\004\025\ufffa\001\002\000\006\003\uffc5\011\uffc5\001" +
    "\002\000\022\002\uffc9\003\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\001\002\000\006\003\uffc6\011" +
    "\uffc6\001\002\000\006\003\031\011\030\001\002\000\016" +
    "\012\uffbd\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\001" +
    "\002\000\004\004\uffb9\001\002\000\004\004\033\001\002" +
    "\000\112\003\071\004\102\005\065\010\060\011\101\014" +
    "\131\015\112\020\012\021\016\022\022\023\023\024\013" +
    "\025\052\026\070\027\125\030\062\031\041\032\126\033" +
    "\133\034\074\035\105\040\046\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\052\063\054\113\055\044\056" +
    "\103\064\132\065\037\066\035\067\055\001\002\000\022" +
    "\002\uffc7\003\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\001\002\000\134\003\uffef\004\uffef\005\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052" +
    "\uffef\054\uffef\055\uffef\056\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\001\002\000\126\003\ufff4\004" +
    "\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\062\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\001\002\000\126\003\ufff6\004\ufff6\005\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\001\002\000\036\004\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\051\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\001\002\000\056\005\uff95\012" +
    "\uff95\013\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\062\uff95\064\uff95" +
    "\066\uff95\001\002\000\004\013\270\001\002\000\116\003" +
    "\uff72\004\uff72\005\uff72\010\uff72\011\uff72\013\uff72\014\uff72" +
    "\015\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025" +
    "\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044" +
    "\uff72\045\uff72\046\uff72\052\uff72\054\uff72\055\uff72\056\uff72" +
    "\062\uff72\064\uff72\065\uff72\066\uff72\067\uff72\001\002\000" +
    "\004\011\u0150\001\002\000\020\010\u014a\041\075\042\123" +
    "\043\104\044\114\045\053\046\040\001\002\000\006\064" +
    "\uff88\066\uff88\001\002\000\016\026\070\027\125\064\132" +
    "\065\037\066\035\067\055\001\002\000\134\003\ufff2\004" +
    "\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\001\002\000\064" +
    "\003\ufff3\005\ufff3\012\ufff3\013\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\036\211\037\214\041\075\042" +
    "\123\043\104\044\114\045\053\046\040\062\ufff3\001\002" +
    "\000\044\006\u0142\010\uffa0\011\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\001\002\000" +
    "\036\004\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\051\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\001\002\000\116\003\uffcf\004\uffcf\005\uffcf" +
    "\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\052\uffcf\054\uffcf\055\uffcf\056\uffcf\062\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\001\002\000\126\003\ufff5\004\ufff5" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\001\002\000\024\004\uffac\010\uffac\013\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\001\002" +
    "\000\116\003\uffcb\004\uffcb\005\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\052\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\062\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\001\002\000\016\026\070\027\125\064\132\065\037\066" +
    "\035\067\055\001\002\000\022\004\102\010\u013b\041\075" +
    "\042\123\043\104\044\114\045\053\046\040\001\002\000" +
    "\056\005\uff96\012\uff96\013\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\062\uff96\064\uff96\066\uff96\001\002\000\004\011\u0130\001" +
    "\002\000\114\003\071\004\102\005\u0127\010\060\011\101" +
    "\014\131\015\112\020\012\021\016\022\022\023\023\024" +
    "\013\025\052\026\070\027\125\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\040\046\041\075\042\123\043" +
    "\104\044\114\045\053\046\040\052\063\054\113\055\044" +
    "\056\103\062\u0128\064\132\065\037\066\035\067\055\001" +
    "\002\000\004\003\u0125\001\002\000\042\005\uff7d\012\uff7d" +
    "\013\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\062\uff7d\001\002\000\120\003\uff73\004\uff73\005\uff73\010" +
    "\uff73\011\uff73\013\uff73\014\uff73\015\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\040\uff73" +
    "\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\052" +
    "\uff73\053\u011d\054\uff73\055\uff73\056\uff73\062\uff73\064\uff73" +
    "\065\uff73\066\uff73\067\uff73\001\002\000\126\003\uffee\004" +
    "\uffee\005\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee" +
    "\054\uffee\055\uffee\056\uffee\062\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\001\002\000\116\003\uffdb\004\uffdb\005\uffdb" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\052\uffdb\054\uffdb\055\uffdb\056\uffdb\062\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\020\010\u0117\041\075" +
    "\042\123\043\104\044\114\045\053\046\040\001\002\000" +
    "\116\003\uffcd\004\uffcd\005\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\052\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\001" +
    "\002\000\056\005\uff92\012\uff92\013\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\062\uff92\064\uff92\066\uff92\001\002\000\036\004" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\051\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\001\002\000\042\005\uff81\012\uff81\013\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\062\uff81\001\002" +
    "\000\116\003\uff75\004\uff75\005\uff75\010\uff75\011\uff75\013" +
    "\uff75\014\uff75\015\uff75\020\uff75\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\034\uff75\035\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\052\uff75\054\uff75\055" +
    "\uff75\056\uff75\062\uff75\064\uff75\065\uff75\066\uff75\067\uff75" +
    "\001\002\000\116\003\uff74\004\uff74\005\uff74\010\uff74\011" +
    "\uff74\013\uff74\014\uff74\015\uff74\020\uff74\021\uff74\022\uff74" +
    "\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\040\uff74\041\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\052\uff74\054" +
    "\uff74\055\uff74\056\uff74\062\uff74\064\uff74\065\uff74\066\uff74" +
    "\067\uff74\001\002\000\066\011\uff79\020\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79" +
    "\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\001\002\000\010\005\u010c\064" +
    "\u010a\067\u010e\001\002\000\004\011\355\001\002\000\036" +
    "\004\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\051\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\001\002\000\056\005\uff91\012\uff91\013\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\062\uff91\064\uff91\066\uff91\001\002" +
    "\000\116\003\uffce\004\uffce\005\uffce\010\uffce\011\uffce\013" +
    "\uffce\014\uffce\015\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\052\uffce\054\uffce\055" +
    "\uffce\056\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\001\002\000\134\003\ufff1\004\ufff1\005\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\001\002\000\116\003\uffd1\004\uffd1\005\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\052\uffd1\054\uffd1\055\uffd1\056\uffd1\062\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\001\002\000\042\010\334\011\333" +
    "\030\062\031\041\032\126\033\133\034\074\035\105\036" +
    "\211\037\214\041\075\042\123\043\104\044\114\045\053" +
    "\046\040\001\002\000\004\011\322\001\002\000\004\011" +
    "\234\001\002\000\036\004\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\051\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\024\003\167" +
    "\010\170\013\165\041\075\042\123\043\104\044\114\045" +
    "\053\046\040\001\002\000\116\003\uffd4\004\uffd4\005\uffd4" +
    "\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\052\uffd4\054\uffd4\055\uffd4\056\uffd4\062\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\040\005\uff7e\012\uff7e" +
    "\013\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\062\uff7e" +
    "\001\002\000\116\003\uffcc\004\uffcc\005\uffcc\010\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\001\002\000\116\003\uffd2\004\uffd2\005\uffd2\010" +
    "\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\052" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\062\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\001\002\000\006\064\132\066\035\001" +
    "\002\000\036\004\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\051\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\001\002\000\042\005\uff82\012\uff82" +
    "\013\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\062\uff82\001\002\000\126\003\uffed\004\uffed\005\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed\055\uffed" +
    "\056\uffed\062\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001" +
    "\002\000\056\005\uff94\012\uff94\013\uff94\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\062\uff94\064\uff94\066\uff94\001\002\000\116\003" +
    "\uffd0\004\uffd0\005\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\052\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002\000" +
    "\004\025\157\001\002\000\010\003\144\011\143\025\142" +
    "\001\002\000\134\003\ufff0\004\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\067\ufff0\001\002\000\056\005\uff93\012\uff93\013\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\062\uff93\064\uff93\066\uff93\001" +
    "\002\000\042\005\uff7f\012\uff7f\013\uff7f\017\uff7f\020\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\024\uff7f\041\075\042\123\043" +
    "\104\044\114\045\053\046\040\062\uff7f\001\002\000\024" +
    "\004\uffae\010\uffae\013\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\001\002\000\020\025\142\026\070" +
    "\027\125\064\132\065\037\066\035\067\055\001\002\000" +
    "\042\005\uff7b\012\uff7b\013\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\062\uff7b\001\002\000\126\003\ufff3" +
    "\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\062\ufff3\064\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\001\002\000\042\005\uff7c\012\uff7c\013" +
    "\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\062" +
    "\uff7c\001\002\000\074\003\uffa0\005\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\062\uffa0\001\002" +
    "\000\020\025\142\026\070\027\125\064\132\065\037\066" +
    "\035\067\055\001\002\000\116\003\uff53\004\uff53\005\uff53" +
    "\010\uff53\011\uff53\013\uff53\014\uff53\015\uff53\020\uff53\021" +
    "\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027\uff53" +
    "\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53\040" +
    "\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045\uff53\046\uff53" +
    "\052\uff53\054\uff53\055\uff53\056\uff53\062\uff53\064\uff53\065" +
    "\uff53\066\uff53\067\uff53\001\002\000\004\012\146\001\002" +
    "\000\004\003\147\001\002\000\116\003\uff52\004\uff52\005" +
    "\uff52\010\uff52\011\uff52\013\uff52\014\uff52\015\uff52\020\uff52" +
    "\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52\026\uff52\027" +
    "\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034\uff52\035\uff52" +
    "\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046" +
    "\uff52\052\uff52\054\uff52\055\uff52\056\uff52\062\uff52\064\uff52" +
    "\065\uff52\066\uff52\067\uff52\001\002\000\006\003\154\012" +
    "\155\001\002\000\004\012\152\001\002\000\004\013\153" +
    "\001\002\000\116\003\uff56\004\uff56\005\uff56\010\uff56\011" +
    "\uff56\013\uff56\014\uff56\015\uff56\020\uff56\021\uff56\022\uff56" +
    "\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\033\uff56\034\uff56\035\uff56\040\uff56\041\uff56" +
    "\042\uff56\043\uff56\044\uff56\045\uff56\046\uff56\052\uff56\054" +
    "\uff56\055\uff56\056\uff56\062\uff56\064\uff56\065\uff56\066\uff56" +
    "\067\uff56\001\002\000\116\003\uff54\004\uff54\005\uff54\010" +
    "\uff54\011\uff54\013\uff54\014\uff54\015\uff54\020\uff54\021\uff54" +
    "\022\uff54\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54\030" +
    "\uff54\031\uff54\032\uff54\033\uff54\034\uff54\035\uff54\040\uff54" +
    "\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\052" +
    "\uff54\054\uff54\055\uff54\056\uff54\062\uff54\064\uff54\065\uff54" +
    "\066\uff54\067\uff54\001\002\000\004\013\156\001\002\000" +
    "\116\003\uff55\004\uff55\005\uff55\010\uff55\011\uff55\013\uff55" +
    "\014\uff55\015\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024" +
    "\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55" +
    "\033\uff55\034\uff55\035\uff55\040\uff55\041\uff55\042\uff55\043" +
    "\uff55\044\uff55\045\uff55\046\uff55\052\uff55\054\uff55\055\uff55" +
    "\056\uff55\062\uff55\064\uff55\065\uff55\066\uff55\067\uff55\001" +
    "\002\000\026\003\uffe6\006\uffb2\010\uffe6\013\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\001\002\000" +
    "\004\006\161\001\002\000\004\025\162\001\002\000\004" +
    "\007\163\001\002\000\020\010\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\001\002\000\042\005\uff80" +
    "\012\uff80\013\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\062\uff80\001\002\000\116\003\uffdc\004\uffdc\005" +
    "\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\062\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\001\002\000\020\025\142\026" +
    "\070\027\125\064\132\065\037\066\035\067\055\001\002" +
    "\000\120\003\uffd7\004\uffd7\005\uffd7\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\052\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\062\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\001\002\000\070\011\101\020\012\021\016\022" +
    "\022\023\023\024\013\025\172\026\070\027\125\030\062" +
    "\031\041\032\126\033\133\034\074\035\105\040\046\041" +
    "\075\042\123\043\104\044\114\045\053\046\040\051\174" +
    "\064\132\065\037\066\035\067\055\001\002\000\004\013" +
    "\231\001\002\000\042\010\uffa0\013\230\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\001\002" +
    "\000\004\013\227\001\002\000\016\026\uffdd\027\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000\016\026\070" +
    "\027\125\064\132\065\037\066\035\067\055\001\002\000" +
    "\006\003\225\013\uff81\001\002\000\040\010\213\030\062" +
    "\031\041\032\126\033\133\034\074\035\105\036\211\037" +
    "\214\041\075\042\123\043\104\044\114\045\053\046\040" +
    "\001\002\000\022\041\075\042\123\043\104\044\114\045" +
    "\053\046\040\047\205\050\204\001\002\000\004\025\202" +
    "\001\002\000\026\003\uffe6\010\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\001\002" +
    "\000\020\025\142\026\070\027\125\064\132\065\037\066" +
    "\035\067\055\001\002\000\066\011\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\001\002\000\066\011\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\030\012\uffe7\013\uffe7\017\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\001\002" +
    "\000\030\012\uffe9\013\uffe9\017\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002" +
    "\000\056\005\uff8d\012\uff8d\013\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\062\uff8d\064\132\066\035\001\002\000\046\005\uff8b" +
    "\012\uff8b\013\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\062\uff8b\001\002\000\046\005" +
    "\uff86\012\uff86\013\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\062\uff86\001\002\000\004" +
    "\025\142\001\002\000\046\005\uff8a\012\uff8a\013\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\062\uff8a\001\002\000\006\064\132\066\035\001\002" +
    "\000\062\005\uff84\012\uff84\013\uff84\017\uff84\020\uff84\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\041\uff84\042\uff84\043\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\062\uff84\001\002" +
    "\000\006\064\132\066\035\001\002\000\046\005\uff83\012" +
    "\uff83\013\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83" +
    "\024\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\062\uff83\001\002\000\042\005\uff7a" +
    "\012\uff7a\013\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023" +
    "\uff7a\024\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\062\uff7a\001\002\000\072\005\uff8e\012\uff8e\013" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\030\062\031\041\032\126\033\133\034\074\035" +
    "\105\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\050\uff8e\062\uff8e\064\uff8e\066\uff8e\001" +
    "\002\000\006\064\132\066\035\001\002\000\056\005\uff8c" +
    "\012\uff8c\013\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\062\uff8c\064" +
    "\uff8c\066\uff8c\001\002\000\120\003\uffd5\004\uffd5\005\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\062\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\001\002\000\030\012\uffe8" +
    "\013\uffe8\017\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000\120\003\uffd9" +
    "\004\uffd9\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\052\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002" +
    "\000\120\003\uffd8\004\uffd8\005\uffd8\010\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\052\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\062\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\001\002\000\120\003\uffda\004\uffda\005\uffda\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\052\uffda\054\uffda\055\uffda\056\uffda\062\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\001\002\000\042\005\uffeb\012" +
    "\uffeb\013\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\062\uffeb\001\002\000\042\005\uffec\012\uffec\013\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\062\uffec" +
    "\001\002\000\030\011\242\020\012\021\016\022\022\023" +
    "\023\024\013\025\142\040\046\051\174\064\132\066\035" +
    "\001\002\000\026\012\uff9c\013\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\205\050\204\001\002" +
    "\000\006\047\205\050\204\001\002\000\036\030\062\031" +
    "\041\032\126\033\133\034\074\035\105\036\211\037\214" +
    "\041\075\042\123\043\104\044\114\045\053\046\040\001" +
    "\002\000\026\012\uff9d\013\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\001\002\000" +
    "\026\012\uff9e\013\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\001\002\000\030\011" +
    "\242\020\012\021\016\022\022\023\023\024\013\025\142" +
    "\040\046\051\174\064\132\066\035\001\002\000\036\012" +
    "\uff9f\013\uff9f\025\142\040\046\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\047\uff9f\050\uff9f\064\132\066" +
    "\035\001\002\000\024\012\246\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\047\205\050\204\001\002\000" +
    "\036\030\062\031\041\032\126\033\133\034\074\035\105" +
    "\036\211\037\214\041\075\042\123\043\104\044\114\045" +
    "\053\046\040\001\002\000\004\004\301\001\002\000\006" +
    "\064\132\066\035\001\002\000\066\011\101\020\012\021" +
    "\016\022\022\023\023\024\013\025\142\026\070\027\125" +
    "\030\062\031\041\032\126\033\133\034\074\035\105\040" +
    "\046\041\075\042\123\043\104\044\114\045\053\046\040" +
    "\064\132\065\037\066\035\067\055\001\002\000\032\012" +
    "\253\020\012\021\016\022\022\023\023\024\013\041\075" +
    "\042\123\043\104\044\114\045\053\046\040\001\002\000" +
    "\016\041\075\042\123\043\104\044\114\045\053\046\040" +
    "\001\002\000\004\004\272\001\002\000\004\012\255\001" +
    "\002\000\004\004\256\001\002\000\110\003\071\004\102" +
    "\010\060\011\101\014\131\015\112\020\012\021\016\022" +
    "\022\023\023\024\013\025\052\026\070\027\125\030\062" +
    "\031\041\032\126\033\133\034\074\035\105\040\046\041" +
    "\075\042\123\043\104\044\114\045\053\046\040\052\063" +
    "\054\113\055\044\056\103\064\132\065\037\066\035\067" +
    "\055\001\002\000\006\013\270\062\262\001\002\000\004" +
    "\062\262\001\002\000\004\005\266\001\002\000\010\013" +
    "\263\064\132\066\035\001\002\000\006\005\uff57\060\uff57" +
    "\001\002\000\004\013\265\001\002\000\006\005\uff58\060" +
    "\uff58\001\002\000\116\003\uff65\004\uff65\005\uff65\010\uff65" +
    "\011\uff65\013\uff65\014\uff65\015\uff65\020\uff65\021\uff65\022" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65" +
    "\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\052\uff65" +
    "\054\uff65\055\uff65\056\uff65\062\uff65\064\uff65\065\uff65\066" +
    "\uff65\067\uff65\001\002\000\004\005\271\001\002\000\116" +
    "\003\uff71\004\uff71\005\uff71\010\uff71\011\uff71\013\uff71\014" +
    "\uff71\015\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\044\uff71\045\uff71\046\uff71\052\uff71\054\uff71\055\uff71\056" +
    "\uff71\062\uff71\064\uff71\065\uff71\066\uff71\067\uff71\001\002" +
    "\000\116\003\uff66\004\uff66\005\uff66\010\uff66\011\uff66\013" +
    "\uff66\014\uff66\015\uff66\020\uff66\021\uff66\022\uff66\023\uff66" +
    "\024\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032" +
    "\uff66\033\uff66\034\uff66\035\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\044\uff66\045\uff66\046\uff66\052\uff66\054\uff66\055" +
    "\uff66\056\uff66\062\uff66\064\uff66\065\uff66\066\uff66\067\uff66" +
    "\001\002\000\066\011\101\020\012\021\016\022\022\023" +
    "\023\024\013\025\142\026\070\027\125\030\062\031\041" +
    "\032\126\033\133\034\074\035\105\040\046\041\075\042" +
    "\123\043\104\044\114\045\053\046\040\064\132\065\037" +
    "\066\035\067\055\001\002\000\004\062\262\001\002\000" +
    "\004\005\275\001\002\000\116\003\uff64\004\uff64\005\uff64" +
    "\010\uff64\011\uff64\013\uff64\014\uff64\015\uff64\020\uff64\021" +
    "\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64" +
    "\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\052\uff64\054\uff64\055\uff64\056\uff64\062\uff64\064\uff64\065" +
    "\uff64\066\uff64\067\uff64\001\002\000\006\047\205\050\204" +
    "\001\002\000\006\026\070\027\125\001\002\000\026\012" +
    "\uff97\013\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\001\002\000\066\011\101\020" +
    "\012\021\016\022\022\023\023\024\013\025\142\026\070" +
    "\027\125\030\062\031\041\032\126\033\133\034\074\035" +
    "\105\040\046\041\075\042\123\043\104\044\114\045\053" +
    "\046\040\064\132\065\037\066\035\067\055\001\002\000" +
    "\004\005\303\001\002\000\116\003\uff67\004\uff67\005\uff67" +
    "\010\uff67\011\uff67\013\uff67\014\uff67\015\uff67\020\uff67\021" +
    "\uff67\022\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67" +
    "\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67" +
    "\052\uff67\054\uff67\055\uff67\056\uff67\062\uff67\064\uff67\065" +
    "\uff67\066\uff67\067\uff67\001\002\000\016\020\012\021\016" +
    "\022\022\023\023\024\013\051\174\001\002\000\006\036" +
    "\211\037\214\001\002\000\026\012\uff98\013\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050" +
    "\uff98\001\002\000\006\036\211\037\214\001\002\000\046" +
    "\005\uff89\012\uff89\013\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\062\uff89\001\002\000" +
    "\026\012\uff9a\013\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\001\002\000\020\012" +
    "\313\041\075\042\123\043\104\044\114\045\053\046\040" +
    "\001\002\000\026\012\uff9b\013\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\001\002" +
    "\000\006\064\132\066\035\001\002\000\056\005\uff8f\012" +
    "\uff8f\013\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\062\uff8f\064\132" +
    "\066\035\001\002\000\056\005\uff90\012\uff90\013\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\062\uff90\064\uff90\066\uff90\001\002" +
    "\000\046\005\uff85\012\uff85\013\uff85\017\uff85\020\uff85\021" +
    "\uff85\022\uff85\023\uff85\024\uff85\041\uff85\042\uff85\043\uff85" +
    "\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\062\uff85\001" +
    "\002\000\016\026\070\027\125\064\132\065\037\066\035" +
    "\067\055\001\002\000\026\012\uff99\013\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\001\002\000\012\012\325\025\142\064\132\066\035\001" +
    "\002\000\004\012\331\001\002\000\004\012\327\001\002" +
    "\000\004\003\326\001\002\000\116\003\uff4f\004\uff4f\005" +
    "\uff4f\010\uff4f\011\uff4f\013\uff4f\014\uff4f\015\uff4f\020\uff4f" +
    "\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027" +
    "\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f" +
    "\040\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046" +
    "\uff4f\052\uff4f\054\uff4f\055\uff4f\056\uff4f\062\uff4f\064\uff4f" +
    "\065\uff4f\066\uff4f\067\uff4f\001\002\000\004\013\330\001" +
    "\002\000\116\003\uff51\004\uff51\005\uff51\010\uff51\011\uff51" +
    "\013\uff51\014\uff51\015\uff51\020\uff51\021\uff51\022\uff51\023" +
    "\uff51\024\uff51\025\uff51\026\uff51\027\uff51\030\uff51\031\uff51" +
    "\032\uff51\033\uff51\034\uff51\035\uff51\040\uff51\041\uff51\042" +
    "\uff51\043\uff51\044\uff51\045\uff51\046\uff51\052\uff51\054\uff51" +
    "\055\uff51\056\uff51\062\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\001\002\000\004\013\332\001\002\000\116\003\uff50" +
    "\004\uff50\005\uff50\010\uff50\011\uff50\013\uff50\014\uff50\015" +
    "\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50" +
    "\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033\uff50\034" +
    "\uff50\035\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50" +
    "\045\uff50\046\uff50\052\uff50\054\uff50\055\uff50\056\uff50\062" +
    "\uff50\064\uff50\065\uff50\066\uff50\067\uff50\001\002\000\022" +
    "\012\344\025\142\026\070\027\125\064\132\065\037\066" +
    "\035\067\055\001\002\000\040\011\242\020\012\021\016" +
    "\022\022\023\023\024\013\025\142\026\uffa6\027\uffa6\040" +
    "\046\051\174\064\132\065\uffa6\066\035\067\uffa6\001\002" +
    "\000\004\013\336\001\002\000\116\003\uff4e\004\uff4e\005" +
    "\uff4e\010\uff4e\011\uff4e\013\uff4e\014\uff4e\015\uff4e\020\uff4e" +
    "\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\052\uff4e\054\uff4e\055\uff4e\056\uff4e\062\uff4e\064\uff4e" +
    "\065\uff4e\066\uff4e\067\uff4e\001\002\000\016\026\070\027" +
    "\125\064\132\065\037\066\035\067\055\001\002\000\020" +
    "\013\342\041\075\042\123\043\104\044\114\045\053\046" +
    "\040\001\002\000\042\013\uff7a\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\036\211\037\214\041\075\042" +
    "\123\043\104\044\114\045\053\046\040\062\uff7a\001\002" +
    "\000\116\003\uffa4\004\uffa4\005\uffa4\010\uffa4\011\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\052\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\001\002\000\116\003\uffa5\004\uffa5\005\uffa5\010\uffa5\011" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\052\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\001\002\000\004\013\uff4d\001\002\000\004\011" +
    "\353\001\002\000\006\012\351\017\350\001\002\000\006" +
    "\012\uff4b\017\uff4b\001\002\000\016\026\070\027\125\064" +
    "\132\065\037\066\035\067\055\001\002\000\004\013\uff4c" +
    "\001\002\000\006\012\uff49\017\uff49\001\002\000\004\012" +
    "\354\001\002\000\006\012\uff4a\017\uff4a\001\002\000\004" +
    "\025\142\001\002\000\004\012\357\001\002\000\004\004" +
    "\360\001\002\000\004\057\361\001\002\000\006\064\132" +
    "\066\035\001\002\000\014\005\uff5f\057\uff5f\060\uff5f\061" +
    "\uff5f\062\uff5f\001\002\000\014\005\371\057\361\060\366" +
    "\061\372\062\262\001\002\000\014\005\uff5e\057\uff5e\060" +
    "\uff5e\061\uff5e\062\uff5e\001\002\000\006\005\u0101\060\366" +
    "\001\002\000\004\063\375\001\002\000\004\005\374\001" +
    "\002\000\014\005\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d" +
    "\001\002\000\116\003\uff63\004\uff63\005\uff63\010\uff63\011" +
    "\uff63\013\uff63\014\uff63\015\uff63\020\uff63\021\uff63\022\uff63" +
    "\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\035\uff63\040\uff63\041\uff63" +
    "\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63\052\uff63\054" +
    "\uff63\055\uff63\056\uff63\062\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\001\002\000\004\013\373\001\002\000\014\005" +
    "\uff59\057\uff59\060\uff59\061\uff59\062\uff59\001\002\000\116" +
    "\003\uff62\004\uff62\005\uff62\010\uff62\011\uff62\013\uff62\014" +
    "\uff62\015\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033" +
    "\uff62\034\uff62\035\uff62\040\uff62\041\uff62\042\uff62\043\uff62" +
    "\044\uff62\045\uff62\046\uff62\052\uff62\054\uff62\055\uff62\056" +
    "\uff62\062\uff62\064\uff62\065\uff62\066\uff62\067\uff62\001\002" +
    "\000\066\011\101\020\012\021\016\022\022\023\023\024" +
    "\013\025\142\026\070\027\125\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\040\046\041\075\042\123\043" +
    "\104\044\114\045\053\046\040\064\132\065\037\066\035" +
    "\067\055\001\002\000\004\013\377\001\002\000\004\005" +
    "\uff5a\001\002\000\004\005\u0102\001\002\000\116\003\uff61" +
    "\004\uff61\005\uff61\010\uff61\011\uff61\013\uff61\014\uff61\015" +
    "\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61" +
    "\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034" +
    "\uff61\035\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61" +
    "\045\uff61\046\uff61\052\uff61\054\uff61\055\uff61\056\uff61\062" +
    "\uff61\064\uff61\065\uff61\066\uff61\067\uff61\001\002\000\116" +
    "\003\uff60\004\uff60\005\uff60\010\uff60\011\uff60\013\uff60\014" +
    "\uff60\015\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\052\uff60\054\uff60\055\uff60\056" +
    "\uff60\062\uff60\064\uff60\065\uff60\066\uff60\067\uff60\001\002" +
    "\000\004\063\u0104\001\002\000\110\003\071\004\102\010" +
    "\060\011\101\014\131\015\112\020\012\021\016\022\022" +
    "\023\023\024\013\025\052\026\070\027\125\030\062\031" +
    "\041\032\126\033\133\034\074\035\105\040\046\041\075" +
    "\042\123\043\104\044\114\045\053\046\040\052\063\054" +
    "\113\055\044\056\103\064\132\065\037\066\035\067\055" +
    "\001\002\000\004\013\u0109\001\002\000\112\003\071\004" +
    "\102\010\060\011\101\013\u0107\014\131\015\112\020\012" +
    "\021\016\022\022\023\023\024\013\025\052\026\070\027" +
    "\125\030\062\031\041\032\126\033\133\034\074\035\105" +
    "\040\046\041\075\042\123\043\104\044\114\045\053\046" +
    "\040\052\063\054\113\055\044\056\103\064\132\065\037" +
    "\066\035\067\055\001\002\000\014\005\uff5c\057\uff5c\060" +
    "\uff5c\061\uff5c\062\uff5c\001\002\000\116\003\uffd3\004\uffd3" +
    "\005\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\062\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\124\003\uff71" +
    "\004\uff71\005\uff5b\010\uff71\011\uff71\013\uff71\014\uff71\015" +
    "\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71" +
    "\045\uff71\046\uff71\052\uff71\054\uff71\055\uff71\056\uff71\057" +
    "\uff5b\060\uff5b\061\uff5b\062\uff5b\064\uff71\065\uff71\066\uff71" +
    "\067\uff71\001\002\000\010\005\ufff8\013\ufff8\017\ufff8\001" +
    "\002\000\006\005\u0110\017\u010f\001\002\000\024\004\uffab" +
    "\010\uffab\013\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\001\002\000\006\005\uffa9\017\uffa9\001\002" +
    "\000\010\005\ufff7\013\ufff7\017\ufff7\001\002\000\006\064" +
    "\uffa8\067\uffa8\001\002\000\024\004\uffaa\010\uffaa\013\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\001" +
    "\002\000\006\064\u010a\067\u010e\001\002\000\006\005\uffa7" +
    "\017\uffa7\001\002\000\066\011\101\020\012\021\016\022" +
    "\022\023\023\024\013\025\142\026\070\027\125\030\062" +
    "\031\041\032\126\033\133\034\074\035\105\040\046\041" +
    "\075\042\123\043\104\044\114\045\053\046\040\064\132" +
    "\065\037\066\035\067\055\001\002\000\004\012\u0115\001" +
    "\002\000\042\005\uff78\012\uff78\013\uff78\017\uff78\020\uff78" +
    "\021\uff78\022\uff78\023\uff78\024\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\045\uff78\046\uff78\062\uff78\001\002\000\004" +
    "\004\102\001\002\000\004\004\102\001\002\000\006\004" +
    "\102\013\u011a\001\002\000\024\004\uffad\010\uffad\013\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\001" +
    "\002\000\116\003\uffb5\004\uffb5\005\uffb5\010\uffb5\011\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\052\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\001\002\000\006\004\102\013\u011c\001\002\000\116" +
    "\003\uffb6\004\uffb6\005\uffb6\010\uffb6\011\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\052\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002" +
    "\000\004\004\u011e\001\002\000\112\003\071\004\102\010" +
    "\060\011\101\014\131\015\112\020\012\021\016\022\022" +
    "\023\023\024\013\025\052\026\070\027\125\030\062\031" +
    "\041\032\126\033\133\034\074\035\105\040\046\041\075" +
    "\042\123\043\104\044\114\045\053\046\040\052\063\054" +
    "\113\055\044\056\103\062\262\064\132\065\037\066\035" +
    "\067\055\001\002\000\004\005\u0124\001\002\000\114\003" +
    "\071\004\102\005\u0122\010\060\011\101\014\131\015\112" +
    "\020\012\021\016\022\022\023\023\024\013\025\052\026" +
    "\070\027\125\030\062\031\041\032\126\033\133\034\074" +
    "\035\105\040\046\041\075\042\123\043\104\044\114\045" +
    "\053\046\040\052\063\054\113\055\044\056\103\062\262" +
    "\064\132\065\037\066\035\067\055\001\002\000\004\005" +
    "\u0123\001\002\000\120\003\uff6d\004\uff6d\005\uff6d\010\uff6d" +
    "\011\uff6d\013\uff6d\014\uff6d\015\uff6d\020\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\040\uff6d\041" +
    "\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\062\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\001\002\000\120\003\uff6b\004\uff6b" +
    "\005\uff6b\010\uff6b\011\uff6b\013\uff6b\014\uff6b\015\uff6b\020" +
    "\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\062" +
    "\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\001\002\000\120" +
    "\003\uff6c\004\uff6c\005\uff6c\010\uff6c\011\uff6c\013\uff6c\014" +
    "\uff6c\015\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c" +
    "\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\052\uff6c\053\uff6c\054\uff6c\055" +
    "\uff6c\056\uff6c\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c" +
    "\001\002\000\022\002\uffc2\003\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\001\002\000\006\003\u012e" +
    "\005\u012f\001\002\000\004\003\u012d\001\002\000\020\025" +
    "\142\026\070\027\125\064\132\065\037\066\035\067\055" +
    "\001\002\000\004\013\u012c\001\002\000\004\013\u012b\001" +
    "\002\000\006\003\uffbf\005\uffbf\001\002\000\006\003\uffbe" +
    "\005\uffbe\001\002\000\022\002\uffc1\003\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\001\002\000\022" +
    "\002\uffc0\003\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\001\002\000\022\002\uffc3\003\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\001\002\000" +
    "\066\011\101\020\012\021\016\022\022\023\023\024\013" +
    "\025\142\026\070\027\125\030\062\031\041\032\126\033" +
    "\133\034\074\035\105\040\046\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\064\132\065\037\066\035\067" +
    "\055\001\002\000\004\012\u0132\001\002\000\004\004\u0133" +
    "\001\002\000\112\003\071\004\102\010\060\011\101\014" +
    "\131\015\112\020\012\021\016\022\022\023\023\024\013" +
    "\025\052\026\070\027\125\030\062\031\041\032\126\033" +
    "\133\034\074\035\105\040\046\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\052\063\054\113\055\044\056" +
    "\103\062\262\064\132\065\037\066\035\067\055\001\002" +
    "\000\004\005\u0139\001\002\000\114\003\071\004\102\005" +
    "\u0137\010\060\011\101\014\131\015\112\020\012\021\016" +
    "\022\022\023\023\024\013\025\052\026\070\027\125\030" +
    "\062\031\041\032\126\033\133\034\074\035\105\040\046" +
    "\041\075\042\123\043\104\044\114\045\053\046\040\052" +
    "\063\054\113\055\044\056\103\062\262\064\132\065\037" +
    "\066\035\067\055\001\002\000\004\005\u0138\001\002\000" +
    "\120\003\uff70\004\uff70\005\uff70\010\uff70\011\uff70\013\uff70" +
    "\014\uff70\015\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024" +
    "\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\040\uff70\041\uff70\042\uff70\043" +
    "\uff70\044\uff70\045\uff70\046\uff70\052\uff70\053\uff70\054\uff70" +
    "\055\uff70\056\uff70\062\uff70\064\uff70\065\uff70\066\uff70\067" +
    "\uff70\001\002\000\120\003\uff6e\004\uff6e\005\uff6e\010\uff6e" +
    "\011\uff6e\013\uff6e\014\uff6e\015\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\056\uff6e\062\uff6e\064\uff6e\065" +
    "\uff6e\066\uff6e\067\uff6e\001\002\000\120\003\uff6f\004\uff6f" +
    "\005\uff6f\010\uff6f\011\uff6f\013\uff6f\014\uff6f\015\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\062" +
    "\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\001\002\000\004" +
    "\004\102\001\002\000\004\004\102\001\002\000\006\004" +
    "\102\013\u013d\001\002\000\116\003\uffb4\004\uffb4\005\uffb4" +
    "\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\052\uffb4\054\uffb4\055\uffb4\056\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\001\002\000\006\004\102\013\u013f" +
    "\001\002\000\116\003\uffb3\004\uffb3\005\uffb3\010\uffb3\011" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\052\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\067\uffb3\001\002\000\004\013\u0141\001\002\000\120\003" +
    "\uffd6\004\uffd6\005\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\052\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\001" +
    "\002\000\004\025\uffb0\001\002\000\004\025\u0144\001\002" +
    "\000\004\007\u0145\001\002\000\020\010\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\001\002\000\042" +
    "\005\uffea\012\uffea\013\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\062\uffea\001\002\000\006\064\132\066" +
    "\035\001\002\000\046\005\uff87\012\uff87\013\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87" +
    "\062\uff87\001\002\000\006\064\u010a\067\u010e\001\002\000" +
    "\006\064\uffa3\067\uffa3\001\002\000\006\064\u010a\067\u010e" +
    "\001\002\000\004\013\u014d\001\002\000\116\003\uffa2\004" +
    "\uffa2\005\uffa2\010\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2\062\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\001\002\000\004\013" +
    "\u014f\001\002\000\116\003\uffa1\004\uffa1\005\uffa1\010\uffa1" +
    "\011\uffa1\013\uffa1\014\uffa1\015\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\052\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\062\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\001\002\000\020\010\060\020\012\021\016" +
    "\022\022\023\023\024\013\025\142\001\002\000\004\017" +
    "\u0165\001\002\000\004\010\u0154\001\002\000\006\003\167" +
    "\010\170\001\002\000\016\026\070\027\125\064\132\065" +
    "\037\066\035\067\055\001\002\000\004\017\u0156\001\002" +
    "\000\066\011\101\020\012\021\016\022\022\023\023\024" +
    "\013\025\142\026\070\027\125\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\040\046\041\075\042\123\043" +
    "\104\044\114\045\053\046\040\064\132\065\037\066\035" +
    "\067\055\001\002\000\004\017\u015f\001\002\000\006\012" +
    "\u0159\017\uff7e\001\002\000\004\004\u015a\001\002\000\076" +
    "\011\101\020\012\021\016\022\022\023\023\024\013\025" +
    "\142\026\070\027\125\030\062\031\041\032\126\033\133" +
    "\034\074\035\105\040\046\041\075\042\123\043\104\044" +
    "\114\045\053\046\040\052\063\054\113\055\044\056\103" +
    "\064\132\065\037\066\035\067\055\001\002\000\100\005" +
    "\u015d\011\101\020\012\021\016\022\022\023\023\024\013" +
    "\025\142\026\070\027\125\030\062\031\041\032\126\033" +
    "\133\034\074\035\105\040\046\041\075\042\123\043\104" +
    "\044\114\045\053\046\040\052\063\054\113\055\044\056" +
    "\103\064\132\065\037\066\035\067\055\001\002\000\100" +
    "\005\uff77\011\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\033\uff77\034\uff77\035\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\052\uff77\054\uff77\055\uff77" +
    "\056\uff77\064\uff77\065\uff77\066\uff77\067\uff77\001\002\000" +
    "\116\003\uff69\004\uff69\005\uff69\010\uff69\011\uff69\013\uff69" +
    "\014\uff69\015\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024" +
    "\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\035\uff69\040\uff69\041\uff69\042\uff69\043" +
    "\uff69\044\uff69\045\uff69\046\uff69\052\uff69\054\uff69\055\uff69" +
    "\056\uff69\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69\001" +
    "\002\000\100\005\uff76\011\uff76\020\uff76\021\uff76\022\uff76" +
    "\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\052\uff76\054" +
    "\uff76\055\uff76\056\uff76\064\uff76\065\uff76\066\uff76\067\uff76" +
    "\001\002\000\012\025\142\040\046\064\132\066\035\001" +
    "\002\000\004\012\u0161\001\002\000\004\004\u0162\001\002" +
    "\000\076\011\101\020\012\021\016\022\022\023\023\024" +
    "\013\025\142\026\070\027\125\030\062\031\041\032\126" +
    "\033\133\034\074\035\105\040\046\041\075\042\123\043" +
    "\104\044\114\045\053\046\040\052\063\054\113\055\044" +
    "\056\103\064\132\065\037\066\035\067\055\001\002\000" +
    "\100\005\u0164\011\101\020\012\021\016\022\022\023\023" +
    "\024\013\025\142\026\070\027\125\030\062\031\041\032" +
    "\126\033\133\034\074\035\105\040\046\041\075\042\123" +
    "\043\104\044\114\045\053\046\040\052\063\054\113\055" +
    "\044\056\103\064\132\065\037\066\035\067\055\001\002" +
    "\000\116\003\uff6a\004\uff6a\005\uff6a\010\uff6a\011\uff6a\013" +
    "\uff6a\014\uff6a\015\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a" +
    "\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\035\uff6a\040\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\044\uff6a\045\uff6a\046\uff6a\052\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\062\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\001\002\000\016\020\012\021\016\022\022\023\023\024" +
    "\013\051\174\001\002\000\004\017\u0167\001\002\000\012" +
    "\025\142\040\046\064\132\066\035\001\002\000\004\012" +
    "\u0169\001\002\000\004\004\u016a\001\002\000\110\003\071" +
    "\004\102\010\060\011\101\014\131\015\112\020\012\021" +
    "\016\022\022\023\023\024\013\025\052\026\070\027\125" +
    "\030\062\031\041\032\126\033\133\034\074\035\105\040" +
    "\046\041\075\042\123\043\104\044\114\045\053\046\040" +
    "\052\063\054\113\055\044\056\103\064\132\065\037\066" +
    "\035\067\055\001\002\000\112\003\071\004\102\005\u016c" +
    "\010\060\011\101\014\131\015\112\020\012\021\016\022" +
    "\022\023\023\024\013\025\052\026\070\027\125\030\062" +
    "\031\041\032\126\033\133\034\074\035\105\040\046\041" +
    "\075\042\123\043\104\044\114\045\053\046\040\052\063" +
    "\054\113\055\044\056\103\064\132\065\037\066\035\067" +
    "\055\001\002\000\116\003\uff68\004\uff68\005\uff68\010\uff68" +
    "\011\uff68\013\uff68\014\uff68\015\uff68\020\uff68\021\uff68\022" +
    "\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\052\uff68" +
    "\054\uff68\055\uff68\056\uff68\062\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\001\002\000\014\020\012\021\016\022\022" +
    "\023\023\024\013\001\002\000\004\012\u016f\001\002\000" +
    "\004\004\uffbc\001\002\000\006\012\u0174\017\u0173\001\002" +
    "\000\004\025\u0172\001\002\000\006\012\uffb8\017\uffb8\001" +
    "\002\000\014\020\012\021\016\022\022\023\023\024\013" +
    "\001\002\000\004\004\uffba\001\002\000\004\025\u0176\001" +
    "\002\000\006\012\uffb7\017\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\004\002\005\001\001\000\002\001\001\000" +
    "\004\073\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\014\014\017\015\013\051\010\001\001\000" +
    "\004\074\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\014\015\024\051\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\031\001\001\000\006\075\u016d\076\u016c\001\001\000" +
    "\002\001\001\000\004\016\033\001\001\000\106\003\127" +
    "\004\123\005\046\006\075\007\035\012\063\013\115\022" +
    "\071\023\044\024\060\025\134\027\055\030\053\031\110" +
    "\032\121\033\133\035\116\036\065\040\126\041\066\042" +
    "\076\043\042\047\117\050\056\052\077\055\120\057\050" +
    "\061\047\062\106\063\105\064\072\065\114\066\041\070" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u0148\001\001\000\004\104\u0146\001\001\000" +
    "\014\006\u0145\007\035\057\137\061\047\062\106\001\001" +
    "\000\002\001\001\000\010\005\313\032\314\034\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\u013f\007\035\057\137\061\047\062\106\001\001" +
    "\000\010\005\u0139\025\u0118\027\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\003\127\004\123\005\046" +
    "\006\075\007\035\013\u0107\022\071\023\044\024\060\025" +
    "\134\027\055\030\053\031\110\032\121\033\133\035\116" +
    "\036\065\040\126\041\066\042\076\043\042\047\117\050" +
    "\056\052\077\053\u0125\055\120\057\050\061\047\062\106" +
    "\063\105\064\072\065\114\066\041\070\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\u0112\001\001\000\006\026\u010a\054\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\214" +
    "\032\207\034\211\071\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\057\163\061\047\062\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\135\001\001\000\002\001\001\000\016\006\140" +
    "\007\035\031\136\057\137\061\047\062\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\150\007\035\031\147\057\137\061" +
    "\047\062\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\232\007\035\031\231\057\137\061\047" +
    "\062\106\001\001\000\002\001\001\000\044\003\200\004" +
    "\123\005\046\006\175\007\035\011\174\031\176\032\121" +
    "\033\133\035\116\036\065\057\050\061\047\062\106\065" +
    "\177\066\170\067\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\225\007\035\057\137\061\047\062\106\001\001\000\002" +
    "\001\001\000\010\005\214\032\207\034\211\001\001\000" +
    "\006\005\165\010\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\206\007\035\031\205\057\137\061" +
    "\047\062\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\221\061" +
    "\047\062\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\220\001\001\000\002\001\001\000\010\057" +
    "\215\061\047\062\106\001\001\000\004\032\216\001\001" +
    "\000\010\057\217\061\047\062\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\222\001\001\000\010" +
    "\057\223\061\047\062\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\200\011\174\031\244\033\242\035\240" +
    "\036\237\057\236\060\243\061\047\062\106\065\235\067" +
    "\234\001\001\000\004\010\317\001\001\000\004\010\202" +
    "\001\001\000\010\005\313\032\314\034\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\200\011\174" +
    "\031\244\033\242\035\240\036\237\057\236\060\311\061" +
    "\047\062\106\065\235\067\234\001\001\000\016\005\303" +
    "\031\304\035\305\057\306\061\047\062\106\001\001\000" +
    "\006\005\246\010\247\001\001\000\010\005\214\032\207" +
    "\034\211\001\001\000\002\001\001\000\010\057\275\061" +
    "\047\062\106\001\001\000\040\003\200\004\123\005\046" +
    "\006\075\007\035\031\176\032\121\033\133\035\116\036" +
    "\065\057\050\061\047\062\106\065\251\066\250\001\001" +
    "\000\012\003\200\004\253\005\046\065\251\001\001\000" +
    "\004\005\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\127\004\123\005\046\006" +
    "\075\007\035\013\257\022\071\023\044\024\060\025\134" +
    "\027\055\030\053\031\110\032\121\033\133\035\116\036" +
    "\065\040\126\041\066\042\076\043\042\047\117\050\056" +
    "\052\077\055\120\057\050\061\047\062\106\063\105\064" +
    "\072\065\114\066\256\070\107\001\001\000\004\017\266" +
    "\001\001\000\004\017\260\001\001\000\002\001\001\000" +
    "\010\057\263\061\047\062\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\200\004\123\005\046\006\075\007\035\031\176\032" +
    "\121\033\133\035\116\036\065\057\050\061\047\062\106" +
    "\065\251\066\272\001\001\000\004\017\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\276\001\001" +
    "\000\004\007\277\001\001\000\002\001\001\000\040\003" +
    "\200\004\123\005\046\006\075\007\035\031\176\032\121" +
    "\033\133\035\116\036\065\057\050\061\047\062\106\065" +
    "\251\066\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\200\011\174\065\235\067\310\001\001\000" +
    "\004\034\211\001\001\000\002\001\001\000\004\034\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\246\001\001\000\002\001\001\000\010\057\316\061\047" +
    "\062\106\001\001\000\010\057\315\061\047\062\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\320" +
    "\007\035\057\137\061\047\062\106\001\001\000\002\001" +
    "\001\000\012\031\322\057\323\061\047\062\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\346\007\035\031" +
    "\344\057\137\061\047\062\106\072\345\001\001\000\034" +
    "\003\200\011\174\031\340\033\242\035\240\036\237\057" +
    "\236\060\337\061\047\062\106\065\235\067\234\102\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\342\007\035\057\137\061\047\062\106\001\001\000\004" +
    "\005\246\001\001\000\010\005\214\032\207\034\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\351\007\035\057\137\061\047\062\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\362\045\361\001\001\000" +
    "\010\057\u0102\061\047\062\106\001\001\000\002\001\001" +
    "\000\012\017\364\045\363\046\367\056\366\001\001\000" +
    "\002\001\001\000\004\056\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\200\004\123\005\046\006\075\007\035\031\176\032" +
    "\121\033\133\035\116\036\065\057\050\061\047\062\106" +
    "\065\251\066\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\106\003\127\004\123\005\046\006" +
    "\075\007\035\012\u0105\013\115\022\071\023\044\024\060" +
    "\025\134\027\055\030\053\031\110\032\121\033\133\035" +
    "\116\036\065\040\126\041\066\042\076\043\042\047\117" +
    "\050\056\052\077\055\120\057\050\061\047\062\106\063" +
    "\105\064\072\065\114\066\u0104\070\107\001\001\000\002" +
    "\001\001\000\104\003\127\004\123\005\046\006\075\007" +
    "\035\013\u0107\022\071\023\044\024\060\025\134\027\055" +
    "\030\053\031\110\032\121\033\133\035\116\036\065\040" +
    "\126\041\066\042\076\043\042\047\117\050\056\052\077" +
    "\055\120\057\050\061\047\062\106\063\105\064\072\065" +
    "\114\066\041\070\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u0110\001\001\000\002\001\001\000\004\054" +
    "\u0111\001\001\000\002\001\001\000\040\003\200\004\123" +
    "\005\046\006\075\007\035\031\176\032\121\033\133\035" +
    "\116\036\065\057\050\061\047\062\106\065\251\066\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\u011a\025\134\027\055\001\001\000\010\024\u0117\025\134" +
    "\027\055\001\001\000\006\025\u0118\027\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\u0118\027\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\003" +
    "\127\004\123\005\046\006\075\007\035\012\u011f\013\115" +
    "\017\u011e\022\071\023\044\024\060\025\134\027\055\030" +
    "\053\031\110\032\121\033\133\035\116\036\065\040\126" +
    "\041\066\042\076\043\042\047\117\050\056\052\077\055" +
    "\120\057\050\061\047\062\106\063\105\064\072\065\114" +
    "\066\041\070\107\001\001\000\002\001\001\000\106\003" +
    "\127\004\123\005\046\006\075\007\035\013\u0107\017\u0120" +
    "\022\071\023\044\024\060\025\134\027\055\030\053\031" +
    "\110\032\121\033\133\035\116\036\065\040\126\041\066" +
    "\042\076\043\042\047\117\050\056\052\077\055\120\057" +
    "\050\061\047\062\106\063\105\064\072\065\114\066\041" +
    "\070\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\u0129\007\035\031" +
    "\u0128\057\137\061\047\062\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\200\004\123\005\046\006\075\007\035\031\176\032" +
    "\121\033\133\035\116\036\065\057\050\061\047\062\106" +
    "\065\251\066\u0130\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\003\127\004\123\005\046\006\075\007\035" +
    "\012\u0134\013\115\017\u0133\022\071\023\044\024\060\025" +
    "\134\027\055\030\053\031\110\032\121\033\133\035\116" +
    "\036\065\040\126\041\066\042\076\043\042\047\117\050" +
    "\056\052\077\055\120\057\050\061\047\062\106\063\105" +
    "\064\072\065\114\066\041\070\107\001\001\000\002\001" +
    "\001\000\106\003\127\004\123\005\046\006\075\007\035" +
    "\013\u0107\017\u0135\022\071\023\044\024\060\025\134\027" +
    "\055\030\053\031\110\032\121\033\133\035\116\036\065" +
    "\040\126\041\066\042\076\043\042\047\117\050\056\052" +
    "\077\055\120\057\050\061\047\062\106\063\105\064\072" +
    "\065\114\066\041\070\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\u013d\025\134\027\055\001\001\000\010\024\u013b\025" +
    "\134\027\055\001\001\000\006\025\u0118\027\055\001\001" +
    "\000\002\001\001\000\006\025\u0118\027\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\057\u0147\061\047" +
    "\062\106\001\001\000\002\001\001\000\004\054\u014d\001" +
    "\001\000\004\103\u014a\001\001\000\004\054\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\200\031\u0151\064\u0150\065\u0152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\u0154\007\035\057\137\061\047\062\106" +
    "\001\001\000\002\001\001\000\040\003\200\004\123\005" +
    "\046\006\075\007\035\031\176\032\121\033\133\035\u0157" +
    "\036\065\057\050\061\047\062\106\065\251\066\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\200\004\123\005\046\006\075\007\035\031" +
    "\176\032\121\033\133\035\116\036\065\037\u015a\040\u015b" +
    "\041\066\042\076\043\042\052\077\057\050\061\047\062" +
    "\106\065\251\066\041\001\001\000\052\003\200\004\123" +
    "\005\046\006\075\007\035\031\176\032\121\033\133\035" +
    "\116\036\065\040\u015d\041\066\042\076\043\042\052\077" +
    "\057\050\061\047\062\106\065\251\066\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\304\035\u015f\057\306\061\047\062\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\003\200\004\123" +
    "\005\046\006\075\007\035\031\176\032\121\033\133\035" +
    "\116\036\065\037\u0162\040\u015b\041\066\042\076\043\042" +
    "\052\077\057\050\061\047\062\106\065\251\066\041\001" +
    "\001\000\052\003\200\004\123\005\046\006\075\007\035" +
    "\031\176\032\121\033\133\035\116\036\065\040\u015d\041" +
    "\066\042\076\043\042\052\077\057\050\061\047\062\106" +
    "\065\251\066\041\001\001\000\002\001\001\000\012\003" +
    "\200\011\174\065\235\067\u0165\001\001\000\002\001\001" +
    "\000\014\031\304\035\u0167\057\306\061\047\062\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\003\127" +
    "\004\123\005\046\006\075\007\035\012\u016a\013\115\022" +
    "\071\023\044\024\060\025\134\027\055\030\053\031\110" +
    "\032\121\033\133\035\116\036\065\040\126\041\066\042" +
    "\076\043\042\047\117\050\056\052\077\055\120\057\050" +
    "\061\047\062\106\063\105\064\072\065\114\066\041\070" +
    "\107\001\001\000\104\003\127\004\123\005\046\006\075" +
    "\007\035\013\u0107\022\071\023\044\024\060\025\134\027" +
    "\055\030\053\031\110\032\121\033\133\035\116\036\065" +
    "\040\126\041\066\042\076\043\042\047\117\050\056\052" +
    "\077\055\120\057\050\061\047\062\106\063\105\064\072" +
    "\065\114\066\041\070\107\001\001\000\002\001\001\000" +
    "\006\003\u0170\020\u016f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u0174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;


    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        parser.agregarTablaSimbolos("main", "_verano_");
        Nodo mainNode = new Nodo("_verano_");
        parser.getArbol().setRaiz(mainNode);
        RESULT = mainNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MAIN NT$0 funciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		
             System.err.println("Error en la estructura inicial.");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		
        Nodo tipoNode = parser.crearNodo("INTEGER");
        parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		
        Nodo tipoNode = parser.crearNodo("STRING");
        parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cometa";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		
        Nodo tipoNode = parser.crearNodo("CHAR");
        parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cupido";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		
        Nodo tipoNode = parser.crearNodo("FLOAT");
        parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= BOOL 
            {
              Object RESULT =null;
		
        Nodo tipoNode = parser.crearNodo("BOOL");
        parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "trueno";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tiposArr ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Symbol symbol = (Symbol) CUP$parser$stack.peek();
                              parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tiposArr ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Symbol symbol = (Symbol) CUP$parser$stack.peek();
                            parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposArr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
                  RESULT = "cometa";
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  Symbol symbol = (Symbol) CUP$parser$stack.peek();
                  parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
                  RESULT = "cupido";
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= bool 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = N1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= numerosLiterales 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = N1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numerosLiterales ::= numeroEntero 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numerosLiterales ::= numeroFloat 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerosLiterales",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numeroEntero ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroEntero",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeroFloat ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeroFloat",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionRelacional ::= asignarTipo operadorRelacional literales 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo expresionRelacionalNode = parser.crearNodo("EXPRESION_RELACIONAL");

        if (N1 != null) expresionRelacionalNode.agregarHijo(N1);
        if (op != null) expresionRelacionalNode.agregarHijo(parser.crearNodo(op.toString()));
        if (N2 != null) expresionRelacionalNode.agregarHijo(N2);

        RESULT = expresionRelacionalNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionRelacional ::= asignarTipo operadorRelacional variable 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo expresionRelacionalNode = parser.crearNodo("EXPRESION_RELACIONAL");

        if (N1 != null) expresionRelacionalNode.agregarHijo(N1);
        if (op != null) expresionRelacionalNode.agregarHijo(parser.crearNodo(op.toString()));
        if (N2 != null) expresionRelacionalNode.agregarHijo(N2);

        RESULT = expresionRelacionalNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionRelacional ::= operadorRelacional literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo expresionRelacionalNode = parser.crearNodo("EXPRESION_RELACIONAL");

        if (op != null) expresionRelacionalNode.agregarHijo(parser.crearNodo(op.toString()));
        if (N1 != null) expresionRelacionalNode.agregarHijo(N1);

        RESULT = expresionRelacionalNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionLogica ::= asignarTipo operadorLogico literales 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica: " + op + " " + l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionLogica ::= negacion literales 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Expresión lógica con negación: !" + n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionLogica ::= asignarTipo operadorLogico variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignarTipo ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (t == null || idVar == null) {
            System.err.println("Error: Tipo o identificador no definido.");
            parser.agregarVariable(0, 0, "undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, idVar.toString(), t.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarTipo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadorLogico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operadorLogico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // negacion ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creacion ::= asignarTipo FIN_EXPRESION 
            {
              Object RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo creacionNode = parser.crearNodo("CREACION");
        creacionNode.agregarHijo(N);
        parser.getArbol().getRaiz().agregarHijo(creacionNode);
        RESULT = creacionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creacion ::= error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Asignación inválida");
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creacionAsignacion ::= asignarTipo ASIGNA expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo creacionAsignacionNode = parser.crearNodo("CREACION_ASIGNACION");
        Nodo asignarTipoNode = (Nodo) N1;
        Nodo expresionesNode = (Nodo) N3;

        creacionAsignacionNode.agregarHijo(asignarTipoNode);
        creacionAsignacionNode.agregarHijo(parser.crearNodo("="));
        creacionAsignacionNode.agregarHijo(expresionesNode);

        parser.getArbol().getRaiz().agregarHijo(creacionAsignacionNode);
        RESULT = creacionAsignacionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creacionAsignacion ::= asignarTipo ASIGNA expresionLogica FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo creacionAsignacionNode = parser.crearNodo("CREACION_ASIGNACION");
        Nodo asignarTipoNode = (Nodo) N1;
        Nodo expresionLogicaNode = (Nodo) N3;

        creacionAsignacionNode.agregarHijo(asignarTipoNode);
        creacionAsignacionNode.agregarHijo(parser.crearNodo("="));
        creacionAsignacionNode.agregarHijo(expresionLogicaNode);

        parser.getArbol().getRaiz().agregarHijo(creacionAsignacionNode);
        RESULT = creacionAsignacionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacionAsignacion ::= asignarTipo ASIGNA IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo creacionAsignacionNode = parser.crearNodo("CREACION_ASIGNACION");
        Nodo asignarTipoNode = (Nodo) N1;
        // Convertir IDENTIFICADOR a Nodo
        Nodo identificadorNode = parser.crearNodo(I.toString());

        creacionAsignacionNode.agregarHijo(asignarTipoNode);
        creacionAsignacionNode.agregarHijo(parser.crearNodo("="));
        creacionAsignacionNode.agregarHijo(identificadorNode);

        parser.getArbol().getRaiz().agregarHijo(creacionAsignacionNode);
        RESULT = creacionAsignacionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacionAsignacion ::= asignarTipo error 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.err.println("Error: Expresión inválida");
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creacionAsignacion ::= ASIGNA literales FIN_EXPRESION 
            {
              Object RESULT =null;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo asignacionNode = parser.crearNodo("ASIGNA_LITERAL");
        Nodo literalNode = (Nodo) N2;

        asignacionNode.agregarHijo(parser.crearNodo("="));
        asignacionNode.agregarHijo(literalNode);

        parser.getArbol().getRaiz().agregarHijo(asignacionNode);
        RESULT = asignacionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creacionAsignacion ::= asignarTipo ASIGNA literales error 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.err.println("Error: Falta el fin de expresión");
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Crear un nodo para las sentencias
        Nodo sentenciasNode = parser.crearNodo("SENTENCIAS");

        // Agregar la sentencia al nodo
        if (N1 != null) sentenciasNode.agregarHijo(N1);

        // Agregar el nodo al árbol
        parser.getArbol().getRaiz().agregarHijo(sentenciasNode);
        RESULT = sentenciasNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Reutilizar el nodo de sentencias existente
        Nodo sentenciasNode = (Nodo) N1;

        // Agregar la nueva sentencia como hijo
        if (N2 != null) sentenciasNode.agregarHijo(N2);

        RESULT = sentenciasNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= expresionArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= invocacionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= sentenciaEstructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = N1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= asignaVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones ::= funcion 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Crear el nodo de FUNCIONES
        Nodo funcionesNode = parser.crearNodo("FUNCIONES");
        // Agregar la función como hijo si no es nula
        if (N1 != null) {funcionesNode.agregarHijo(N1);}
        parser.getArbol().getRaiz().agregarHijo(funcionesNode);
        RESULT = funcionesNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funciones ::= funciones funcion 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo funcionesNode = (Nodo) N1;
        if (N2 != null) {funcionesNode.agregarHijo(N2);}
        RESULT = funcionesNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            parser.agregarTablaSimbolos("funcion", e.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion ::= encabezadoFuncion NT$1 parametros bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            // Crear el nodo de la función
            Nodo funcionNode = parser.crearNodo("FUNCION");
            // Crear y agregar el encabezado
            String nombreFuncion = e.toString();
            Nodo encabezadoNode = parser.crearNodo(nombreFuncion);
            funcionNode.agregarHijo(encabezadoNode);
            // Validar y agregar parámetros
            if (N1 != null) {funcionNode.agregarHijo(N1);}

            // Validar y agregar bloque
            if (N2 != null) {funcionNode.agregarHijo(N2);}
            // Retornar el nodo de la función
            RESULT = funcionNode;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // encabezadoFuncion ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString());
        RESULT = id.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // encabezadoFuncion ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		 System.err.println("Error: Al encabezado de la función le falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // encabezadoFuncion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= corcheteIzquierdo sentencias return_funcion corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= corcheteIzquierdo corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque ::= corcheteIzquierdo sentencias corcheteDerecho error 
            {
              Object RESULT =null;
		 System.err.println("Error: A la función le falta el retorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque ::= corcheteIzquierdo sentencias return_funcion error 
            {
              Object RESULT =null;
		 System.err.println("Error: El bloque de la función no se cerró"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // return_funcion ::= RETURN literales FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo returnNode = parser.crearNodo("RETURN");

        // Verificar y agregar el nodo del literal como cadena
        if (N1 != null) {
            returnNode.agregarHijo(parser.crearNodo("return"));
            returnNode.agregarHijo(parser.crearNodo(N1.toString()));
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", N1.toString());
        } else {
            System.err.println("Error: El tipo de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        }

        // Agregar el nodo RETURN al árbol
        parser.getArbol().getRaiz().agregarHijo(returnNode);
        RESULT = returnNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // return_funcion ::= RETURN variable FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo returnNode = parser.crearNodo("RETURN");

        // Verificar y agregar el nodo de la variable
        if (N1 != null) {
            returnNode.agregarHijo(parser.crearNodo("return"));
            returnNode.agregarHijo(N1);
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", N1.toString());
        } else {
            System.err.println("Error: El valor de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        }

        // Agregar el nodo RETURN al árbol
        parser.getArbol().getRaiz().agregarHijo(returnNode);
        RESULT = returnNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$2 ::= 
            {
              Object RESULT =null;

        Nodo parametrosNode = parser.crearNodo("PARAMETROS");
        // Nodo para apertura de paréntesis
        parametrosNode.agregarHijo(parser.crearNodo("("));
        // Agregar a la raíz
        parser.getArbol().getRaiz().agregarHijo(parametrosNode);
        RESULT = parametrosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= PARENTESISAPERTURA NT$2 PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo parametrosNode = (Nodo) RESULT;
        // Nodo para cierre de paréntesis
        parametrosNode.agregarHijo(parser.crearNodo(")"));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$3 ::= 
            {
              Object RESULT =null;

        Nodo parametrosNode = parser.crearNodo("PARAMETROS");
        // Nodo para apertura de paréntesis
        parametrosNode.agregarHijo(parser.crearNodo("("));
        // Agregar a la raíz
        parser.getArbol().getRaiz().agregarHijo(parametrosNode);
        RESULT = parametrosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= PARENTESISAPERTURA NT$3 parametroAux PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo parametrosNode = (Nodo) RESULT;
        // Agregar nodo de parametroAux
        parametrosNode.agregarHijo(N1);
        // Nodo para cierre de paréntesis
        parametrosNode.agregarHijo(parser.crearNodo(")"));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros ::= error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Parámetros mal definidos");
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametroAux ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Verificar y agregar a la tabla de símbolos
        if (t == null || id == null) {
            System.err.println("Error: Parámetro inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro agregado: " + id.toString() + " de tipo " + t.toString());
        }
        // Crear el nodo para el parámetro
        Nodo parametrosNode = parser.crearNodo("PARAMETROS");
        Nodo parametroNode = parser.crearNodo("PARAMETRO");
        // Nodo del tipo
        parametroNode.agregarHijo(parser.crearNodo(t.toString()));
        // Nodo del identificador
        parametroNode.agregarHijo(parser.crearNodo(id.toString()));
        // Agregar el parámetro al nodo de parámetros
        parametrosNode.agregarHijo(parametroNode);
        RESULT = parametrosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametroAux ::= parametroAux COMA tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Verificar y agregar a la tabla de símbolos
        if (t == null || id == null) {
            System.err.println("Error: Parámetro adicional inválido (tipo o identificador nulo).");
            parser.agregarVariable(0, 0, "parametro: undefined", "undefined");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "parametro: " + id.toString(), t.toString());
            System.out.println("Parámetro adicional agregado: " + id.toString() + " de tipo " + t.toString());
        }
        // Crear el nodo para el nuevo parámetro
        Nodo nuevoParametroNode = parser.crearNodo("PARAMETRO");
        // Nodo del tipo
        nuevoParametroNode.agregarHijo(parser.crearNodo(t.toString()));
        // Nodo del identificador
        nuevoParametroNode.agregarHijo(parser.crearNodo(id.toString()));
        // Nodo existente de parámetros para el nuevo parametro
        Nodo parametrosNode = (Nodo) N1;
        // Agregar el nuevo parámetro
        parametrosNode.agregarHijo(nuevoParametroNode);
        RESULT = parametrosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionArr ::= crearArreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo expresionArrNode = parser.crearNodo("EXPRESION_ARR");
        if (N1 != null) expresionArrNode.agregarHijo(N1); // Nodo de crearArreglos
        if (op != null) expresionArrNode.agregarHijo(parser.crearNodo(op.toString())); // Nodo del operador relacional
        if (N2 != null) expresionArrNode.agregarHijo(N2); // Nodo de arreglos
        parser.getArbol().getRaiz().agregarHijo(expresionArrNode); // Agregar al árbol
        RESULT = expresionArrNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionArr ::= crearArreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo expresionArrNode = parser.crearNodo("EXPRESION_ARR");
        if (N1 != null) expresionArrNode.agregarHijo(N1); // Nodo de crearArreglos
        expresionArrNode.agregarHijo(parser.crearNodo("=")); // Nodo del operador de asignación
        if (N2 != null) expresionArrNode.agregarHijo(N2); // Nodo de arreglos
        parser.getArbol().getRaiz().agregarHijo(expresionArrNode); // Agregar al árbol
        RESULT = expresionArrNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionArr ::= arreglos ASIGNA arreglos FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo expresionArrNode = parser.crearNodo("EXPRESION_ARR");
        if (N1 != null) expresionArrNode.agregarHijo(N1); // Nodo del primer arreglo
        expresionArrNode.agregarHijo(parser.crearNodo("=")); // Nodo del operador de asignación
        if (N2 != null) expresionArrNode.agregarHijo(N2); // Nodo del segundo arreglo
        parser.getArbol().getRaiz().agregarHijo(expresionArrNode); // Agregar al árbol
        RESULT = expresionArrNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresionArr ::= arreglos operadorRelacional arreglos FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo expresionArrNode = parser.crearNodo("EXPRESION_ARR");
        if (N1 != null) expresionArrNode.agregarHijo(N1); // Nodo del primer arreglo
        if (op != null) expresionArrNode.agregarHijo(parser.crearNodo(op.toString())); // Nodo del operador relacional
        if (N2 != null) expresionArrNode.agregarHijo(N2); // Nodo del segundo arreglo
        parser.getArbol().getRaiz().agregarHijo(expresionArrNode); // Agregar al árbol
        RESULT = expresionArrNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionArr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), t.toString() + "[]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // crearArreglos ::= tipos IDENTIFICADOR NT$4 CORCHETEAPERTURA IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idVarArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVarArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        // Crear el nodo para la creación del arreglo
        Nodo crearArreglosNode = parser.crearNodo("CREAR_ARREGLO");
        if (t != null) crearArreglosNode.agregarHijo(parser.crearNodo(t.toString())); // Nodo del tipo
        if (id != null) crearArreglosNode.agregarHijo(parser.crearNodo(id.toString())); // Nodo del identificador
        crearArreglosNode.agregarHijo(parser.crearNodo("[")); // Nodo de apertura de corchete
        if (idVarArr != null) crearArreglosNode.agregarHijo(parser.crearNodo(idVarArr.toString())); // Nodo del identificador del tamaño
        crearArreglosNode.agregarHijo(parser.crearNodo("]")); // Nodo de cierre de corchete

        RESULT = crearArreglosNode; // Retornar el nodo
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$5 ::= 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // modificarArreglos ::= IDENTIFICADOR CORCHETEAPERTURA NT$5 IDENTIFICADOR CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarArreglos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arreglos ::= arreglo 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo arreglosNode = parser.crearNodo("ARREGLOS");
        if (N1 != null) arreglosNode.agregarHijo(N1);
        RESULT = arreglosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arreglos ::= arreglos arreglo 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo arreglosNode = (Nodo) N1;
        if (N2 != null) arreglosNode.agregarHijo(N2);
        RESULT = arreglosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arreglo ::= parametrosArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosArreglo ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;
		
        // Crear nodo para el parámetro de arreglo vacío
        Nodo parametroArregloNode = parser.crearNodo("PARAMETRO_ARREGLO");
        parametroArregloNode.agregarHijo(parser.crearNodo("corcheteIzquierdo")); // Nodo de apertura de corchete
        parametroArregloNode.agregarHijo(parser.crearNodo("corcheteDerecho")); // Nodo de cierre de corchete
        RESULT = parametroArregloNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametrosArreglo ::= corcheteIzquierdo parametrosArregloAux corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        // Crear nodo para el parámetro de arreglo con contenido
        Nodo parametroArregloNode = parser.crearNodo("PARAMETRO_ARREGLO");
        parametroArregloNode.agregarHijo(parser.crearNodo("corcheteIzquierdo")); // Nodo de apertura de corchete
        parametroArregloNode.agregarHijo(N1); // Nodo auxiliar con parámetros
        parametroArregloNode.agregarHijo(parser.crearNodo("corcheteDerecho")); // Nodo de cierre de corchete
        RESULT = parametroArregloNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosArregloAux ::= tiposArr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametrosArregloAux ::= parametrosArregloAux COMA NT$6 tiposArr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArregloAux",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignaVariable ::= variable ASIGNA NT$7 literales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignaVariable ::= variable ASIGNA expresionCompleja FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$8 ::= 
            {
              Object RESULT =null;
RESULT="entrega";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignaVariable ::= modificarArreglos ASIGNA NT$8 tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // asignaVariable ::= modificarArreglos operadorRelacional tiposArr FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaVariable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar.toString());
                RESULT = idVar.toString();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionCompleja ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionCompleja ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionCompleja ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionCompleja ::= expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionCompleja ::= PARENTESISAPERTURA expresionCompleja PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionCompleja ::= expresionBinaria operadorRelacional expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionCompleja ::= expresionLogica operadorLogico literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionCompleja ::= expresionBinaria expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionCompleja ::= expresionCompleja operadorRelacional numerosLiterales operadorLogico bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionCompleja",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operandoBinaria ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operandoBinaria ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operandoBinaria ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operandoBinaria ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operandoBinaria ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operandoBinaria ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoBinaria",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionBinaria ::= numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionBinaria ::= numerosLiterales operandoBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionBinaria ::= variable operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionBinaria ::= variable operandoBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionBinaria ::= variable operandoBinaria numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operandoUnario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operandoUnario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionUnario ::= numerosLiterales operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$9 ::= 
            {
              Object RESULT =null;
RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionUnario ::= NEGATIVO NT$9 numerosLiterales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionUnario ::= variable operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnario",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionRelacionalMat ::= numerosLiterales operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionRelacionalMat ::= variable operadorRelacional numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionRelacionalMat ::= variable operadorRelacional numerosLiterales operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacionalMat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresiones ::= expresionRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresiones ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresiones ::= operandoBinaria numerosLiterales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresiones ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresiones ::= expresionUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresiones ::= expresionRelacionalMat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresiones ::= expresionBinaria operadorRelacional literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresiones ::= expresionBinaria operadorRelacional variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresiones ::= variable ASIGNA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresiones ::= PARENTESISAPERTURA NT$10 expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_lista ::= sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_lista ::= sentencia_lista sentenciaEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_lista",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentenciaEstructura ::= for_estructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1; // Pasar directamente el nodo del for
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentenciaEstructura ::= while_estructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1; // Pasar directamente el nodo del while
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentenciaEstructura ::= if_estructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1; // Pasar directamente el nodo del if
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentenciaEstructura ::= switch_estructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1; // Pasar directamente el nodo del switch
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentenciaEstructura ::= expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        // Crear un nodo para la expresión seguida de fin de expresión
        Nodo sentenciaExpresionNode = parser.crearNodo("SENTENCIA_EXPRESION");
        sentenciaExpresionNode.agregarHijo(N1); // Nodo de la expresión
        sentenciaExpresionNode.agregarHijo(parser.crearNodo(";")); // Nodo para el fin de expresión
        RESULT = sentenciaExpresionNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEstructura",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // if_estructura ::= IF PARENTESISAPERTURA expresiones PARENTESISCIERRE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifNode = parser.crearNodo("IF");

        // Agregar la expresión condicional
        if (N1 != null) {
            ifNode.agregarHijo(parser.crearNodo("if"));
            ifNode.agregarHijo(N1);
        }

        // Agregar el bloque de sentencias
        if (N2 != null) {
            ifNode.agregarHijo(N2);
        }

        // Agregar a la tabla de símbolos
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "if", "elfo");

        parser.getArbol().getRaiz().agregarHijo(ifNode);
        RESULT = ifNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // if_estructura ::= IF PARENTESISAPERTURA expresiones PARENTESISCIERRE corcheteIzquierdo return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifNode = parser.crearNodo("IF");

        if (N1 != null) {
            ifNode.agregarHijo(parser.crearNodo("if"));
            ifNode.agregarHijo(N1);
        }

        if (N2 != null) {
            ifNode.agregarHijo(N2);
        }

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "if", "elfo");

        parser.getArbol().getRaiz().agregarHijo(ifNode);
        RESULT = ifNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // if_estructura ::= IF PARENTESISAPERTURA expresiones PARENTESISCIERRE corcheteIzquierdo sentencias return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifNode = parser.crearNodo("IF");

        if (N1 != null) {
            ifNode.agregarHijo(parser.crearNodo("if"));
            ifNode.agregarHijo(N1);
        }

        if (N2 != null) ifNode.agregarHijo(N2);
        if (N3 != null) ifNode.agregarHijo(N3);

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "if", "elfo");

        parser.getArbol().getRaiz().agregarHijo(ifNode);
        RESULT = ifNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // if_estructura ::= if_estructura ELSE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifElseNode = parser.crearNodo("ELSE");

        if (N1 != null) ifElseNode.agregarHijo(N1);
        ifElseNode.agregarHijo(parser.crearNodo("else"));
        if (N2 != null) ifElseNode.agregarHijo(N2);

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "else", "hada");

        parser.getArbol().getRaiz().agregarHijo(ifElseNode);
        RESULT = ifElseNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // if_estructura ::= if_estructura ELSE corcheteIzquierdo return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifElseNode = parser.crearNodo("ELSE");

        if (N1 != null) ifElseNode.agregarHijo(N1);
        ifElseNode.agregarHijo(parser.crearNodo("else"));
        if (N2 != null) ifElseNode.agregarHijo(N2);

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "else", "hada");

        parser.getArbol().getRaiz().agregarHijo(ifElseNode);
        RESULT = ifElseNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // if_estructura ::= if_estructura ELSE corcheteIzquierdo sentencias return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo ifElseNode = parser.crearNodo("ELSE");

        if (N1 != null) ifElseNode.agregarHijo(N1);
        ifElseNode.agregarHijo(parser.crearNodo("else"));
        if (N2 != null) ifElseNode.agregarHijo(N2);
        if (N3 != null) ifElseNode.agregarHijo(N3);

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "else", "hada");

        parser.getArbol().getRaiz().agregarHijo(ifElseNode);
        RESULT = ifElseNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_estructura",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_estructura ::= FOR PARENTESISAPERTURA variable ASIGNA literales COMA expresiones COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencia_lista corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo forNode = parser.crearNodo("FOR");

        // Agregar nodos de manera segura
        if (N1 != null) forNode.agregarHijo(N1);
        forNode.agregarHijo(parser.crearNodo("="));
        if (N2 != null) forNode.agregarHijo(N2);
        if (N3 != null) forNode.agregarHijo(N3);
        forNode.agregarHijo(parser.crearNodo(","));
        if (N4 != null) forNode.agregarHijo(N4);
        forNode.agregarHijo(parser.crearNodo(","));
        if (N5 != null) forNode.agregarHijo(N5);
        forNode.agregarHijo(parser.crearNodo(")"));
        forNode.agregarHijo(parser.crearNodo("{"));
        if (N6 != null) forNode.agregarHijo(N6);
        forNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "for", "elfo");

        RESULT = forNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_estructura ::= FOR PARENTESISAPERTURA variable ASIGNA literales COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencia_lista corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo forNode = parser.crearNodo("FOR");

        // Agregar nodos de manera segura
        if (N1 != null) forNode.agregarHijo(N1);
        forNode.agregarHijo(parser.crearNodo("="));
        if (N2 != null) forNode.agregarHijo(N2);
        if (N3 != null) forNode.agregarHijo(N3);
        forNode.agregarHijo(parser.crearNodo(","));
        if (N4 != null) forNode.agregarHijo(N4);
        forNode.agregarHijo(parser.crearNodo(")"));
        forNode.agregarHijo(parser.crearNodo("{"));
        if (N5 != null) forNode.agregarHijo(N5);
        forNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "for", "elfo");

        RESULT = forNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_estructura ::= FOR PARENTESISAPERTURA creacionAsignacion COMA expresionLogica COMA expresionUnario PARENTESISCIERRE corcheteIzquierdo sentencias corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo forNode = parser.crearNodo("FOR");

        // Agregar nodos de manera segura
        if (N1 != null) forNode.agregarHijo(N1);
        forNode.agregarHijo(parser.crearNodo(","));
        if (N2 != null) forNode.agregarHijo(N2);
        forNode.agregarHijo(parser.crearNodo(","));
        if (N3 != null) forNode.agregarHijo(N3);
        forNode.agregarHijo(parser.crearNodo(")"));
        forNode.agregarHijo(parser.crearNodo("{"));
        if (N4 != null) forNode.agregarHijo(N4);
        forNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "for", "elfo");

        RESULT = forNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_estructura",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja PARENTESISCIERRE corcheteIzquierdo expresiones corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo whileNode = parser.crearNodo("WHILE");
        whileNode.agregarHijo(parser.crearNodo("while"));
        whileNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) whileNode.agregarHijo(N1); // Nodo de la expresión compleja
        whileNode.agregarHijo(parser.crearNodo(")"));
        whileNode.agregarHijo(parser.crearNodo("{"));
        if (N2 != null) whileNode.agregarHijo(N2); // Nodo de las expresiones
        whileNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "while", "envuelve");

        RESULT = whileNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones expresionRelacional PARENTESISCIERRE corcheteIzquierdo expresiones return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo whileNode = parser.crearNodo("WHILE");
        whileNode.agregarHijo(parser.crearNodo("while"));
        whileNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) whileNode.agregarHijo(N1); // Expresión compleja
        if (N2 != null) whileNode.agregarHijo(N2); // Operador lógico
        if (N3 != null) whileNode.agregarHijo(N3); // Expresiones
        if (N4 != null) whileNode.agregarHijo(N4); // Expresión relacional
        whileNode.agregarHijo(parser.crearNodo(")"));
        whileNode.agregarHijo(parser.crearNodo("{"));
        if (N5 != null) whileNode.agregarHijo(N5); // Expresiones dentro del bloque
        if (N6 != null) whileNode.agregarHijo(N6); // Return estructura
        whileNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "while", "envuelve");

        RESULT = whileNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones expresionRelacional PARENTESISCIERRE corcheteIzquierdo sentencia return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo whileNode = parser.crearNodo("WHILE");
        whileNode.agregarHijo(parser.crearNodo("while"));
        whileNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) whileNode.agregarHijo(N1); // Expresión compleja
        if (N2 != null) whileNode.agregarHijo(N2); // Operador lógico
        if (N3 != null) whileNode.agregarHijo(N3); // Expresiones
        if (N4 != null) whileNode.agregarHijo(N4); // Expresión relacional
        whileNode.agregarHijo(parser.crearNodo(")"));
        whileNode.agregarHijo(parser.crearNodo("{"));
        if (N5 != null) whileNode.agregarHijo(N5); // Sentencia dentro del bloque
        if (N6 != null) whileNode.agregarHijo(N6); // Return estructura
        whileNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "while", "envuelve");

        RESULT = whileNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // while_estructura ::= WHILE PARENTESISAPERTURA expresionCompleja operadorLogico expresiones PARENTESISCIERRE corcheteIzquierdo expresiones return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo whileNode = parser.crearNodo("WHILE");
        whileNode.agregarHijo(parser.crearNodo("while"));
        whileNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) whileNode.agregarHijo(N1); // Expresión compleja
        if (N2 != null) whileNode.agregarHijo(N2); // Operador lógico
        if (N3 != null) whileNode.agregarHijo(N3); // Expresiones
        whileNode.agregarHijo(parser.crearNodo(")"));
        whileNode.agregarHijo(parser.crearNodo("{"));
        if (N4 != null) whileNode.agregarHijo(N4); // Expresiones dentro del bloque
        if (N5 != null) whileNode.agregarHijo(N5); // Return estructura
        whileNode.agregarHijo(parser.crearNodo("}"));
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "while", "envuelve");
        RESULT = whileNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_estructura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo switchNode = parser.crearNodo("SWITCH");

        // Verificar y agregar la variable
        if (v != null) {
            switchNode.agregarHijo(parser.crearNodo("switch"));
            switchNode.agregarHijo(v);

            // Agregar a la tabla de símbolos
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        } else {
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        }

        if (N1 != null) switchNode.agregarHijo(N1);

        parser.getArbol().getRaiz().agregarHijo(switchNode);
        RESULT = switchNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch default_case corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo switchNode = parser.crearNodo("SWITCH");

        if (v != null) {
            switchNode.agregarHijo(parser.crearNodo("switch"));
            switchNode.agregarHijo(v);

            // Agregar a la tabla de símbolos
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        }
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        if (N1 != null) switchNode.agregarHijo(N1);
        if (N2 != null) switchNode.agregarHijo(N2);

        parser.getArbol().getRaiz().agregarHijo(switchNode);
        RESULT = switchNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch return_estructura corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo switchNode = parser.crearNodo("SWITCH");

        if (v != null) {
            switchNode.agregarHijo(parser.crearNodo("switch"));
            switchNode.agregarHijo(v);

            // Agregar a la tabla de símbolos
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        }
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        if (N1 != null) switchNode.agregarHijo(N1);
        if (N2 != null) switchNode.agregarHijo(N2);

        parser.getArbol().getRaiz().agregarHijo(switchNode);
        RESULT = switchNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // switch_estructura ::= SWITCH PARENTESISAPERTURA variable PARENTESISCIERRE corcheteIzquierdo casos_switch return_estructura default_case corcheteDerecho 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo switchNode = parser.crearNodo("SWITCH");

        if (v != null) {
            switchNode.agregarHijo(parser.crearNodo("switch"));
            switchNode.agregarHijo(v);

            // Agregar a la tabla de símbolos
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        }
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "switch", "varios");
        if (N1 != null) switchNode.agregarHijo(N1);
        if (N2 != null) switchNode.agregarHijo(N2);
        if (N3 != null) switchNode.agregarHijo(N3);

        parser.getArbol().getRaiz().agregarHijo(switchNode);
        RESULT = switchNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_estructura",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // casos_switch ::= caso_switch 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = N1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // casos_switch ::= casos_switch caso_switch 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo casosNode = (Nodo) N1;
        if (N2 != null) casosNode.agregarHijo(N2);
        RESULT = casosNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // casos_switch ::= casos_switch break_estructura 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo casosNode = (Nodo) N1;
                RESULT = casosNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_switch",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // caso_switch ::= CASE numerosLiterales DOS_PUNTOS sentencias FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo casoNode = parser.crearNodo("CASE");

        // Verificar y agregar el nodo de números literales (N1)
        if (N1 != null) {
            casoNode.agregarHijo(N1);

            // Agregar a la tabla de símbolos con el valor de N1
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "case", N1.toString());
        } else {
            parser.agregarVariable(0, 0, "case", "historia");
        }

        // Agregar el nodo ":" y sentencia (N2)
        casoNode.agregarHijo(parser.crearNodo(":"));
        if (N2 != null) casoNode.agregarHijo(N2);

        RESULT = casoNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // caso_switch ::= CASE numerosLiterales DOS_PUNTOS expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo casoNode = parser.crearNodo("CASE");

        // Verificar y agregar el nodo de números literales (N1)
        if (N1 != null) {
            casoNode.agregarHijo(N1);

            // Agregar a la tabla de símbolos con el valor de N1
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "case", N1.toString());
        } else {
            parser.agregarVariable(0, 0, "case", "historia");
        }

        // Agregar el nodo ":" y expresiones (N2)
        casoNode.agregarHijo(parser.crearNodo(":"));
        if (N2 != null) casoNode.agregarHijo(N2);

        RESULT = casoNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_switch",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // default_case ::= DEFAULT DOS_PUNTOS expresiones FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Nodo defaultNode = parser.crearNodo("DEFAULT");

        defaultNode.agregarHijo(parser.crearNodo("default"));
        defaultNode.agregarHijo(parser.crearNodo(":"));
        if (N1 != null) defaultNode.agregarHijo(N1);

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "default", "default_case");
        RESULT = defaultNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // break_estructura ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;
		
        Nodo breakNode = parser.crearNodo("BREAK");
        breakNode.agregarHijo(parser.crearNodo("break"));

        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "break", "break_statement");

        parser.getArbol().getRaiz().agregarHijo(breakNode);
        RESULT = breakNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_estructura",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // return_estructura ::= RETURN numerosLiterales FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        // Crear el nodo para el retorno
        Nodo returnNode = parser.crearNodo("RETURN");
        returnNode.agregarHijo(parser.crearNodo("return")); // Nodo para el literal "return"

        if (N1 != null) {
            // Agregar el valor al nodo RETURN dependiendo de su tipo
            if (N1 instanceof Nodo) {
                returnNode.agregarHijo((Nodo) N1); // Si es Nodo, lo agrega directamente
            } else {
                returnNode.agregarHijo(parser.crearNodo(N1.toString())); // Si no, lo convierte a String
            }

            // Agregar a la tabla de símbolos
            String valor = N1.toString(); // Convertir cualquier objeto a su representación en String
            Symbol symbol = (Symbol) CUP$parser$stack.peek();
            parser.agregarVariable(symbol.left, symbol.right, "return", valor);
            System.out.println("Valor de retorno ayuda: " + valor);
        } else {
            System.err.println("Error: El valor de retorno es nulo.");
            parser.agregarVariable(0, 0, "return", "undefined");
        }

        // Agregar el nodo RETURN al árbol sintáctico
        parser.getArbol().getRaiz().agregarHijo(returnNode);
        RESULT = returnNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // return_estructura ::= RETURN FIN_EXPRESION 
            {
              Object RESULT =null;
		
        // Crear el nodo para el retorno sin valor
        Nodo returnNode = parser.crearNodo("RETURN");
        returnNode.agregarHijo(parser.crearNodo("return")); // Nodo para el literal "return"

        // Registrar en la tabla de símbolos como "undefined"
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "return", "undefined");

        // Agregar el nodo RETURN al árbol sintáctico
        parser.getArbol().getRaiz().agregarHijo(returnNode);
        RESULT = returnNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_estructura",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // print ::= PRINT PARENTESISAPERTURA literales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo printNode = parser.crearNodo("PRINT");
        printNode.agregarHijo(parser.crearNodo("print"));
        printNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) printNode.agregarHijo(N1); // Nodo del literal
        printNode.agregarHijo(parser.crearNodo(")"));
        RESULT = printNode;
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "print", "narra");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // print ::= PRINT PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo printNode = parser.crearNodo("PRINT");
        printNode.agregarHijo(parser.crearNodo("print"));
        printNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) printNode.agregarHijo(N1); // Nodo de la variable
        printNode.agregarHijo(parser.crearNodo(")"));
        RESULT = printNode;
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "print", "narra");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // print ::= PRINT PARENTESISAPERTURA variable error 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.err.println("Error: No se cerró el print");
        Nodo printNode = parser.crearNodo("PRINT_ERROR");
        printNode.agregarHijo(parser.crearNodo("print"));
        printNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) printNode.agregarHijo(N1); // Nodo de la variable
        RESULT = printNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // print ::= PRINT error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Print mal formado");
        Nodo printNode = parser.crearNodo("PRINT_ERROR");
        printNode.agregarHijo(parser.crearNodo("print"));
        RESULT = printNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // print ::= PRINT variable PARENTESISCIERRE error 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        System.err.println("Print mal formado");
        Nodo printNode = parser.crearNodo("PRINT_ERROR");
        printNode.agregarHijo(parser.crearNodo("print"));
        if (N1 != null) printNode.agregarHijo(N1); // Nodo de la variable
        printNode.agregarHijo(parser.crearNodo(")"));
        RESULT = printNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // read ::= READ PARENTESISAPERTURA numerosLiterales PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo readNode = parser.crearNodo("READ");
        readNode.agregarHijo(parser.crearNodo("read"));
        readNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) readNode.agregarHijo(N1); // Nodo de los números literales
        readNode.agregarHijo(parser.crearNodo(")"));
        RESULT = readNode;
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "read", "escucha");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // read ::= READ PARENTESISAPERTURA variable PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo readNode = parser.crearNodo("READ");
        readNode.agregarHijo(parser.crearNodo("read"));
        readNode.agregarHijo(parser.crearNodo("("));
        if (N1 != null) readNode.agregarHijo(N1); // Nodo de la variable
        readNode.agregarHijo(parser.crearNodo(")"));
        RESULT = readNode;
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, "read", "escucha");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // read ::= READ PARENTESISAPERTURA PARENTESISCIERRE error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Read mal formado");
        Nodo readNode = parser.crearNodo("READ_ERROR");
        readNode.agregarHijo(parser.crearNodo("read"));
        readNode.agregarHijo(parser.crearNodo("("));
        readNode.agregarHijo(parser.crearNodo(")"));
        RESULT = readNode;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // invocacionFuncion ::= variable parametrosInvFuncion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("invocacionFuncion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // parametrosInvFuncion ::= PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosInvFuncion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // parametrosInvFuncion ::= PARENTESISAPERTURA parametrosInvFuncionAux PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosInvFuncion",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // parametrosInvFuncionAux ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosInvFuncionAux",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // parametrosInvFuncionAux ::= variable PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosInvFuncionAux",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // parametrosInvFuncionAux ::= parametrosInvFuncionAux COMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosInvFuncionAux",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
