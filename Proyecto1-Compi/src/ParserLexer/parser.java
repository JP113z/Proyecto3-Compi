
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\003\007\000\002\003\010\000\002" +
    "\003\007\000\002\034\007\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\004\007\000\002\004\006" +
    "\000\002\004\005\000\002\045\004\000\002\045\007\000" +
    "\002\045\005\000\002\045\006\000\002\045\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\007\000\002\006\007\000" +
    "\002\006\004\000\002\007\004\000\002\007\006\000\002" +
    "\007\003\000\002\007\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\046\002\000\002\011\006" +
    "\000\002\011\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\007\000\002\021\011\000\002\021\007\000\002" +
    "\021\011\000\002\021\011\000\002\022\007\000\002\022" +
    "\007\000\002\023\013\000\002\023\013\000\002\023\007" +
    "\000\002\024\012\000\002\024\011\000\002\024\011\000" +
    "\002\025\004\000\002\025\003\000\002\025\005\000\002" +
    "\026\006\000\002\026\006\000\002\027\005\000\002\027" +
    "\005\000\002\042\005\000\002\042\004\000\002\042\007" +
    "\000\002\042\011\000\002\042\006\000\002\043\003\000" +
    "\002\047\002\000\002\044\006\000\002\044\003\000\002" +
    "\031\003\000\002\031\004\000\002\050\002\000\002\032" +
    "\006\000\002\032\005\000\002\035\003\000\002\051\002" +
    "\000\002\036\007\000\002\036\004\000\002\036\006\000" +
    "\002\033\006\000\002\033\005\000\002\033\006\000\002" +
    "\052\002\000\002\030\006\000\002\030\003\000\002\030" +
    "\005\000\002\037\004\000\002\037\003\000\002\037\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\016\003\013\005\005\006\012\007\017\010" +
    "\006\011\016\001\002\000\004\002\u0111\001\002\000\010" +
    "\003\uffd9\004\uffd9\017\uffd9\001\002\000\010\003\uffd5\004" +
    "\uffd5\017\uffd5\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\020\002" +
    "\000\003\u0110\005\005\006\012\007\017\010\006\011\016" +
    "\001\002\000\020\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\001\002\000\010\003\uffd8\004\uffd8" +
    "\017\uffd8\001\002\000\024\003\u0104\004\u0102\005\005\006" +
    "\012\007\017\010\006\011\016\017\u0105\020\025\001\002" +
    "\000\006\004\021\017\020\001\002\000\020\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002" +
    "\000\010\003\uffd7\004\uffd7\017\uffd7\001\002\000\010\003" +
    "\uffd6\004\uffd6\017\uffd6\001\002\000\004\027\356\001\002" +
    "\000\004\027\022\001\002\000\006\003\023\030\024\001" +
    "\002\000\004\030\354\001\002\000\004\020\025\001\002" +
    "\000\060\003\046\005\005\006\012\007\017\010\006\011" +
    "\016\012\067\013\027\014\030\015\036\017\035\024\045" +
    "\025\063\027\053\044\047\046\043\050\060\051\034\052" +
    "\055\055\051\056\044\060\066\061\056\001\002\000\020" +
    "\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\001\002\000\100\003\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\057\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\001\002\000\100\003\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\016\uffc4\017\uffc4\021\uffc4\023\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\001\002\000\100\003\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\016\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\001\002\000\066\003\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\017\uffac\021\uffac\024\uffac\025\uffac\027\uffac\044" +
    "\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\060\uffac\061\uffac\001\002\000\100\003" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\016\uffd1" +
    "\017\uffd1\021\uffd1\023\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\057\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000\004" +
    "\027\331\001\002\000\056\022\075\026\326\027\103\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001\002" +
    "\000\100\003\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\057\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\001" +
    "\002\000\066\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\021" +
    "\uffe3\024\uffe3\025\uffe3\027\uffe3\044\uffe3\046\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\060" +
    "\uffe3\061\uffe3\001\002\000\020\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\017\uff8d\045\uff8d\001\002\000\004\045" +
    "\324\001\002\000\060\003\213\005\005\006\012\007\017" +
    "\010\006\011\016\012\067\013\027\014\030\015\036\017" +
    "\035\024\045\025\063\027\053\044\047\046\043\050\060" +
    "\051\034\052\055\055\051\056\044\060\066\061\056\001" +
    "\002\000\004\027\303\001\002\000\030\003\302\012\067" +
    "\013\027\014\030\015\036\017\102\024\045\025\063\027" +
    "\053\044\047\045\uff7b\001\002\000\100\003\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\016\uffc2\017\uffc2\021" +
    "\uffc2\023\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\057\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\001\002\000\064\003\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\021\300\024\uffe6\025\uffe6\027" +
    "\uffe6\044\uffe6\045\210\046\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\056\uffe6\060\uffe6\061\uffe6\001\002\000\024\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\050\031\135\032\136\033" +
    "\117\034\115\035\122\036\130\037\125\040\116\041\131" +
    "\042\132\043\134\044\123\045\276\062\121\063\141\064" +
    "\120\065\114\066\126\067\124\001\002\000\004\045\275" +
    "\001\002\000\066\003\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\017\uffad" +
    "\021\uffad\024\uffad\025\uffad\027\uffad\044\uffad\046\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\060\uffad\061\uffad\001\002\000\026\003\270\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\017\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\044\uffc9\001\002\000\066\003\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab" +
    "\017\uffab\021\uffab\024\uffab\025\uffab\027\uffab\044\uffab\046" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\060\uffab\061\uffab\001\002\000\004\027\233\001" +
    "\002\000\004\027\227\001\002\000\006\003\223\017\224" +
    "\001\002\000\004\027\175\001\002\000\066\003\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\017\uffe7\021\uffe7\024\uffe7\025\uffe7\027" +
    "\uffe7\044\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\001\002\000" +
    "\066\003\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\015\uffae\017\uffae\021\uffae\024" +
    "\uffae\025\uffae\027\uffae\044\uffae\046\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae\061" +
    "\uffae\001\002\000\100\003\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\057\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\001\002\000\004\045\174\001\002\000\004\045" +
    "\173\001\002\000\004\027\167\001\002\000\100\003\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\023\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\057\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000\020\005" +
    "\005\006\012\007\017\010\006\011\016\017\072\045\uffdb" +
    "\001\002\000\020\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\017\uff8c\045\uff8c\001\002\000\004\022\075\001\002" +
    "\000\004\017\074\001\002\000\004\022\075\001\002\000" +
    "\026\003\160\012\uff8b\013\uff8b\014\uff8b\015\uff8b\017\uff8b" +
    "\024\uff8b\025\uff8b\027\uff8b\044\uff8b\001\002\000\022\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\017\uff96\026\077" +
    "\045\uff96\001\002\000\026\012\067\013\027\014\030\015" +
    "\036\017\102\020\101\024\045\025\063\027\053\044\047" +
    "\001\002\000\064\005\uff94\006\uff94\007\uff94\010\uff94\011" +
    "\uff94\017\uff94\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\045\uff94\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\024\012\067\013\027\014\030\015" +
    "\036\017\102\024\045\025\063\027\053\044\047\001\002" +
    "\000\102\003\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\023\uffd0\027\103\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\057\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\001\002\000\030\003\106\012\067\013\027\014\030" +
    "\015\036\017\102\024\045\025\063\027\053\030\104\044" +
    "\047\001\002\000\100\003\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\016\uff82\017\uff82\021\uff82\023\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\057\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82" +
    "\067\uff82\001\002\000\054\003\uff7e\016\uff7e\030\uff7e\031" +
    "\135\032\136\033\117\034\115\035\122\036\130\037\125" +
    "\040\116\041\131\042\132\043\134\044\123\062\121\063" +
    "\141\064\120\065\114\066\126\067\124\001\002\000\004" +
    "\030\147\001\002\000\010\003\111\016\110\030\112\001" +
    "\002\000\024\012\uff80\013\uff80\014\uff80\015\uff80\017\uff80" +
    "\024\uff80\025\uff80\027\uff80\044\uff80\001\002\000\024\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\100\003\uff83\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\011\uff83\016\uff83\017\uff83\021\uff83" +
    "\023\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\057\uff83\062\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\001\002\000\054\003\uff7d\016\uff7d" +
    "\030\uff7d\031\135\032\136\033\117\034\115\035\122\036" +
    "\130\037\125\040\116\041\131\042\132\043\134\044\123" +
    "\062\121\063\141\064\120\065\114\066\126\067\124\001" +
    "\002\000\024\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\024\uffbd\025\uffbd\027\uffbd\044\uffbd\001\002\000\024\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\044\uffb4\001\002\000\024\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\017\uffb0\024\uffb0\025\uffb0\027\uffb0\044\uffb0" +
    "\001\002\000\100\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\057\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\001\002\000\024\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\024\uffbe\025\uffbe\027\uffbe\044\uffbe\001\002\000" +
    "\024\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\024\uffc0" +
    "\025\uffc0\027\uffc0\044\uffc0\001\002\000\024\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\017\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\044\uffb3\001\002\000\024\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\017\uffb5\024\uffb5\025\uffb5\027\uffb5\044\uffb5\001\002" +
    "\000\024\012\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\024" +
    "\uffbb\025\uffbb\027\uffbb\044\uffbb\001\002\000\024\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\017\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\044\uffb1\001\002\000\024\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\024\uffbc\025\uffbc\027\uffbc\044\uffbc\001" +
    "\002\000\024\012\067\013\027\014\030\015\036\017\102" +
    "\024\045\025\063\027\053\044\047\001\002\000\024\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\024\uffb2\025\uffb2" +
    "\027\uffb2\044\uffb2\001\002\000\024\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\017\uffaf\024\uffaf\025\uffaf\027\uffaf\044\uffaf" +
    "\001\002\000\024\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017" +
    "\uffb7\024\uffb7\025\uffb7\027\uffb7\044\uffb7\001\002\000\100" +
    "\003\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\016" +
    "\uffce\017\uffce\021\uffce\023\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\057\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001\002\000" +
    "\024\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\024\uffb6" +
    "\025\uffb6\027\uffb6\044\uffb6\001\002\000\100\003\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\016\uffba\017\uffba" +
    "\021\uffba\023\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\057\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\001\002\000\100\003\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\023\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\057\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\001\002\000\024\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\024\012\067\013\027\014" +
    "\030\015\036\017\102\024\045\025\063\027\053\044\047" +
    "\001\002\000\024\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\024\uffbf\025\uffbf\027\uffbf\044\uffbf\001\002\000\100" +
    "\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\023\uffcb\030\uffcb\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\045\uffcb\057\uffcb\062\121" +
    "\063\141\064\120\065\114\066\126\067\124\001\002\000" +
    "\100\003\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\023\uffcd\030\uffcd\031\135\032" +
    "\136\033\117\034\115\035\122\036\130\037\125\040\116" +
    "\041\131\042\132\043\134\044\123\045\uffcd\057\uffcd\062" +
    "\121\063\141\064\120\065\114\066\126\067\124\001\002" +
    "\000\100\003\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc\030\uffcc\031\135" +
    "\032\136\033\117\034\115\035\122\036\130\037\125\040" +
    "\116\041\131\042\132\043\134\044\123\045\uffcc\057\uffcc" +
    "\062\121\063\141\064\120\065\114\066\126\067\124\001" +
    "\002\000\024\012\067\013\027\014\030\015\036\017\102" +
    "\024\045\025\063\027\053\044\047\001\002\000\054\003" +
    "\uff7f\016\uff7f\030\uff7f\031\135\032\136\033\117\034\115" +
    "\035\122\036\130\037\125\040\116\041\131\042\132\043" +
    "\134\044\123\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\100\003\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\016\uff81\017\uff81\021\uff81\023\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81" +
    "\045\uff81\057\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\001\002\000\052\016\uff8e\021\uff8e\031\135" +
    "\032\136\033\117\034\115\035\122\036\130\037\125\040" +
    "\116\041\131\042\132\043\134\044\123\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\006\016" +
    "\154\021\uff91\001\002\000\004\021\153\001\002\000\020" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\017\uff93\045" +
    "\uff93\001\002\000\024\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\017\uff90\024\uff90\025\uff90\027\uff90\044\uff90\001\002\000" +
    "\024\012\067\013\027\014\030\015\036\017\102\024\045" +
    "\025\063\027\053\044\047\001\002\000\052\016\uff8f\021" +
    "\uff8f\031\135\032\136\033\117\034\115\035\122\036\130" +
    "\037\125\040\116\041\131\042\132\043\134\044\123\062" +
    "\121\063\141\064\120\065\114\066\126\067\124\001\002" +
    "\000\024\012\067\013\027\014\030\015\036\017\102\024" +
    "\045\025\063\027\053\044\047\001\002\000\004\023\161" +
    "\001\002\000\022\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\017\uff89\026\uff89\045\uff89\001\002\000\050\023\163" +
    "\031\135\032\136\033\117\034\115\035\122\036\130\037" +
    "\125\040\116\041\131\042\132\043\134\044\123\062\121" +
    "\063\141\064\120\065\114\066\126\067\124\001\002\000" +
    "\022\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\017\uff8a" +
    "\026\uff8a\045\uff8a\001\002\000\022\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\017\uff95\026\165\045\uff95\001\002" +
    "\000\024\012\067\013\027\014\030\015\036\017\102\024" +
    "\045\025\063\027\053\044\047\001\002\000\064\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\017\uff92\031\135\032" +
    "\136\033\117\034\115\035\122\036\130\037\125\040\116" +
    "\041\131\042\132\043\134\044\123\045\uff92\062\121\063" +
    "\141\064\120\065\114\066\126\067\124\001\002\000\024" +
    "\012\067\013\027\014\030\015\036\017\102\024\045\025" +
    "\063\027\053\044\047\001\002\000\050\030\171\031\135" +
    "\032\136\033\117\034\115\035\122\036\130\037\125\040" +
    "\116\041\131\042\132\043\134\044\123\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\004\045" +
    "\172\001\002\000\066\003\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\021\uffe0\024\uffe0\025\uffe0\027\uffe0\044\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\001\002\000\066\003\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\044\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\001\002\000\066" +
    "\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\044\uffe5\046\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5" +
    "\001\002\000\026\003\177\012\067\013\027\014\030\015" +
    "\036\017\102\024\045\025\063\027\053\044\047\001\002" +
    "\000\050\030\221\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\062\121\063\141\064\120\065\114\066\126\067" +
    "\124\001\002\000\004\030\200\001\002\000\006\003\202" +
    "\020\201\001\002\000\062\003\207\005\005\006\012\007" +
    "\017\010\006\011\016\012\067\013\027\014\030\015\036" +
    "\017\035\021\206\024\045\025\063\027\053\044\047\046" +
    "\043\050\060\051\034\052\055\055\051\056\044\060\066" +
    "\061\056\001\002\000\070\003\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\021\uffe9\024\uffe9\025\uffe9\027\uffe9\044\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\060\uffe9\061\uffe9\001\002\000\066\003" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\017\uffa4\021\uffa4\024\uffa4\025" +
    "\uffa4\027\uffa4\044\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\001" +
    "\002\000\004\045\217\001\002\000\062\003\213\005\005" +
    "\006\012\007\017\010\006\011\016\012\067\013\027\014" +
    "\030\015\036\017\035\021\212\024\045\025\063\027\053" +
    "\044\047\046\043\050\060\051\034\052\055\055\051\056" +
    "\044\060\066\061\056\001\002\000\070\003\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\021\uffed\024\uffed\025\uffed\027\uffed" +
    "\044\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\060\uffed\061\uffed\001\002" +
    "\000\070\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\044\uffe6\045\210\046\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\060\uffe6\061\uffe6\001\002\000\066\003\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\021\uffde\024\uffde\025\uffde\027\uffde\044" +
    "\uffde\046\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\060\uffde\061\uffde\001\002\000\004\045" +
    "\215\001\002\000\070\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017" +
    "\uffeb\021\uffeb\024\uffeb\025\uffeb\027\uffeb\044\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\060\uffeb\061\uffeb\001\002\000\004\045\210" +
    "\001\002\000\066\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8" +
    "\021\uffe8\024\uffe8\025\uffe8\027\uffe8\044\uffe8\046\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\061\uffe8\001\002\000\004\021\216\001\002\000" +
    "\070\003\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec\021\uffec\024" +
    "\uffec\025\uffec\027\uffec\044\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060" +
    "\uffec\061\uffec\001\002\000\004\021\220\001\002\000\070" +
    "\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\017\uffea\021\uffea\024\uffea" +
    "\025\uffea\027\uffea\044\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060\uffea" +
    "\061\uffea\001\002\000\006\003\202\020\201\001\002\000" +
    "\066\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\021\uffa5\024" +
    "\uffa5\025\uffa5\027\uffa5\044\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\061" +
    "\uffa5\001\002\000\004\045\uffda\001\002\000\010\022\075" +
    "\026\225\045\uffdd\001\002\000\024\012\067\013\027\014" +
    "\030\015\036\017\102\024\045\025\063\027\053\044\047" +
    "\001\002\000\050\031\135\032\136\033\117\034\115\035" +
    "\122\036\130\037\125\040\116\041\131\042\132\043\134" +
    "\044\123\045\uffdc\062\121\063\141\064\120\065\114\066" +
    "\126\067\124\001\002\000\004\017\230\001\002\000\004" +
    "\030\231\001\002\000\004\045\232\001\002\000\066\003" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf\025" +
    "\uffdf\027\uffdf\044\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\001" +
    "\002\000\026\003\235\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\050\030\255\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\062\121\063\141\064\120\065\114\066\126\067\124" +
    "\001\002\000\004\030\236\001\002\000\004\020\237\001" +
    "\002\000\004\053\242\001\002\000\010\003\251\021\253" +
    "\053\242\001\002\000\012\003\uff9c\021\uff9c\053\uff9c\054" +
    "\uff9c\001\002\000\026\003\244\012\067\013\027\014\030" +
    "\015\036\017\102\024\045\025\063\027\053\044\047\001" +
    "\002\000\050\031\135\032\136\033\117\034\115\035\122" +
    "\036\130\037\125\040\116\041\131\042\132\043\134\044" +
    "\123\057\247\062\121\063\141\064\120\065\114\066\126" +
    "\067\124\001\002\000\004\057\245\001\002\000\056\003" +
    "\207\005\005\006\012\007\017\010\006\011\016\012\067" +
    "\013\027\014\030\015\036\017\035\024\045\025\063\027" +
    "\053\044\047\046\043\050\060\051\034\052\055\055\051" +
    "\060\066\061\056\001\002\000\064\003\213\005\005\006" +
    "\012\007\017\010\006\011\016\012\067\013\027\014\030" +
    "\015\036\017\035\021\uff99\024\045\025\063\027\053\044" +
    "\047\046\043\050\060\051\034\052\055\053\uff99\054\uff99" +
    "\055\051\060\066\061\056\001\002\000\056\003\207\005" +
    "\005\006\012\007\017\010\006\011\016\012\067\013\027" +
    "\014\030\015\036\017\035\024\045\025\063\027\053\044" +
    "\047\046\043\050\060\051\034\052\055\055\051\060\066" +
    "\061\056\001\002\000\064\003\213\005\005\006\012\007" +
    "\017\010\006\011\016\012\067\013\027\014\030\015\036" +
    "\017\035\021\uff9a\024\045\025\063\027\053\044\047\046" +
    "\043\050\060\051\034\052\055\053\uff9a\054\uff9a\055\051" +
    "\060\066\061\056\001\002\000\004\053\242\001\002\000" +
    "\012\003\uff9d\021\uff9d\053\uff9d\054\uff9d\001\002\000\066" +
    "\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\017\uff9e\021\uff9e\024\uff9e" +
    "\025\uff9e\027\uff9e\044\uff9e\046\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e" +
    "\001\002\000\012\003\uff9b\021\uff9b\053\uff9b\054\uff9b\001" +
    "\002\000\004\020\256\001\002\000\004\053\242\001\002" +
    "\000\012\003\251\021\262\053\242\054\260\001\002\000" +
    "\006\003\264\057\265\001\002\000\004\021\263\001\002" +
    "\000\066\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f" +
    "\024\uff9f\025\uff9f\027\uff9f\044\uff9f\046\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f" +
    "\061\uff9f\001\002\000\066\003\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\017\uffa0\021\uffa0\024\uffa0\025\uffa0\027\uffa0\044\uffa0\046" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\060\uffa0\061\uffa0\001\002\000\056\003\207\005" +
    "\005\006\012\007\017\010\006\011\016\012\067\013\027" +
    "\014\030\015\036\017\035\024\045\025\063\027\053\044" +
    "\047\046\043\050\060\051\034\052\055\055\051\060\066" +
    "\061\056\001\002\000\056\003\207\005\005\006\012\007" +
    "\017\010\006\011\016\012\067\013\027\014\030\015\036" +
    "\017\035\024\045\025\063\027\053\044\047\046\043\050" +
    "\060\051\034\052\055\055\051\060\066\061\056\001\002" +
    "\000\060\003\213\005\005\006\012\007\017\010\006\011" +
    "\016\012\067\013\027\014\030\015\036\017\035\021\uff98" +
    "\024\045\025\063\027\053\044\047\046\043\050\060\051" +
    "\034\052\055\055\051\060\066\061\056\001\002\000\060" +
    "\003\213\005\005\006\012\007\017\010\006\011\016\012" +
    "\067\013\027\014\030\015\036\017\035\021\uff97\024\045" +
    "\025\063\027\053\044\047\046\043\050\060\051\034\052" +
    "\055\055\051\060\066\061\056\001\002\000\004\030\274" +
    "\001\002\000\024\012\067\013\027\014\030\015\036\017" +
    "\102\024\045\025\063\027\053\044\047\001\002\000\050" +
    "\030\273\031\135\032\136\033\117\034\115\035\122\036" +
    "\130\037\125\040\116\041\131\042\132\043\134\044\123" +
    "\062\121\063\141\064\120\065\114\066\126\067\124\001" +
    "\002\000\100\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\057" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\100\003\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\057\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\001\002\000\066\003\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017" +
    "\uffe1\021\uffe1\024\uffe1\025\uffe1\027\uffe1\044\uffe1\046\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\060\uffe1\061\uffe1\001\002\000\066\003\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\021\uffe2\024\uffe2\025\uffe2\027\uffe2" +
    "\044\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\001\002\000\100" +
    "\003\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\016" +
    "\uffca\017\uffca\021\uffca\023\uffca\030\uffca\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\uffca\043\uffca\044\123\045\uffca\057\uffca\062\121" +
    "\063\141\064\120\065\114\066\126\067\124\001\002\000" +
    "\020\002\uffee\003\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\001\002\000\050\031\135\032\136\033\117\034" +
    "\115\035\122\036\130\037\125\040\116\041\131\042\132" +
    "\043\134\044\123\045\uff7c\062\121\063\141\064\120\065" +
    "\114\066\126\067\124\001\002\000\004\045\uff7a\001\002" +
    "\000\026\003\305\012\067\013\027\014\030\015\036\017" +
    "\102\024\045\025\063\027\053\044\047\001\002\000\050" +
    "\030\312\031\135\032\136\033\117\034\115\035\122\036" +
    "\130\037\125\040\116\041\131\042\132\043\134\044\123" +
    "\062\121\063\141\064\120\065\114\066\126\067\124\001" +
    "\002\000\004\030\306\001\002\000\006\003\202\020\201" +
    "\001\002\000\070\003\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\017\uffa8" +
    "\021\uffa8\024\uffa8\025\uffa8\027\uffa8\044\uffa8\046\uffa8\047" +
    "\310\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\060\uffa8\061\uffa8\001\002\000\006\003\202\020" +
    "\201\001\002\000\066\003\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017" +
    "\uffa6\021\uffa6\024\uffa6\025\uffa6\027\uffa6\044\uffa6\046\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\060\uffa6\061\uffa6\001\002\000\006\003\313\020\201" +
    "\001\002\000\070\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\021\uffe9\024\uffe9\025\uffe9\027\uffe9\044\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\060\uffe9\061\uffe9\001\002\000\070\003\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\017\uffaa\021\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\044\uffaa\046\uffaa\047\315\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa\001" +
    "\002\000\006\003\202\020\201\001\002\000\066\003\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\017\uffa9\021\uffa9\024\uffa9\025\uffa9" +
    "\027\uffa9\044\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\060\uffa9\061\uffa9\001\002" +
    "\000\006\003\202\020\201\001\002\000\066\003\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\017\uffa7\021\uffa7\024\uffa7\025\uffa7\027" +
    "\uffa7\044\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\001\002\000" +
    "\004\045\322\001\002\000\004\021\323\001\002\000\020" +
    "\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\001\002\000\004\021\325\001\002\000\020\002\uffef" +
    "\003\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\001" +
    "\002\000\026\003\330\012\067\013\027\014\030\015\036" +
    "\017\102\024\045\025\063\027\053\044\047\001\002\000" +
    "\050\031\135\032\136\033\117\034\115\035\122\036\130" +
    "\037\125\040\116\041\131\042\132\043\134\044\123\045" +
    "\uffd4\062\121\063\141\064\120\065\114\066\126\067\124" +
    "\001\002\000\004\045\uffd3\001\002\000\020\003\334\005" +
    "\005\006\012\007\017\010\006\011\016\017\335\001\002" +
    "\000\004\045\346\001\002\000\004\045\340\001\002\000" +
    "\006\030\336\045\uffd2\001\002\000\006\022\075\026\326" +
    "\001\002\000\006\003\202\020\201\001\002\000\066\003" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\017\uffa1\021\uffa1\024\uffa1\025" +
    "\uffa1\027\uffa1\044\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\056\uffa1\060\uffa1\061\uffa1\001" +
    "\002\000\024\012\067\013\027\014\030\015\036\017\102" +
    "\024\045\025\063\027\053\044\047\001\002\000\050\031" +
    "\135\032\136\033\117\034\115\035\122\036\130\037\125" +
    "\040\116\041\131\042\132\043\134\044\123\045\342\062" +
    "\121\063\141\064\120\065\114\066\126\067\124\001\002" +
    "\000\024\012\067\013\027\014\030\015\036\017\102\024" +
    "\045\025\063\027\053\044\047\001\002\000\050\030\344" +
    "\031\135\032\136\033\117\034\115\035\122\036\130\037" +
    "\125\040\116\041\131\042\132\043\134\044\123\062\121" +
    "\063\141\064\120\065\114\066\126\067\124\001\002\000" +
    "\006\003\202\020\201\001\002\000\066\003\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\017\uffa3\021\uffa3\024\uffa3\025\uffa3\027\uffa3" +
    "\044\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\001\002\000\024" +
    "\012\067\013\027\014\030\015\036\017\102\024\045\025" +
    "\063\027\053\044\047\001\002\000\050\031\135\032\136" +
    "\033\117\034\115\035\122\036\130\037\125\040\116\041" +
    "\131\042\132\043\134\044\123\045\350\062\121\063\141" +
    "\064\120\065\114\066\126\067\124\001\002\000\024\012" +
    "\067\013\027\014\030\015\036\017\102\024\045\025\063" +
    "\027\053\044\047\001\002\000\050\030\352\031\135\032" +
    "\136\033\117\034\115\035\122\036\130\037\125\040\116" +
    "\041\131\042\132\043\134\044\123\062\121\063\141\064" +
    "\120\065\114\066\126\067\124\001\002\000\006\003\202" +
    "\020\201\001\002\000\066\003\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\017\uffa2\021\uffa2\024\uffa2\025\uffa2\027\uffa2\044\uffa2\046" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\060\uffa2\061\uffa2\001\002\000\004\020\025\001" +
    "\002\000\020\002\ufff6\003\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\001\002\000\020\003\360\005\005\006" +
    "\012\007\017\010\006\011\016\030\357\001\002\000\004" +
    "\020\025\001\002\000\004\030\376\001\002\000\004\030" +
    "\374\001\002\000\004\017\373\001\002\000\010\003\365" +
    "\016\364\030\uff88\001\002\000\014\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\001\002\000\014\005\005\006\012" +
    "\007\017\010\006\011\016\001\002\000\004\017\367\001" +
    "\002\000\010\003\uff84\016\uff84\030\uff84\001\002\000\014" +
    "\005\005\006\012\007\017\010\006\011\016\001\002\000" +
    "\004\017\372\001\002\000\010\003\uff86\016\uff86\030\uff86" +
    "\001\002\000\010\003\uff85\016\uff85\030\uff85\001\002\000" +
    "\004\020\025\001\002\000\020\002\ufff3\003\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\004\020" +
    "\025\001\002\000\020\002\ufff2\003\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\001\002\000\020\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\001\002" +
    "\000\020\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\001\002\000\004\027\u010d\001\002\000\020" +
    "\002\uffff\003\u010b\005\005\006\012\007\017\010\006\011" +
    "\016\001\002\000\010\004\u0102\017\u0105\020\025\001\002" +
    "\000\004\027\u0106\001\002\000\014\005\005\006\012\007" +
    "\017\010\006\011\016\001\002\000\004\030\u0108\001\002" +
    "\000\004\020\025\001\002\000\020\002\ufff1\003\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001\002\000\020" +
    "\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\001\002\000\024\003\u0104\004\u0102\005\005\006\012" +
    "\007\017\010\006\011\016\017\u0105\020\025\001\002\000" +
    "\020\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\001\002\000\004\030\u010e\001\002\000\004\020" +
    "\025\001\002\000\020\002\ufff5\003\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\001\002\000\026\002\ufffe\003" +
    "\u0104\004\u0102\005\005\006\012\007\017\010\006\011\016" +
    "\017\u0105\020\025\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\016\002\003\003\014\012\013\034\010\040" +
    "\006\041\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\014\012" +
    "\013\034\010\040\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\014\004\u0100\012\013\034\010\040" +
    "\006\041\u0102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\025\001\001\000\042\005\041\006\060\007\063\010" +
    "\064\011\047\012\056\013\032\020\036\021\061\022\051" +
    "\023\031\024\053\031\067\033\030\037\040\042\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\213\007\063\010\064\011\047\012\056\013\032" +
    "\020\036\021\061\022\051\023\031\024\053\031\067\033" +
    "\030\037\320\042\037\001\001\000\002\001\001\000\010" +
    "\011\300\013\032\033\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\276\013\032\033\030\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\072" +
    "\042\070\001\001\000\002\001\001\000\004\032\163\001" +
    "\001\000\002\001\001\000\004\032\075\001\001\000\004" +
    "\050\156\001\001\000\002\001\001\000\010\011\077\013" +
    "\032\033\030\001\001\000\012\014\136\015\132\016\137" +
    "\017\126\001\001\000\014\011\147\013\032\033\030\043" +
    "\151\044\150\001\001\000\002\001\001\000\012\011\104" +
    "\013\032\030\106\033\030\001\001\000\002\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\144\001\001\000" +
    "\010\011\112\013\032\033\030\001\001\000\002\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\143\013\032\033\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\142\013\032\033\030\001\001" +
    "\000\010\011\141\013\032\033\030\001\001\000\002\001" +
    "\001\000\012\014\136\015\132\016\137\017\126\001\001" +
    "\000\012\014\136\015\132\016\137\017\126\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\010" +
    "\011\145\013\032\033\030\001\001\000\012\014\136\015" +
    "\132\016\137\017\126\001\001\000\002\001\001\000\012" +
    "\014\136\015\132\016\137\017\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\154" +
    "\001\001\000\010\011\155\013\032\033\030\001\001\000" +
    "\012\014\136\015\132\016\137\017\126\001\001\000\010" +
    "\011\161\013\032\033\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\165\013\032\033\030\001\001\000\012\014\136\015\132" +
    "\016\137\017\126\001\001\000\010\011\167\013\032\033" +
    "\030\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\175\013\032\033\030" +
    "\001\001\000\012\014\136\015\132\016\137\017\126\001" +
    "\001\000\002\001\001\000\004\045\202\001\001\000\042" +
    "\005\204\006\060\007\063\010\064\011\047\012\056\013" +
    "\032\020\036\021\061\022\051\023\031\024\053\031\067" +
    "\033\030\037\203\042\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\006\213\007\063" +
    "\010\064\011\047\012\056\013\032\020\036\021\061\022" +
    "\051\023\031\024\053\031\067\033\030\037\210\042\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\075\001" +
    "\001\000\010\011\225\013\032\033\030\001\001\000\012" +
    "\014\136\015\132\016\137\017\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\233\013\032\033\030\001\001\000\012\014" +
    "\136\015\132\016\137\017\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\237\026\240\001\001\000" +
    "\004\026\251\001\001\000\002\001\001\000\010\011\242" +
    "\013\032\033\030\001\001\000\012\014\136\015\132\016" +
    "\137\017\126\001\001\000\002\001\001\000\040\005\245" +
    "\006\060\007\063\010\064\011\047\012\056\013\032\020" +
    "\036\021\061\022\051\023\031\024\053\031\067\033\030" +
    "\042\037\001\001\000\036\006\213\007\063\010\064\011" +
    "\047\012\056\013\032\020\036\021\061\022\051\023\031" +
    "\024\053\031\067\033\030\042\037\001\001\000\040\005" +
    "\247\006\060\007\063\010\064\011\047\012\056\013\032" +
    "\020\036\021\061\022\051\023\031\024\053\031\067\033" +
    "\030\042\037\001\001\000\036\006\213\007\063\010\064" +
    "\011\047\012\056\013\032\020\036\021\061\022\051\023" +
    "\031\024\053\031\067\033\030\042\037\001\001\000\004" +
    "\026\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\256\026\240" +
    "\001\001\000\006\026\251\027\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\005\266\006\060\007\063\010\064\011\047\012" +
    "\056\013\032\020\036\021\061\022\051\023\031\024\053" +
    "\031\067\033\030\042\037\001\001\000\040\005\265\006" +
    "\060\007\063\010\064\011\047\012\056\013\032\020\036" +
    "\021\061\022\051\023\031\024\053\031\067\033\030\042" +
    "\037\001\001\000\036\006\213\007\063\010\064\011\047" +
    "\012\056\013\032\020\036\021\061\022\051\023\031\024" +
    "\053\031\067\033\030\042\037\001\001\000\036\006\213" +
    "\007\063\010\064\011\047\012\056\013\032\020\036\021" +
    "\061\022\051\023\031\024\053\031\067\033\030\042\037" +
    "\001\001\000\002\001\001\000\010\011\271\013\032\033" +
    "\030\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\136\015\132\016\137" +
    "\017\126\001\001\000\002\001\001\000\012\014\136\015" +
    "\132\016\137\017\126\001\001\000\002\001\001\000\010" +
    "\011\303\013\032\033\030\001\001\000\012\014\136\015" +
    "\132\016\137\017\126\001\001\000\002\001\001\000\004" +
    "\045\306\001\001\000\002\001\001\000\004\045\310\001" +
    "\001\000\002\001\001\000\004\045\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\315\001\001\000" +
    "\002\001\001\000\004\045\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\326\013\032" +
    "\033\030\001\001\000\012\014\136\015\132\016\137\017" +
    "\126\001\001\000\002\001\001\000\014\007\332\010\331" +
    "\012\056\031\067\042\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\163\001\001" +
    "\000\004\045\336\001\001\000\002\001\001\000\010\011" +
    "\340\013\032\033\030\001\001\000\012\014\136\015\132" +
    "\016\137\017\126\001\001\000\010\011\342\013\032\033" +
    "\030\001\001\000\012\014\136\015\132\016\137\017\126" +
    "\001\001\000\004\045\344\001\001\000\002\001\001\000" +
    "\010\011\346\013\032\033\030\001\001\000\012\014\136" +
    "\015\132\016\137\017\126\001\001\000\010\011\350\013" +
    "\032\033\030\001\001\000\012\014\136\015\132\016\137" +
    "\017\126\001\001\000\004\045\352\001\001\000\002\001" +
    "\001\000\004\004\354\001\001\000\002\001\001\000\010" +
    "\012\361\035\360\036\362\001\001\000\004\004\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\367\001\001\000\004\012" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\374\001\001\000\002\001\001" +
    "\000\004\004\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\014" +
    "\012\013\034\010\040\u0109\001\001\000\004\004\u0100\001" +
    "\001\000\002\001\001\000\010\012\361\035\u0106\036\362" +
    "\001\001\000\002\001\001\000\004\004\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\014\004\u0100" +
    "\012\013\034\010\040\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u010e\001\001\000\002\001\001" +
    "\000\014\003\014\004\u0100\012\013\034\010\040\u010b\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;


    /**public String getTipo(ArrayList<String> listaTablasSimbolos, String id) {
                    String tipo = "null";
                    for (String token : listaTablasSimbolos) {
                        String[] partesToken = token.split(":");
                        if (id.equals(partesToken[0])) {
                            tipo = partesToken[1];
                            break;
                        }
                    }
                    if (tipo.equals("null")) {
                        System.err.println("Error semántico: Variable " + id + " no declarada.");
                    }
                    System.out.println("tipo: " + tipo);
                    return tipo;
                }*/

    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       |");
            System.out.println("+--------+---------+----------------------+------------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s |",
                linea + 1, columna + 1, lexema, tipo);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= lista_funciones error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= lista_funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_funciones ::= lista_funciones error funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= declaracion_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_main ::= tipo MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_main ::= tipo MAIN PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_main ::= error MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= tipo IDENTIFICADOR PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funcion ::= error IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= corcheteIzquierdo lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= corcheteIzquierdo return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloqueEstructura ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloqueEstructura ::= corcheteIzquierdo lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloqueEstructura ::= corcheteIzquierdo lista_sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloqueEstructura ::= corcheteIzquierdo return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloqueEstructura ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_sentencias ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en una setencia."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= PRINT PARENTESISAPERTURA expresion PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= READ PARENTESISAPERTURA IDENTIFICADOR PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion ::= tipo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("INTEGER");
       // parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= STRING 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("STRING");
     //   parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cometa";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= CHAR 
            {
              Object RESULT =null;
		
      //  Nodo tipoNode = parser.crearNodo("CHAR");
       // parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "cupido";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		
       // Nodo tipoNode = parser.crearNodo("FLOAT");
      //  parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= BOOL 
            {
              Object RESULT =null;
		
      //  Nodo tipoNode = parser.crearNodo("BOOL");
     //   parser.getArbol().getRaiz().agregarHijo(tipoNode);
        RESULT = "trueno";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= IDENTIFICADOR ASIGNA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion operador_unario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion operador_binario expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$0 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= PARENTESISAPERTURA NT$0 expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_binario ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_binario ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_binario ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_unario ::= NEGATIVO 
            {
              Object RESULT =null;
		RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_logico ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructura_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE error ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // while_stmt ::= WHILE PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_stmt ::= WHILE PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_stmt ::= FOR PARENTESISAPERTURA declaracion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_stmt ::= FOR PARENTESISAPERTURA asignacion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_stmt ::= FOR PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list default_stmt corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // switch_stmt ::= SWITCH PARENTESISAPERTURA error PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_list ::= case_list error case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_stmt ::= CASE expresion DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_stmt ::= CASE error DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // default_stmt ::= DEFAULT DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // default_stmt ::= DEFAULT error lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA corcheteIzquierdo parametrosArreglos corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametrosArreglos ::= parametrosArreglosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$1 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametrosArreglosAux ::= parametrosArreglosAux COMA NT$1 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametrosArreglosAux ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arreglo ::= declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arreglo ::= arreglo declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$2 ::= 
            {
              Object RESULT =null;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // acceso_arreglo ::= CORCHETEAPERTURA NT$2 expresion CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // acceso_arreglo ::= CORCHETEAPERTURA error CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$3 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista_parametros ::= lista_parametros COMA NT$3 tipo IDENTIFICADOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista_parametros ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_parametros ::= lista_parametros error tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA lista_expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lista_expresiones ::= lista_expresiones COMA NT$4 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_expresiones ::= lista_expresiones error expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // return_stmt ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // return_stmt ::= RETURN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
