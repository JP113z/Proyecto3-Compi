
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import Tree.Arbol;
import Tree.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\003\005\000\002\003\006\000\002" +
    "\050\002\000\002\046\006\000\002\046\007\000\002\034" +
    "\006\000\002\034\005\000\002\034\006\000\002\051\002" +
    "\000\002\047\006\000\002\047\010\000\002\052\002\000" +
    "\002\004\010\000\002\053\002\000\002\004\007\000\002" +
    "\004\005\000\002\045\004\000\002\045\007\000\002\045" +
    "\005\000\002\045\006\000\002\045\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\007\000\002\006\007\000\002\006" +
    "\004\000\002\007\004\000\002\007\006\000\002\007\003" +
    "\000\002\007\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\054\002\000\002\011\006\000\002" +
    "\011\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\007\000\002\021\011\000\002\021\007\000\002\021\011" +
    "\000\002\021\011\000\002\022\007\000\002\022\007\000" +
    "\002\023\013\000\002\023\013\000\002\023\007\000\002" +
    "\024\012\000\002\024\011\000\002\024\011\000\002\025" +
    "\004\000\002\025\003\000\002\025\005\000\002\026\006" +
    "\000\002\026\006\000\002\027\005\000\002\027\005\000" +
    "\002\042\005\000\002\042\004\000\002\042\007\000\002" +
    "\042\011\000\002\042\006\000\002\043\003\000\002\055" +
    "\002\000\002\044\006\000\002\044\003\000\002\031\003" +
    "\000\002\031\004\000\002\056\002\000\002\032\006\000" +
    "\002\032\005\000\002\035\003\000\002\036\006\000\002" +
    "\036\004\000\002\036\006\000\002\033\006\000\002\033" +
    "\005\000\002\033\006\000\002\057\002\000\002\030\006" +
    "\000\002\030\003\000\002\030\005\000\002\037\004\000" +
    "\002\037\003\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\016\003\012\005\005\006\011\007\015\010" +
    "\006\011\017\001\002\000\004\002\u0116\001\002\000\010" +
    "\003\uffd3\004\uffd3\017\uffd3\001\002\000\010\003\uffcf\004" +
    "\uffcf\017\uffcf\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\020\002" +
    "\000\003\u0115\005\005\006\011\007\015\010\006\011\017" +
    "\001\002\000\010\003\uffd2\004\uffd2\017\uffd2\001\002\000" +
    "\024\003\u0109\004\u0107\005\005\006\011\007\015\010\006" +
    "\011\017\017\u010a\020\027\001\002\000\006\004\021\017" +
    "\020\001\002\000\020\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\001\002\000\010\003\uffd0\004" +
    "\uffd0\017\uffd0\001\002\000\020\002\ufff9\003\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\001\002\000\010\003" +
    "\uffd1\004\uffd1\017\uffd1\001\002\000\004\027\uffef\001\002" +
    "\000\004\027\ufff5\001\002\000\004\027\024\001\002\000" +
    "\020\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\001\002\000\006\003\025\030\026\001\002\000" +
    "\004\030\360\001\002\000\004\020\027\001\002\000\060" +
    "\003\033\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\017\uffec\024\uffec\025\uffec" +
    "\027\uffec\044\uffec\046\uffec\050\uffec\051\uffec\052\uffec\055" +
    "\uffec\056\uffea\060\uffec\061\uffec\001\002\000\020\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\001" +
    "\002\000\004\056\213\001\002\000\056\003\052\005\005" +
    "\006\011\007\015\010\006\011\017\012\073\013\035\014" +
    "\036\015\044\017\043\024\051\025\067\027\057\044\053" +
    "\046\050\050\064\051\042\052\061\055\055\060\072\061" +
    "\063\001\002\000\004\021\034\001\002\000\020\002\uffe8" +
    "\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\001" +
    "\002\000\100\003\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\016\uffbf\017\uffbf\021\uffbf\023\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\057" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\001\002\000\100\003\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\016\uffbe\017\uffbe\021\uffbe\023\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\057\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\001\002\000\100\003\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\016\uffc9\017\uffc9\021\uffc9\023\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\001\002\000\066\003\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\017\uffa6\021\uffa6\024\uffa6\025\uffa6\027\uffa6\044\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\060\uffa6\061\uffa6\001\002\000\100\003\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\016\uffcb\017\uffcb" +
    "\021\uffcb\023\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\057\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\004\027\332" +
    "\001\002\000\056\022\100\026\327\027\105\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001\002\000\100" +
    "\003\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\023\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\057\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000" +
    "\066\003\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\044\uffdd\046\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\061" +
    "\uffdd\001\002\000\020\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\017\uff87\045\uff87\001\002\000\060\003\220\005" +
    "\005\006\011\007\015\010\006\011\017\012\073\013\035" +
    "\014\036\015\044\017\043\024\051\025\067\027\057\044" +
    "\053\046\050\050\064\051\042\052\061\055\055\056\213" +
    "\060\072\061\063\001\002\000\004\027\306\001\002\000" +
    "\100\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\016\uffbc\017\uffbc\021\uffbc\023\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\057\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002" +
    "\000\070\003\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\021\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\044\uffe0\045\222\046\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\060\uffe0\061\uffe0\001\002\000\024\012\073\013\035\014" +
    "\036\015\044\017\104\024\051\025\067\027\057\044\053" +
    "\001\002\000\050\031\137\032\140\033\120\034\117\035" +
    "\124\036\132\037\127\040\121\041\133\042\134\043\136" +
    "\044\125\045\304\062\123\063\143\064\122\065\116\066" +
    "\130\067\126\001\002\000\004\045\303\001\002\000\066" +
    "\003\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\021\uffa7\024\uffa7" +
    "\025\uffa7\027\uffa7\044\uffa7\046\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7" +
    "\001\002\000\026\003\276\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\024\uffc3\025\uffc3\027\uffc3\044\uffc3\001\002" +
    "\000\066\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\021\uffa5" +
    "\024\uffa5\025\uffa5\027\uffa5\044\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5" +
    "\061\uffa5\001\002\000\004\027\241\001\002\000\006\003" +
    "\235\017\236\001\002\000\004\027\231\001\002\000\004" +
    "\027\201\001\002\000\066\003\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\021\uffe1\024\uffe1\025\uffe1\027\uffe1\044\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\060\uffe1\061\uffe1\001\002\000\066\003\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\017\uffa8\021\uffa8\024\uffa8\025\uffa8\027" +
    "\uffa8\044\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\056\uffa8\060\uffa8\061\uffa8\001\002\000" +
    "\100\003\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\023\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\057\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002" +
    "\000\004\045\200\001\002\000\004\045\177\001\002\000" +
    "\004\027\173\001\002\000\100\003\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\016\uffc0\017\uffc0\021\uffc0\023" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\057\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\001\002\000\020\005\005\006\011\007" +
    "\015\010\006\011\017\017\077\045\uffd5\001\002\000\020" +
    "\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\017\uff86\045" +
    "\uff86\001\002\000\004\017\157\001\002\000\004\022\100" +
    "\001\002\000\026\003\152\012\uff85\013\uff85\014\uff85\015" +
    "\uff85\017\uff85\024\uff85\025\uff85\027\uff85\044\uff85\001\002" +
    "\000\022\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\017" +
    "\uff8f\026\102\045\uff8f\001\002\000\024\012\073\013\035" +
    "\014\036\015\044\017\104\024\051\025\067\027\057\044" +
    "\053\001\002\000\064\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\017\uff8c\031\137\032\140\033\120\034\117\035" +
    "\124\036\132\037\127\040\121\041\133\042\134\043\136" +
    "\044\125\045\uff8c\062\123\063\143\064\122\065\116\066" +
    "\130\067\126\001\002\000\102\003\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\016\uffca\017\uffca\021\uffca\023" +
    "\uffca\027\105\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\057\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\001\002\000\030\003\110\012" +
    "\073\013\035\014\036\015\044\017\104\024\051\025\067" +
    "\027\057\030\106\044\053\001\002\000\100\003\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\016\uff7d\017\uff7d" +
    "\021\uff7d\023\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\057\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\067\uff7d\001\002\000\054\003\uff79" +
    "\016\uff79\030\uff79\031\137\032\140\033\120\034\117\035" +
    "\124\036\132\037\127\040\121\041\133\042\134\043\136" +
    "\044\125\062\123\063\143\064\122\065\116\066\130\067" +
    "\126\001\002\000\004\030\151\001\002\000\010\003\113" +
    "\016\112\030\114\001\002\000\024\012\uff7b\013\uff7b\014" +
    "\uff7b\015\uff7b\017\uff7b\024\uff7b\025\uff7b\027\uff7b\044\uff7b" +
    "\001\002\000\024\012\073\013\035\014\036\015\044\017" +
    "\104\024\051\025\067\027\057\044\053\001\002\000\100" +
    "\003\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\016" +
    "\uff7e\017\uff7e\021\uff7e\023\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\057\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000" +
    "\054\003\uff78\016\uff78\030\uff78\031\137\032\140\033\120" +
    "\034\117\035\124\036\132\037\127\040\121\041\133\042" +
    "\134\043\136\044\125\062\123\063\143\064\122\065\116" +
    "\066\130\067\126\001\002\000\024\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\024\uffb7\025\uffb7\027\uffb7\044\uffb7" +
    "\001\002\000\024\012\uffae\013\uffae\014\uffae\015\uffae\017" +
    "\uffae\024\uffae\025\uffae\027\uffae\044\uffae\001\002\000\100" +
    "\003\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\023\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\057\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000" +
    "\024\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\024\uffaa" +
    "\025\uffaa\027\uffaa\044\uffaa\001\002\000\024\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\017\uffb8\024\uffb8\025\uffb8\027\uffb8" +
    "\044\uffb8\001\002\000\024\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\017\uffba\024\uffba\025\uffba\027\uffba\044\uffba\001\002" +
    "\000\024\012\uffad\013\uffad\014\uffad\015\uffad\017\uffad\024" +
    "\uffad\025\uffad\027\uffad\044\uffad\001\002\000\024\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\017\uffaf\024\uffaf\025\uffaf\027" +
    "\uffaf\044\uffaf\001\002\000\024\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\017\uffb5\024\uffb5\025\uffb5\027\uffb5\044\uffb5\001" +
    "\002\000\024\012\uffab\013\uffab\014\uffab\015\uffab\017\uffab" +
    "\024\uffab\025\uffab\027\uffab\044\uffab\001\002\000\024\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\024\uffb6\025\uffb6" +
    "\027\uffb6\044\uffb6\001\002\000\024\012\073\013\035\014" +
    "\036\015\044\017\104\024\051\025\067\027\057\044\053" +
    "\001\002\000\024\012\uffac\013\uffac\014\uffac\015\uffac\017" +
    "\uffac\024\uffac\025\uffac\027\uffac\044\uffac\001\002\000\024" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\024\uffa9\025" +
    "\uffa9\027\uffa9\044\uffa9\001\002\000\024\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\017\uffb1\024\uffb1\025\uffb1\027\uffb1\044" +
    "\uffb1\001\002\000\100\003\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\016\uffc8\017\uffc8\021\uffc8\023\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\057\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\001\002\000\024\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\017\uffb0\024\uffb0\025\uffb0\027\uffb0\044\uffb0\001\002" +
    "\000\100\003\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\016\uffb4\017\uffb4\021\uffb4\023\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\057\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001" +
    "\002\000\100\003\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\016\uffb3\017\uffb3\021\uffb3\023\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\057" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\001\002\000\024\012\073\013\035\014\036\015\044\017" +
    "\104\024\051\025\067\027\057\044\053\001\002\000\024" +
    "\012\073\013\035\014\036\015\044\017\104\024\051\025" +
    "\067\027\057\044\053\001\002\000\024\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\024\uffb9\025\uffb9\027\uffb9\044" +
    "\uffb9\001\002\000\100\003\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\016\uffc5\017\uffc5\021\uffc5\023\uffc5\030" +
    "\uffc5\031\137\032\140\033\120\034\117\035\124\036\132" +
    "\037\127\040\121\041\133\042\134\043\136\044\125\045" +
    "\uffc5\057\uffc5\062\123\063\143\064\122\065\116\066\130" +
    "\067\126\001\002\000\100\003\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\016\uffc7\017\uffc7\021\uffc7\023\uffc7" +
    "\030\uffc7\031\137\032\140\033\120\034\117\035\124\036" +
    "\132\037\127\040\121\041\133\042\134\043\136\044\125" +
    "\045\uffc7\057\uffc7\062\123\063\143\064\122\065\116\066" +
    "\130\067\126\001\002\000\100\003\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
    "\uffc6\030\uffc6\031\137\032\140\033\120\034\117\035\124" +
    "\036\132\037\127\040\121\041\133\042\134\043\136\044" +
    "\125\045\uffc6\057\uffc6\062\123\063\143\064\122\065\116" +
    "\066\130\067\126\001\002\000\024\012\073\013\035\014" +
    "\036\015\044\017\104\024\051\025\067\027\057\044\053" +
    "\001\002\000\054\003\uff7a\016\uff7a\030\uff7a\031\137\032" +
    "\140\033\120\034\117\035\124\036\132\037\127\040\121" +
    "\041\133\042\134\043\136\044\125\062\123\063\143\064" +
    "\122\065\116\066\130\067\126\001\002\000\100\003\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\016\uff7c\017" +
    "\uff7c\021\uff7c\023\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\045\uff7c\057\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\001\002\000\004\023" +
    "\156\001\002\000\024\012\073\013\035\014\036\015\044" +
    "\017\104\024\051\025\067\027\057\044\053\001\002\000" +
    "\050\023\155\031\137\032\140\033\120\034\117\035\124" +
    "\036\132\037\127\040\121\041\133\042\134\043\136\044" +
    "\125\062\123\063\143\064\122\065\116\066\130\067\126" +
    "\001\002\000\022\005\uff84\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\017\uff84\026\uff84\045\uff84\001\002\000\022\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\017\uff83\026\uff83\045" +
    "\uff83\001\002\000\004\022\100\001\002\000\022\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\017\uff90\026\161\045" +
    "\uff90\001\002\000\026\012\073\013\035\014\036\015\044" +
    "\017\104\020\163\024\051\025\067\027\057\044\053\001" +
    "\002\000\064\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\017\uff8e\031\137\032\140\033\120\034\117\035\124\036" +
    "\132\037\127\040\121\041\133\042\134\043\136\044\125" +
    "\045\uff8e\062\123\063\143\064\122\065\116\066\130\067" +
    "\126\001\002\000\024\012\073\013\035\014\036\015\044" +
    "\017\104\024\051\025\067\027\057\044\053\001\002\000" +
    "\052\016\uff88\021\uff88\031\137\032\140\033\120\034\117" +
    "\035\124\036\132\037\127\040\121\041\133\042\134\043" +
    "\136\044\125\062\123\063\143\064\122\065\116\066\130" +
    "\067\126\001\002\000\006\016\170\021\uff8b\001\002\000" +
    "\004\021\167\001\002\000\020\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\017\uff8d\045\uff8d\001\002\000\024\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\017\uff8a\024\uff8a\025\uff8a" +
    "\027\uff8a\044\uff8a\001\002\000\024\012\073\013\035\014" +
    "\036\015\044\017\104\024\051\025\067\027\057\044\053" +
    "\001\002\000\052\016\uff89\021\uff89\031\137\032\140\033" +
    "\120\034\117\035\124\036\132\037\127\040\121\041\133" +
    "\042\134\043\136\044\125\062\123\063\143\064\122\065" +
    "\116\066\130\067\126\001\002\000\024\012\073\013\035" +
    "\014\036\015\044\017\104\024\051\025\067\027\057\044" +
    "\053\001\002\000\050\030\175\031\137\032\140\033\120" +
    "\034\117\035\124\036\132\037\127\040\121\041\133\042" +
    "\134\043\136\044\125\062\123\063\143\064\122\065\116" +
    "\066\130\067\126\001\002\000\004\045\176\001\002\000" +
    "\066\003\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\021\uffda\024" +
    "\uffda\025\uffda\027\uffda\044\uffda\046\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda\061" +
    "\uffda\001\002\000\066\003\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017" +
    "\uffde\021\uffde\024\uffde\025\uffde\027\uffde\044\uffde\046\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\060\uffde\061\uffde\001\002\000\066\003\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\017\uffdf\021\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\044\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\001\002\000\026" +
    "\003\203\012\073\013\035\014\036\015\044\017\104\024" +
    "\051\025\067\027\057\044\053\001\002\000\050\030\227" +
    "\031\137\032\140\033\120\034\117\035\124\036\132\037" +
    "\127\040\121\041\133\042\134\043\136\044\125\062\123" +
    "\063\143\064\122\065\116\066\130\067\126\001\002\000" +
    "\004\030\204\001\002\000\006\003\206\020\205\001\002" +
    "\000\062\003\052\005\005\006\011\007\015\010\006\011" +
    "\017\012\073\013\035\014\036\015\044\017\043\021\212" +
    "\024\051\025\067\027\057\044\053\046\050\050\064\051" +
    "\042\052\061\055\055\056\213\060\072\061\063\001\002" +
    "\000\070\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\044\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\060\uffe3\061\uffe3\001\002\000\066\003\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\017\uff9e\021\uff9e\024\uff9e\025\uff9e\027\uff9e\044" +
    "\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\060\uff9e\061\uff9e\001\002\000\004\045" +
    "\225\001\002\000\062\003\220\005\005\006\011\007\015" +
    "\010\006\011\017\012\073\013\035\014\036\015\044\017" +
    "\043\021\217\024\051\025\067\027\057\044\053\046\050" +
    "\050\064\051\042\052\061\055\055\056\213\060\072\061" +
    "\063\001\002\000\070\003\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\021\uffe7\024\uffe7\025\uffe7\027\uffe7\044\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\060\uffe7\061\uffe7\001\002\000\030\003\215" +
    "\012\073\013\035\014\036\015\044\017\104\024\051\025" +
    "\067\027\057\044\053\045\uff76\001\002\000\050\031\137" +
    "\032\140\033\120\034\117\035\124\036\132\037\127\040" +
    "\121\041\133\042\134\043\136\044\125\045\uff77\062\123" +
    "\063\143\064\122\065\116\066\130\067\126\001\002\000" +
    "\004\045\uff75\001\002\000\004\045\223\001\002\000\070" +
    "\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5" +
    "\061\uffe5\001\002\000\004\045\222\001\002\000\066\003" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\021\uffe2\024\uffe2\025" +
    "\uffe2\027\uffe2\044\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\001" +
    "\002\000\066\003\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\021" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\044\uffd8\046\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\060" +
    "\uffd8\061\uffd8\001\002\000\004\021\224\001\002\000\070" +
    "\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6" +
    "\061\uffe6\001\002\000\004\021\226\001\002\000\070\003" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4\024\uffe4\025" +
    "\uffe4\027\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4\061" +
    "\uffe4\001\002\000\006\003\206\020\205\001\002\000\066" +
    "\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f\024\uff9f" +
    "\025\uff9f\027\uff9f\044\uff9f\046\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f" +
    "\001\002\000\004\017\232\001\002\000\004\030\233\001" +
    "\002\000\004\045\234\001\002\000\066\003\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\044\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\060\uffd9\061\uffd9\001\002\000\004" +
    "\045\uffd4\001\002\000\010\022\100\026\237\045\uffd7\001" +
    "\002\000\024\012\073\013\035\014\036\015\044\017\104" +
    "\024\051\025\067\027\057\044\053\001\002\000\050\031" +
    "\137\032\140\033\120\034\117\035\124\036\132\037\127" +
    "\040\121\041\133\042\134\043\136\044\125\045\uffd6\062" +
    "\123\063\143\064\122\065\116\066\130\067\126\001\002" +
    "\000\026\003\243\012\073\013\035\014\036\015\044\017" +
    "\104\024\051\025\067\027\057\044\053\001\002\000\050" +
    "\030\263\031\137\032\140\033\120\034\117\035\124\036" +
    "\132\037\127\040\121\041\133\042\134\043\136\044\125" +
    "\062\123\063\143\064\122\065\116\066\130\067\126\001" +
    "\002\000\004\030\244\001\002\000\004\020\245\001\002" +
    "\000\004\053\250\001\002\000\010\003\257\021\261\053" +
    "\250\001\002\000\012\003\uff96\021\uff96\053\uff96\054\uff96" +
    "\001\002\000\026\003\252\012\073\013\035\014\036\015" +
    "\044\017\104\024\051\025\067\027\057\044\053\001\002" +
    "\000\050\031\137\032\140\033\120\034\117\035\124\036" +
    "\132\037\127\040\121\041\133\042\134\043\136\044\125" +
    "\057\255\062\123\063\143\064\122\065\116\066\130\067" +
    "\126\001\002\000\004\057\253\001\002\000\056\003\052" +
    "\005\005\006\011\007\015\010\006\011\017\012\073\013" +
    "\035\014\036\015\044\017\043\024\051\025\067\027\057" +
    "\044\053\046\050\050\064\051\042\052\061\055\055\060" +
    "\072\061\063\001\002\000\064\003\220\005\005\006\011" +
    "\007\015\010\006\011\017\012\073\013\035\014\036\015" +
    "\044\017\043\021\uff93\024\051\025\067\027\057\044\053" +
    "\046\050\050\064\051\042\052\061\053\uff93\054\uff93\055" +
    "\055\060\072\061\063\001\002\000\056\003\052\005\005" +
    "\006\011\007\015\010\006\011\017\012\073\013\035\014" +
    "\036\015\044\017\043\024\051\025\067\027\057\044\053" +
    "\046\050\050\064\051\042\052\061\055\055\060\072\061" +
    "\063\001\002\000\064\003\220\005\005\006\011\007\015" +
    "\010\006\011\017\012\073\013\035\014\036\015\044\017" +
    "\043\021\uff94\024\051\025\067\027\057\044\053\046\050" +
    "\050\064\051\042\052\061\053\uff94\054\uff94\055\055\060" +
    "\072\061\063\001\002\000\004\053\250\001\002\000\012" +
    "\003\uff97\021\uff97\053\uff97\054\uff97\001\002\000\066\003" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\017\uff98\021\uff98\024\uff98\025" +
    "\uff98\027\uff98\044\uff98\046\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\060\uff98\061\uff98\001" +
    "\002\000\012\003\uff95\021\uff95\053\uff95\054\uff95\001\002" +
    "\000\004\020\264\001\002\000\004\053\250\001\002\000" +
    "\012\003\257\021\270\053\250\054\266\001\002\000\006" +
    "\003\272\057\273\001\002\000\004\021\271\001\002\000" +
    "\066\003\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\017\uff99\021\uff99\024" +
    "\uff99\025\uff99\027\uff99\044\uff99\046\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\060\uff99\061" +
    "\uff99\001\002\000\066\003\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\017" +
    "\uff9a\021\uff9a\024\uff9a\025\uff9a\027\uff9a\044\uff9a\046\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\060\uff9a\061\uff9a\001\002\000\056\003\052\005\005" +
    "\006\011\007\015\010\006\011\017\012\073\013\035\014" +
    "\036\015\044\017\043\024\051\025\067\027\057\044\053" +
    "\046\050\050\064\051\042\052\061\055\055\060\072\061" +
    "\063\001\002\000\056\003\052\005\005\006\011\007\015" +
    "\010\006\011\017\012\073\013\035\014\036\015\044\017" +
    "\043\024\051\025\067\027\057\044\053\046\050\050\064" +
    "\051\042\052\061\055\055\060\072\061\063\001\002\000" +
    "\060\003\220\005\005\006\011\007\015\010\006\011\017" +
    "\012\073\013\035\014\036\015\044\017\043\021\uff92\024" +
    "\051\025\067\027\057\044\053\046\050\050\064\051\042" +
    "\052\061\055\055\060\072\061\063\001\002\000\060\003" +
    "\220\005\005\006\011\007\015\010\006\011\017\012\073" +
    "\013\035\014\036\015\044\017\043\021\uff91\024\051\025" +
    "\067\027\057\044\053\046\050\050\064\051\042\052\061" +
    "\055\055\060\072\061\063\001\002\000\004\030\302\001" +
    "\002\000\024\012\073\013\035\014\036\015\044\017\104" +
    "\024\051\025\067\027\057\044\053\001\002\000\050\030" +
    "\301\031\137\032\140\033\120\034\117\035\124\036\132" +
    "\037\127\040\121\041\133\042\134\043\136\044\125\062" +
    "\123\063\143\064\122\065\116\066\130\067\126\001\002" +
    "\000\100\003\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\023\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\057\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\001" +
    "\002\000\100\003\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\016\uffc1\017\uffc1\021\uffc1\023\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\057" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\001\002\000\066\003\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\021\uffdb\024\uffdb\025\uffdb\027\uffdb\044\uffdb\046\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\001\002\000\066\003\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\027\uffdc\044" +
    "\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\060\uffdc\061\uffdc\001\002\000\100\003" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\023\uffc4\030\uffc4\031\137\032\140\033" +
    "\120\034\117\035\124\036\132\037\127\040\121\041\133" +
    "\042\uffc4\043\uffc4\044\125\045\uffc4\057\uffc4\062\123\063" +
    "\143\064\122\065\116\066\130\067\126\001\002\000\026" +
    "\003\310\012\073\013\035\014\036\015\044\017\104\024" +
    "\051\025\067\027\057\044\053\001\002\000\050\030\315" +
    "\031\137\032\140\033\120\034\117\035\124\036\132\037" +
    "\127\040\121\041\133\042\134\043\136\044\125\062\123" +
    "\063\143\064\122\065\116\066\130\067\126\001\002\000" +
    "\004\030\311\001\002\000\006\003\206\020\205\001\002" +
    "\000\070\003\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\021\uffa2" +
    "\024\uffa2\025\uffa2\027\uffa2\044\uffa2\046\uffa2\047\313\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\060\uffa2\061\uffa2\001\002\000\006\003\206\020\205\001" +
    "\002\000\066\003\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\021" +
    "\uffa0\024\uffa0\025\uffa0\027\uffa0\044\uffa0\046\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\001\002\000\006\003\316\020\205\001\002" +
    "\000\070\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\044\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\060\uffe3\061\uffe3\001\002\000\070\003\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\017\uffa4\021\uffa4\024\uffa4\025\uffa4\027\uffa4\044" +
    "\uffa4\046\uffa4\047\320\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\001\002\000" +
    "\006\003\206\020\205\001\002\000\066\003\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\017\uffa3\021\uffa3\024\uffa3\025\uffa3\027\uffa3" +
    "\044\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\001\002\000\006" +
    "\003\206\020\205\001\002\000\066\003\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\017\uffa1\021\uffa1\024\uffa1\025\uffa1\027\uffa1\044" +
    "\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\060\uffa1\061\uffa1\001\002\000\004\045" +
    "\325\001\002\000\004\021\326\001\002\000\020\002\uffeb" +
    "\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\001" +
    "\002\000\026\003\331\012\073\013\035\014\036\015\044" +
    "\017\104\024\051\025\067\027\057\044\053\001\002\000" +
    "\050\031\137\032\140\033\120\034\117\035\124\036\132" +
    "\037\127\040\121\041\133\042\134\043\136\044\125\045" +
    "\uffce\062\123\063\143\064\122\065\116\066\130\067\126" +
    "\001\002\000\004\045\uffcd\001\002\000\020\003\335\005" +
    "\005\006\011\007\015\010\006\011\017\017\336\001\002" +
    "\000\004\045\347\001\002\000\004\045\341\001\002\000" +
    "\006\030\337\045\uffcc\001\002\000\006\022\100\026\327" +
    "\001\002\000\006\003\206\020\205\001\002\000\066\003" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\017\uff9b\021\uff9b\024\uff9b\025" +
    "\uff9b\027\uff9b\044\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\001" +
    "\002\000\024\012\073\013\035\014\036\015\044\017\104" +
    "\024\051\025\067\027\057\044\053\001\002\000\050\031" +
    "\137\032\140\033\120\034\117\035\124\036\132\037\127" +
    "\040\121\041\133\042\134\043\136\044\125\045\343\062" +
    "\123\063\143\064\122\065\116\066\130\067\126\001\002" +
    "\000\024\012\073\013\035\014\036\015\044\017\104\024" +
    "\051\025\067\027\057\044\053\001\002\000\050\030\345" +
    "\031\137\032\140\033\120\034\117\035\124\036\132\037" +
    "\127\040\121\041\133\042\134\043\136\044\125\062\123" +
    "\063\143\064\122\065\116\066\130\067\126\001\002\000" +
    "\006\003\206\020\205\001\002\000\066\003\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\017\uff9d\021\uff9d\024\uff9d\025\uff9d\027\uff9d" +
    "\044\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d\001\002\000\024" +
    "\012\073\013\035\014\036\015\044\017\104\024\051\025" +
    "\067\027\057\044\053\001\002\000\050\031\137\032\140" +
    "\033\120\034\117\035\124\036\132\037\127\040\121\041" +
    "\133\042\134\043\136\044\125\045\351\062\123\063\143" +
    "\064\122\065\116\066\130\067\126\001\002\000\024\012" +
    "\073\013\035\014\036\015\044\017\104\024\051\025\067" +
    "\027\057\044\053\001\002\000\050\030\353\031\137\032" +
    "\140\033\120\034\117\035\124\036\132\037\127\040\121" +
    "\041\133\042\134\043\136\044\125\062\123\063\143\064" +
    "\122\065\116\066\130\067\126\001\002\000\006\003\206" +
    "\020\205\001\002\000\066\003\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\017\uff9c\021\uff9c\024\uff9c\025\uff9c\027\uff9c\044\uff9c\046" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\060\uff9c\061\uff9c\001\002\000\004\045\356\001" +
    "\002\000\004\021\357\001\002\000\020\002\uffe9\003\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\001\002\000" +
    "\004\020\027\001\002\000\020\002\ufff6\003\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\001\002\000\004\027" +
    "\364\001\002\000\020\002\uffee\003\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\001\002\000\020\003\366\005" +
    "\005\006\011\007\015\010\006\011\017\030\365\001\002" +
    "\000\004\020\027\001\002\000\004\030\u0103\001\002\000" +
    "\004\017\u0102\001\002\000\004\030\u0100\001\002\000\010" +
    "\003\373\016\372\030\uff82\001\002\000\014\005\005\006" +
    "\011\007\015\010\006\011\017\001\002\000\014\005\005" +
    "\006\011\007\015\010\006\011\017\001\002\000\004\017" +
    "\375\001\002\000\010\003\uff7f\016\uff7f\030\uff7f\001\002" +
    "\000\004\017\377\001\002\000\010\003\uff81\016\uff81\030" +
    "\uff81\001\002\000\004\020\027\001\002\000\020\002\ufff2" +
    "\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002\000\010\003\uff80\016\uff80\030\uff80\001\002\000\004" +
    "\020\027\001\002\000\020\002\ufff0\003\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\001\002\000\020\002\ufff1" +
    "\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\001" +
    "\002\000\020\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\001\002\000\004\027\u0112\001\002\000" +
    "\020\002\uffff\003\u0110\005\005\006\011\007\015\010\006" +
    "\011\017\001\002\000\010\004\u0107\017\u010a\020\027\001" +
    "\002\000\004\027\u010b\001\002\000\014\005\005\006\011" +
    "\007\015\010\006\011\017\001\002\000\004\030\u010d\001" +
    "\002\000\004\020\027\001\002\000\020\002\uffed\003\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\001\002\000" +
    "\020\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\001\002\000\024\003\u0109\004\u0107\005\005\006" +
    "\011\007\015\010\006\011\017\017\u010a\020\027\001\002" +
    "\000\020\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\001\002\000\004\030\u0113\001\002\000\004" +
    "\020\027\001\002\000\020\002\ufff3\003\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\001\002\000\026\002\ufffe" +
    "\003\u0109\004\u0107\005\005\006\011\007\015\010\006\011" +
    "\017\017\u010a\020\027\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\016\002\003\012\012\040\006\041\007\046" +
    "\015\047\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\012\040" +
    "\u010e\046\015\047\013\001\001\000\002\001\001\000\016" +
    "\004\u0105\012\012\040\006\041\u0107\046\015\047\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\361\001" +
    "\001\000\004\050\021\001\001\000\004\003\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\027\001\001\000\006\052\031\053\030\001\001" +
    "\000\002\001\001\000\004\037\354\001\001\000\040\005" +
    "\046\006\064\007\067\010\070\011\053\012\061\013\040" +
    "\020\044\021\065\022\055\023\037\024\057\031\073\033" +
    "\036\042\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\220\007\067\010\070\011\053" +
    "\012\061\013\040\020\044\021\065\022\055\023\037\024" +
    "\057\031\073\033\036\037\323\042\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\304\013\040\033\036\001\001\000\012\014\140\015\134" +
    "\016\141\017\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\075\042\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\100\001\001\000" +
    "\004\056\152\001\001\000\002\001\001\000\010\011\102" +
    "\013\040\033\036\001\001\000\012\014\140\015\134\016" +
    "\141\017\130\001\001\000\002\001\001\000\012\011\106" +
    "\013\040\030\110\033\036\001\001\000\002\001\001\000" +
    "\012\014\140\015\134\016\141\017\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\146\001\001\000" +
    "\010\011\114\013\040\033\036\001\001\000\002\001\001" +
    "\000\012\014\140\015\134\016\141\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\145\013\040\033\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\144\013\040\033\036\001\001" +
    "\000\010\011\143\013\040\033\036\001\001\000\002\001" +
    "\001\000\012\014\140\015\134\016\141\017\130\001\001" +
    "\000\012\014\140\015\134\016\141\017\130\001\001\000" +
    "\012\014\140\015\134\016\141\017\130\001\001\000\010" +
    "\011\147\013\040\033\036\001\001\000\012\014\140\015" +
    "\134\016\141\017\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\153\013\040\033\036\001\001\000" +
    "\012\014\140\015\134\016\141\017\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\157\001\001\000" +
    "\002\001\001\000\010\011\161\013\040\033\036\001\001" +
    "\000\012\014\140\015\134\016\141\017\130\001\001\000" +
    "\014\011\163\013\040\033\036\043\165\044\164\001\001" +
    "\000\012\014\140\015\134\016\141\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\170\001\001\000\010\011\171\013\040\033\036\001" +
    "\001\000\012\014\140\015\134\016\141\017\130\001\001" +
    "\000\010\011\173\013\040\033\036\001\001\000\012\014" +
    "\140\015\134\016\141\017\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\201\013\040\033\036\001\001\000\012\014\140" +
    "\015\134\016\141\017\130\001\001\000\002\001\001\000" +
    "\004\045\206\001\001\000\042\005\210\006\064\007\067" +
    "\010\070\011\053\012\061\013\040\020\044\021\065\022" +
    "\055\023\037\024\057\031\073\033\036\037\207\042\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\220\007\067\010\070\011\053\012\061" +
    "\013\040\020\044\021\065\022\055\023\037\024\057\031" +
    "\073\033\036\037\215\042\045\001\001\000\002\001\001" +
    "\000\010\011\213\013\040\033\036\001\001\000\012\014" +
    "\140\015\134\016\141\017\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\157\001\001\000\010\011\237\013\040" +
    "\033\036\001\001\000\012\014\140\015\134\016\141\017" +
    "\130\001\001\000\010\011\241\013\040\033\036\001\001" +
    "\000\012\014\140\015\134\016\141\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\245\026\246" +
    "\001\001\000\004\026\257\001\001\000\002\001\001\000" +
    "\010\011\250\013\040\033\036\001\001\000\012\014\140" +
    "\015\134\016\141\017\130\001\001\000\002\001\001\000" +
    "\040\005\253\006\064\007\067\010\070\011\053\012\061" +
    "\013\040\020\044\021\065\022\055\023\037\024\057\031" +
    "\073\033\036\042\045\001\001\000\036\006\220\007\067" +
    "\010\070\011\053\012\061\013\040\020\044\021\065\022" +
    "\055\023\037\024\057\031\073\033\036\042\045\001\001" +
    "\000\040\005\255\006\064\007\067\010\070\011\053\012" +
    "\061\013\040\020\044\021\065\022\055\023\037\024\057" +
    "\031\073\033\036\042\045\001\001\000\036\006\220\007" +
    "\067\010\070\011\053\012\061\013\040\020\044\021\065" +
    "\022\055\023\037\024\057\031\073\033\036\042\045\001" +
    "\001\000\004\026\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\264\026\246\001\001\000\006\026\257\027\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\274\006\064\007\067\010\070" +
    "\011\053\012\061\013\040\020\044\021\065\022\055\023" +
    "\037\024\057\031\073\033\036\042\045\001\001\000\040" +
    "\005\273\006\064\007\067\010\070\011\053\012\061\013" +
    "\040\020\044\021\065\022\055\023\037\024\057\031\073" +
    "\033\036\042\045\001\001\000\036\006\220\007\067\010" +
    "\070\011\053\012\061\013\040\020\044\021\065\022\055" +
    "\023\037\024\057\031\073\033\036\042\045\001\001\000" +
    "\036\006\220\007\067\010\070\011\053\012\061\013\040" +
    "\020\044\021\065\022\055\023\037\024\057\031\073\033" +
    "\036\042\045\001\001\000\002\001\001\000\010\011\277" +
    "\013\040\033\036\001\001\000\012\014\140\015\134\016" +
    "\141\017\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\140\015" +
    "\134\016\141\017\130\001\001\000\010\011\306\013\040" +
    "\033\036\001\001\000\012\014\140\015\134\016\141\017" +
    "\130\001\001\000\002\001\001\000\004\045\311\001\001" +
    "\000\002\001\001\000\004\045\313\001\001\000\002\001" +
    "\001\000\004\045\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\320\001\001\000\002\001\001\000" +
    "\004\045\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\327\013" +
    "\040\033\036\001\001\000\012\014\140\015\134\016\141" +
    "\017\130\001\001\000\002\001\001\000\014\007\333\010" +
    "\332\012\061\031\073\042\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\100\001" +
    "\001\000\004\045\337\001\001\000\002\001\001\000\010" +
    "\011\341\013\040\033\036\001\001\000\012\014\140\015" +
    "\134\016\141\017\130\001\001\000\010\011\343\013\040" +
    "\033\036\001\001\000\012\014\140\015\134\016\141\017" +
    "\130\001\001\000\004\045\345\001\001\000\002\001\001" +
    "\000\010\011\347\013\040\033\036\001\001\000\012\014" +
    "\140\015\134\016\141\017\130\001\001\000\010\011\351" +
    "\013\040\033\036\001\001\000\012\014\140\015\134\016" +
    "\141\017\130\001\001\000\004\045\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\360\001\001\000\002\001\001\000\004" +
    "\034\362\001\001\000\002\001\001\000\010\012\366\035" +
    "\367\036\370\001\001\000\004\004\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\375\001\001\000\004\012\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\012\040\u010e\046\015\047\013\001\001\000" +
    "\004\004\u0105\001\001\000\002\001\001\000\010\012\366" +
    "\035\u010b\036\370\001\001\000\002\001\001\000\004\004" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\u0105\012\012\040\u0110\046\015\047\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0113\001\001" +
    "\000\002\001\001\000\014\004\u0105\012\012\040\u0110\046" +
    "\015\047\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    BasicLexerCupV lex;

    private int errorCount = 0;

    private Arbol arbol;

    private int bloqueActual = 0;

    /**public String getTipo(ArrayList<String> listaTablasSimbolos, String id) {
                    String tipo = "null";
                    for (String token : listaTablasSimbolos) {
                        String[] partesToken = token.split(":");
                        if (id.equals(partesToken[0])) {
                            tipo = partesToken[1];
                            break;
                        }
                    }
                    if (tipo.equals("null")) {
                        System.err.println("Error semántico: Variable " + id + " no declarada.");
                    }
                    System.out.println("tipo: " + tipo);
                    return tipo;
                }*/

    /**
     * Método: getArbol
     * Objetivo: Obtener el arbol.
     * Entradas: Ninguna
     * Salida: El arbol actual.
     */
    public Arbol getArbol() {
        return arbol;
    }
    /**
     * Método: crearNodo
     * Objetivo: Crear un nuevo nodo para el árbol sintáctico con un dato específico.
     * Entradas:
     *   - dato: Cadena de texto que representa el valor asociado al nodo.
     * Salida: Una instancia de la clase Nodo con el dato proporcionado.
     */
    private Nodo crearNodo(String dato) {
        return new Nodo(dato);
    }

    /**
     * Método: syntax_error
     * Objetivo: Manejar los errores sintácticos encontrados durante el análisis sintáctico.
     * Entradas:
     *   - s: Objeto de tipo Symbol que contiene información sobre el error sintáctico, como la posición y el token involucrado.
     * Salida: Ninguna.
     * Restricciones: Se espera que el objeto Symbol contenga información válida de posición y token.
     */
    @Override
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintáctico en línea " + (s.left + 1) +
                           ", columna " + (s.right + 1) + ". Token inesperado: " + s.value);
    }

    /**
     * Método: hasErrors
     * Objetivo: Verificar si se han registrado errores durante el análisis sintáctico.
     * Entradas: Ninguna.
     * Salida: Booleano que indica si existen errores (true si hay errores, false sino).
     *         Se utiliza en la clase MainJFlexCup para indicar si el archivo puede generarse
     * Restricciones: La variable errorCount debe haber sido correctamente inicializada y actualizada.
     */
    public boolean hasErrors() {
        return errorCount > 0;
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCupV lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.currentHash = null;
        this.arbol = new Arbol();
    }

    // Tabla de símbolos
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<>();
    String currentHash;

    /**
     * Método: imprimirTablaSimbolos
     * Objetivo: Imprimir todas las tablas de símbolos almacenadas, mostrando el contenido de cada tabla en un formato tabular.
     * Entradas: Ninguna.
     * Salida: Se llama en MainJFlexCup para imprimir en la consola el contenido de las tablas de símbolos.
     * Detalles:
     *   - Cada tabla está asociada a una clave (nombre de la función o el main).
     *   - Se imprime una tabla separada para cada clave con columnas que incluyen línea, columna, lexema y tipo.
     * Restricciones: Se espera que la estructura `listaTablasSimbolos` esté correctamente inicializada y contenga las claves y los valores correspondientes.
     */
    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de símbolos: " + key);
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            System.out.println("| Línea  | Columna | Lexema              | Tipo       | Bloque    |");
            System.out.println("+--------+---------+----------------------+------------+-----------+");
            for (String simbolo : listaTablasSimbolos.get(key)) {
                System.out.println(simbolo);
            }
            System.out.println("+--------+---------+----------------------+------------+-----------+\n");
        }
    }

    /**
     * Método: agregarTablaSimbolos
     * Objetivo: Crear una nueva tabla de símbolos asociada a una función o al main y agregarla al mapa de tablas de símbolos.
     * Entradas:
     *   - tipoTabla: Tipo de la tabla ("función" o "main").
     *   - nombre: Nombre asociado a la tabla (El nombre de la función o "_verano_" que es el token asociado a main).
     * Salida: Ninguna.
     * Detalles:
     *   - Se inicializa una nueva tabla de símbolos como una lista de cadenas.
     *   - Se guarda en el mapa `listaTablasSimbolos` con el nombre como clave.
     *   - `currentHash` se actualiza para indicar que la tabla activa es la recién creada.
     * Restricciones:
     *   - El nombre de la tabla debe ser único para evitar sobrescribir tablas existentes.
     */
    public void agregarTablaSimbolos(String tipoTabla, String nombre) {
        System.out.println("/+++Nueva tabla símbolos función o main+++/ " + nombre);
        ArrayList<String> nuevaTabla = new ArrayList<>();
        currentHash = nombre;
        bloqueActual = 1;
        listaTablasSimbolos.put(currentHash, nuevaTabla);
    }

    /**
     * Método: agregarVariable
     * Objetivo: Agregar una nueva variable a la tabla de símbolos activa, registrando su línea, columna, lexema y tipo.
     * Entradas:
     *   - linea: Número de línea donde se encuentra la variable.
     *   - columna: Número de columna donde se encuentra la variable.
     *   - lexema: Nombre o representación textual de la variable.
     *   - tipo: Tipo de la variable
     * Salida: Ninguna.
     * Detalles:
     *   - Verifica que haya una tabla de símbolos activa (`currentHash`) y que esta exista en el mapa `listaTablasSimbolos`.
     *   - Si no hay tabla activa o no existe, se imprime un mensaje de error.
     *   - Si todo es válido, formatea la información de la variable en una tabla y la agrega a la tabla de símbolos activa.
     * Restricciones:
     *   - Debe existir una tabla de símbolos activa antes de llamar a este método.
     *   - La línea, columna, lexema y tipo deben ser datos válidos y coherentes con el análisis.
     */
    public void agregarVariable(int linea, int columna, String lexema, String tipo) {
        System.out.println("PARSER: identificador (agregar o verificar) " + lexema);
        if (currentHash == null) {
            System.err.println("Error: No hay una tabla de símbolos activa");
            return;
        }
        ArrayList<String> tabla = listaTablasSimbolos.get(currentHash);
        if (tabla == null) {
            System.err.println("Error: La tabla de símbolos '" + currentHash + "' no existe");
            return;
        }
        String entrada = String.format("| %-6d | %-7d | %-20s | %-10s | Bloque %-3d |",
                linea + 1, columna + 1, lexema, tipo, bloqueActual);
        tabla.add(entrada);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

  
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error lista_funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= lista_funciones error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_funciones ::= lista_funciones funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_funciones ::= funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_funciones ::= lista_funciones error funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_funciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= cabecera_funcion 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= cabecera_main 
            {
              Object RESULT =null;
		int dmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= error bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_main ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_main ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    parser.agregarTablaSimbolos("main", "_verano_");
                    parser.agregarVariable(0, 0, "main", t.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera_main ::= tipo MAIN NT$0 declaracion_main 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cabecera_main ::= error MAIN PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_main",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_funcion ::= PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_funcion ::= PARENTESISAPERTURA PARENTESISCIERRE bloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_funcion ::= PARENTESISAPERTURA error PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                       Symbol symbol = (Symbol) CUP$parser$stack.peek();
                       parser.agregarTablaSimbolos("funcion", id.toString());
                       parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cabecera_funcion ::= tipo IDENTIFICADOR NT$1 declaracion_funcion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cabecera_funcion ::= error IDENTIFICADOR PARENTESISAPERTURA parametros PARENTESISCIERRE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$2 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= corcheteIzquierdo NT$2 lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Object RESULT =null;

            parser.bloqueActual++;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque ::= corcheteIzquierdo NT$3 return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= corcheteIzquierdo error corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloqueEstructura ::= corcheteIzquierdo corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloqueEstructura ::= corcheteIzquierdo lista_sentencias return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloqueEstructura ::= corcheteIzquierdo lista_sentencias corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueEstructura ::= corcheteIzquierdo return_stmt FIN_EXPRESION corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloqueEstructura ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueEstructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_sentencias ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error en una setencia."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= declaracion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= asignacion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= PRINT PARENTESISAPERTURA expresion PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= READ PARENTESISAPERTURA IDENTIFICADOR PARENTESISCIERRE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= tipo IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= tipo error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= STRING 
            {
              Object RESULT =null;
		
        RESULT = "cometa";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= CHAR 
            {
              Object RESULT =null;
		
        RESULT = "cupido";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= BOOL 
            {
              Object RESULT =null;
		
        RESULT = "trueno";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= IDENTIFICADOR ASIGNA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= IDENTIFICADOR ASIGNA error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion operador_unario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion operador_binario expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion operador_logico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$4 ::= 
            {
              Object RESULT =null;
 RESULT = "abreregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= PARENTESISAPERTURA NT$4 expresion PARENTESISCIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraregalo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "rodolfo");
        RESULT = "rodolfo";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "bromista");
        RESULT = "bromista";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cometa");
        RESULT = "cometa";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol symbol = (Symbol) CUP$parser$stack.peek();
        parser.agregarVariable(symbol.left, symbol.right, symbol.value.toString(), "cupido");
        RESULT = "cupido";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_binario ::= SUMA 
            {
              Object RESULT =null;
		RESULT="navidad";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_binario ::= RESTA 
            {
              Object RESULT =null;
		RESULT="intercambio";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_binario ::= DIVISION 
            {
              Object RESULT =null;
		RESULT="reyes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_binario ::= MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="nochebuena";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_binario ::= MODULO 
            {
              Object RESULT =null;
		RESULT="magos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_binario ::= POTENCIA 
            {
              Object RESULT =null;
		RESULT="adviento";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_binario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_unario ::= INCREMENTO 
            {
              Object RESULT =null;
		RESULT="quien";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_unario ::= DECREMENTO 
            {
              Object RESULT =null;
		RESULT="grinch";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_unario ::= NEGATIVO 
            {
              Object RESULT =null;
		RESULT="-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_unario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_logico ::= CONJUNCION 
            {
              Object RESULT =null;
		RESULT="melchor";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_logico ::= DISYUNCION 
            {
              Object RESULT =null;
		RESULT="gaspar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_logico ::= NEGACION 
            {
              Object RESULT =null;
		RESULT="baltazar";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT="snowball";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="evergreen";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT="minstix";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT="upatree";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operador_relacional ::= IGUAL 
            {
              Object RESULT =null;
		RESULT="mary";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_relacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT="openslae";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // estructura_control ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_stmt ::= IF PARENTESISAPERTURA expresion PARENTESISCIERRE error ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_stmt ::= IF PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura ELSE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // while_stmt ::= WHILE PARENTESISAPERTURA expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // while_stmt ::= WHILE PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_stmt ::= FOR PARENTESISAPERTURA declaracion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_stmt ::= FOR PARENTESISAPERTURA asignacion FIN_EXPRESION expresion FIN_EXPRESION expresion PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_stmt ::= FOR PARENTESISAPERTURA error PARENTESISCIERRE bloqueEstructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list default_stmt corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // switch_stmt ::= SWITCH PARENTESISAPERTURA expresion PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // switch_stmt ::= SWITCH PARENTESISAPERTURA error PARENTESISCIERRE corcheteIzquierdo case_list corcheteDerecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_list ::= case_list error case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_stmt ::= CASE expresion DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_stmt ::= CASE error DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // default_stmt ::= DEFAULT DOS_PUNTOS lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // default_stmt ::= DEFAULT error lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Symbol symbol = (Symbol) CUP$parser$stack.peek();
    parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    Symbol symbol = (Symbol) CUP$parser$stack.peek();
    parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracionArreglo ::= tipo IDENTIFICADOR acceso_arreglo ASIGNA corcheteIzquierdo parametrosArreglos corcheteDerecho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    Symbol symbol = (Symbol) CUP$parser$stack.peek();
    parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracionArreglo ::= IDENTIFICADOR acceso_arreglo ASIGNA expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionArreglo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametrosArreglos ::= parametrosArreglosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$5 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametrosArreglosAux ::= parametrosArreglosAux COMA NT$5 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametrosArreglosAux ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosArreglosAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arreglo ::= declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arreglo ::= arreglo declaracionArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = "abreempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // acceso_arreglo ::= CORCHETEAPERTURA NT$6 expresion CORCHETECIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "cierraempaque"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // acceso_arreglo ::= CORCHETEAPERTURA error CORCHETECIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lista_parametros ::= lista_parametros COMA tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // lista_parametros ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Symbol symbol = (Symbol) CUP$parser$stack.peek();
                        parser.agregarVariable(symbol.left, symbol.right, id.toString(), t.toString());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // lista_parametros ::= lista_parametros error tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA lista_expresiones PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // llamada_funcion ::= IDENTIFICADOR PARENTESISAPERTURA error PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$7 ::= 
            {
              Object RESULT =null;
 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lista_expresiones ::= lista_expresiones COMA NT$7 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lista_expresiones ::= lista_expresiones error expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // return_stmt ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // return_stmt ::= RETURN error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
